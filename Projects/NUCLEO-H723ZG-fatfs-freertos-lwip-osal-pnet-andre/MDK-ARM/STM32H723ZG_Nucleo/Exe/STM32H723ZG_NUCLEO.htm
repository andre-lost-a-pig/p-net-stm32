<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32H723ZG_Nucleo\Exe\STM32H723ZG_NUCLEO.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32H723ZG_Nucleo\Exe\STM32H723ZG_NUCLEO.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Feb 09 15:19:40 2023
<BR><P>
<H3>Maximum Stack Usage =       4464 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
PNetThread &rArr; _main &rArr; app_loop_forever &rArr; pnet_handle_periodic &rArr; pf_cmrpc_periodic &rArr; pf_cmrpc_dce_packet &rArr; pf_cmrpc_rpc_request &rArr; pf_cmrpc_rm_read_ind &rArr; pf_cmrdr_rm_read_ind &rArr; pf_pdport_read_ind &rArr; pf_lldp_get_peer_station_name &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7a]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7a]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[45c]">pf_cmsu_ppm_error_ind</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38e]">pf_cmdev_state_ind</a><BR>
 <LI><a href="#[584]">send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[556]">sendto</a><BR>
 <LI><a href="#[28f]">netconn_drain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28f]">netconn_drain</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7a]">ADC3_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[23]">ADC_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[7c]">BDMA_Channel0_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[7d]">BDMA_Channel1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[7e]">BDMA_Channel2_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[7f]">BDMA_Channel3_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[80]">BDMA_Channel4_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[81]">BDMA_Channel5_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[82]">BDMA_Channel6_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[83]">BDMA_Channel7_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[6]">BUTTON_USER_EXTI_Callback</a> from stm32h7xx_nucleo.o(i.BUTTON_USER_EXTI_Callback) referenced 2 times from stm32h7xx_nucleo.o(.data)
 <LI><a href="#[b]">BusFault_Handler</a> from stm32h7xx_it.o(i.BusFault_Handler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[68]">CEC_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[84]">COMP1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[91]">CORDIC_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[8a]">CRS_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[5a]">DCMI_PSSI_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[6d]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[6e]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[6f]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[70]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream0_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream2_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream3_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream4_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream5_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream6_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[3f]">DMA1_Stream7_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[65]">DMA2D_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream0_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream2_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream3_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream4_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream5_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream6_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream7_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[6c]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[7b]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[8d]">DTS_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[e]">DebugMon_Handler</a> from stm32h7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[8b]">ECC_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[4d]">ETH_IRQHandler</a> from stm32h7xx_it.o(i.ETH_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[2]">ETH_PHY_IO_DeInit</a> from ethernetif.o(i.ETH_PHY_IO_DeInit) referenced 2 times from ethernetif.o(.data)
 <LI><a href="#[5]">ETH_PHY_IO_GetTick</a> from ethernetif.o(i.ETH_PHY_IO_GetTick) referenced 2 times from ethernetif.o(.data)
 <LI><a href="#[1]">ETH_PHY_IO_Init</a> from ethernetif.o(i.ETH_PHY_IO_Init) referenced 2 times from ethernetif.o(.data)
 <LI><a href="#[4]">ETH_PHY_IO_ReadReg</a> from ethernetif.o(i.ETH_PHY_IO_ReadReg) referenced 2 times from ethernetif.o(.data)
 <LI><a href="#[3]">ETH_PHY_IO_WriteReg</a> from ethernetif.o(i.ETH_PHY_IO_WriteReg) referenced 2 times from ethernetif.o(.data)
 <LI><a href="#[4e]">ETH_WKUP_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[17]">EXTI0_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[39]">EXTI15_10_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[18]">EXTI1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[19]">EXTI2_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[1a]">EXTI3_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[1b]">EXTI4_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[28]">EXTI9_5_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[24]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[26]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[25]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[27]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[96]">FDCAN3_IT0_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[97]">FDCAN3_IT1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[4f]">FDCAN_CAL_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[15]">FLASH_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[90]">FMAC_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[40]">FMC_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[5c]">FPU_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[79]">HSEM1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[9]">HardFault_Handler</a> from stm32h7xx_it.o(i.HardFault_Handler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[31]">I2C1_ER_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[30]">I2C1_EV_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[33]">I2C2_ER_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[32]">I2C2_EV_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[55]">I2C3_ER_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[54]">I2C3_EV_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[6a]">I2C4_ER_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[69]">I2C4_EV_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[95]">I2C5_ER_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[94]">I2C5_EV_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[67]">LPTIM1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[85]">LPTIM2_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[86]">LPTIM3_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[87]">LPTIM4_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[88]">LPTIM5_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[89]">LPUART1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[64]">LTDC_ER_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[63]">LTDC_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[76]">MDIOS_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[75]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[77]">MDMA_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[a]">MemManage_Handler</a> from stm32h7xx_it.o(i.MemManage_Handler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[8]">NMI_Handler</a> from stm32h7xx_it.o(i.NMI_Handler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[66]">OCTOSPI1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[8f]">OCTOSPI2_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[59]">OTG_HS_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[be]">PNetThread</a> from main.o(i.PNetThread) referenced from main.o(i.main)
 <LI><a href="#[12]">PVD_AVD_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[f]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[16]">RCC_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[5b]">RNG_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[3a]">RTC_Alarm_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[14]">RTC_WKUP_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[7]">Reset_Handler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[62]">SAI1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[8c]">SAI4_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[41]">SDMMC1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[78]">SDMMC2_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[e8]">SD_initialize</a> from sd_diskio.o(i.SD_initialize) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[ec]">SD_ioctl</a> from sd_diskio.o(i.SD_ioctl) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[ea]">SD_read</a> from sd_diskio.o(i.SD_read) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[e9]">SD_status</a> from sd_diskio.o(i.SD_status) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[eb]">SD_write</a> from sd_diskio.o(i.SD_write) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[6b]">SPDIF_RX_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[34]">SPI1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[35]">SPI2_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[43]">SPI3_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[5f]">SPI4_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[60]">SPI5_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[61]">SPI6_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[d]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[71]">SWPMI1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[10]">SysTick_Handler</a> from cmsis_os2.o(i.SysTick_Handler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[9b]">SystemInit</a> from system_stm32h7xx.o(i.SystemInit) referenced from startup_stm32h723xx.o(.text)
 <LI><a href="#[13]">TAMP_STAMP_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[72]">TIM15_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[73]">TIM16_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[74]">TIM17_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[29]">TIM1_BRK_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[2c]">TIM1_CC_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[2b]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[2a]">TIM1_UP_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[98]">TIM23_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[99]">TIM24_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[2d]">TIM2_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[2e]">TIM3_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[2f]">TIM4_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[42]">TIM5_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[46]">TIM6_DAC_IRQHandler</a> from stm32h7xx_hal_timebase_tim.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[47]">TIM7_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[3b]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[3e]">TIM8_CC_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[3d]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[3c]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[44]">UART4_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[45]">UART5_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[5d]">UART7_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[5e]">UART8_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[92]">UART9_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[93]">USART10_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[36]">USART1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[37]">USART2_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[38]">USART3_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[53]">USART6_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[c]">UsageFault_Handler</a> from stm32h7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[8e]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[11]">WWDG_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[9c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32h723xx.o(.text)
 <LI><a href="#[a3]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[b1]">app_alarm_ack_cnf</a> from sampleapp_common.o(i.app_alarm_ack_cnf) referenced from sampleapp_common.o(i.app_pnet_cfg_init_default)
 <LI><a href="#[b0]">app_alarm_cnf</a> from sampleapp_common.o(i.app_alarm_cnf) referenced from sampleapp_common.o(i.app_pnet_cfg_init_default)
 <LI><a href="#[af]">app_alarm_ind</a> from sampleapp_common.o(i.app_alarm_ind) referenced from sampleapp_common.o(i.app_pnet_cfg_init_default)
 <LI><a href="#[a9]">app_ccontrol_cnf</a> from sampleapp_common.o(i.app_ccontrol_cnf) referenced from sampleapp_common.o(i.app_pnet_cfg_init_default)
 <LI><a href="#[a6]">app_connect_ind</a> from sampleapp_common.o(i.app_connect_ind) referenced from sampleapp_common.o(i.app_pnet_cfg_init_default)
 <LI><a href="#[a4]">app_cyclic_data_callback</a> from sampleapp_common.o(i.app_cyclic_data_callback) referenced from sampleapp_common.o(i.app_exp_submodule_ind)
 <LI><a href="#[a8]">app_dcontrol_ind</a> from sampleapp_common.o(i.app_dcontrol_ind) referenced from sampleapp_common.o(i.app_pnet_cfg_init_default)
 <LI><a href="#[ac]">app_exp_module_ind</a> from sampleapp_common.o(i.app_exp_module_ind) referenced from sampleapp_common.o(i.app_pnet_cfg_init_default)
 <LI><a href="#[ad]">app_exp_submodule_ind</a> from sampleapp_common.o(i.app_exp_submodule_ind) referenced from sampleapp_common.o(i.app_pnet_cfg_init_default)
 <LI><a href="#[b5]">app_loop_forever</a> from sampleapp_common.o(i.app_loop_forever) referenced from sampleapp_common.o(i.app_start)
 <LI><a href="#[ae]">app_new_data_status_ind</a> from sampleapp_common.o(i.app_new_data_status_ind) referenced from sampleapp_common.o(i.app_pnet_cfg_init_default)
 <LI><a href="#[aa]">app_read_ind</a> from sampleapp_common.o(i.app_read_ind) referenced from sampleapp_common.o(i.app_pnet_cfg_init_default)
 <LI><a href="#[a7]">app_release_ind</a> from sampleapp_common.o(i.app_release_ind) referenced from sampleapp_common.o(i.app_pnet_cfg_init_default)
 <LI><a href="#[b2]">app_reset_ind</a> from sampleapp_common.o(i.app_reset_ind) referenced from sampleapp_common.o(i.app_pnet_cfg_init_default)
 <LI><a href="#[b3]">app_signal_led_ind</a> from sampleapp_common.o(i.app_signal_led_ind) referenced from sampleapp_common.o(i.app_pnet_cfg_init_default)
 <LI><a href="#[a5]">app_state_ind</a> from sampleapp_common.o(i.app_state_ind) referenced from sampleapp_common.o(i.app_pnet_cfg_init_default)
 <LI><a href="#[ab]">app_write_ind</a> from sampleapp_common.o(i.app_write_ind) referenced from sampleapp_common.o(i.app_pnet_cfg_init_default)
 <LI><a href="#[cc]">bg_worker_task</a> from pf_bg_worker.o(i.bg_worker_task) referenced from pf_bg_worker.o(i.pf_bg_worker_init)
 <LI><a href="#[bd]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.lwip_netconn_do_close_internal)
 <LI><a href="#[bd]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[b6]">etharp_output</a> from etharp.o(i.etharp_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[ef]">etharp_tmr</a> from etharp.o(i.etharp_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[e4]">ethernet_input</a> from ethernet.o(i.ethernet_input) referenced from tcpip.o(i.tcpip_input)
 <LI><a href="#[a0]">ethernet_link_status_updated</a> from app_ethernet.o(i.ethernet_link_status_updated) referenced from main.o(i.Netif_Config)
 <LI><a href="#[a1]">ethernet_link_thread</a> from ethernetif.o(i.ethernet_link_thread) referenced from main.o(i.Netif_Config)
 <LI><a href="#[9f]">ethernetif_init</a> from ethernetif.o(i.ethernetif_init) referenced from main.o(i.Netif_Config)
 <LI><a href="#[b9]">ethernetif_input</a> from ethernetif.o(i.ethernetif_input) referenced from ethernetif.o(i.low_level_init)
 <LI><a href="#[e0]">event_callback</a> from sockets.o(i.event_callback) referenced from sockets.o(i.socket)
 <LI><a href="#[a2]">fputc</a> from main.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[a2]">fputc</a> from main.o(i.fputc) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[e5]">ip4_input</a> from ip4.o(i.ip4_input) referenced from tcpip.o(i.tcpip_input)
 <LI><a href="#[ee]">ip_reass_tmr</a> from ip4_frag.o(i.ip_reass_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[b8]">ipfrag_free_pbuf_custom</a> from ip4_frag.o(i.ipfrag_free_pbuf_custom) referenced from ip4_frag.o(i.ip4_frag)
 <LI><a href="#[b7]">low_level_output</a> from ethernetif.o(i.low_level_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[ba]">lwip_cyclic_timer</a> from timeouts.o(i.lwip_cyclic_timer) referenced from timeouts.o(i.lwip_cyclic_timer)
 <LI><a href="#[ba]">lwip_cyclic_timer</a> from timeouts.o(i.lwip_cyclic_timer) referenced from timeouts.o(i.sys_timeouts_init)
 <LI><a href="#[bf]">lwip_netconn_do_bind</a> from api_msg.o(i.lwip_netconn_do_bind) referenced from api_lib.o(i.netconn_bind)
 <LI><a href="#[c0]">lwip_netconn_do_close</a> from api_msg.o(i.lwip_netconn_do_close) referenced from api_lib.o(i.netconn_close_shutdown)
 <LI><a href="#[c3]">lwip_netconn_do_delconn</a> from api_msg.o(i.lwip_netconn_do_delconn) referenced from api_lib.o(i.netconn_prepare_delete)
 <LI><a href="#[c1]">lwip_netconn_do_getaddr</a> from api_msg.o(i.lwip_netconn_do_getaddr) referenced from api_lib.o(i.netconn_getaddr)
 <LI><a href="#[c2]">lwip_netconn_do_newconn</a> from api_msg.o(i.lwip_netconn_do_newconn) referenced from api_lib.o(i.netconn_new_with_proto_and_callback)
 <LI><a href="#[c5]">lwip_netconn_do_recv</a> from api_msg.o(i.lwip_netconn_do_recv) referenced from api_lib.o(i.netconn_tcp_recvd_msg)
 <LI><a href="#[c4]">lwip_netconn_do_send</a> from api_msg.o(i.lwip_netconn_do_send) referenced from api_lib.o(i.netconn_send)
 <LI><a href="#[c6]">lwip_netconn_do_write</a> from api_msg.o(i.lwip_netconn_do_write) referenced from api_lib.o(i.netconn_write_vectors_partly)
 <LI><a href="#[9a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[b4]">main_timer_tick</a> from sampleapp_common.o(i.main_timer_tick) referenced from sampleapp_common.o(i.app_start)
 <LI><a href="#[c7]">netif_null_output_ip4</a> from netif.o(i.netif_null_output_ip4) referenced from netif.o(i.netif_add)
 <LI><a href="#[c8]">os_timer_callback</a> from osal.o(i.os_timer_callback) referenced from osal.o(i.os_timer_create)
 <LI><a href="#[9d]">pbuf_free_custom</a> from ethernetif.o(i.pbuf_free_custom) referenced from ethernetif.o(i.HAL_ETH_RxAllocateCallback)
 <LI><a href="#[cb]">pf_alarm_apmr_frame_handler</a> from pf_alarm.o(i.pf_alarm_apmr_frame_handler) referenced from pf_alarm.o(i.pf_alarm_apmx_activate)
 <LI><a href="#[ca]">pf_alarm_apms_timeout</a> from pf_alarm.o(i.pf_alarm_apms_timeout) referenced from pf_alarm.o(i.pf_alarm_apms_apms_a_data_req)
 <LI><a href="#[ca]">pf_alarm_apms_timeout</a> from pf_alarm.o(i.pf_alarm_apms_timeout) referenced from pf_alarm.o(i.pf_alarm_apms_timeout)
 <LI><a href="#[cd]">pf_cmina_send_hello</a> from pf_cmina.o(i.pf_cmina_send_hello) referenced from pf_cmina.o(i.pf_cmina_init)
 <LI><a href="#[cd]">pf_cmina_send_hello</a> from pf_cmina.o(i.pf_cmina_send_hello) referenced from pf_cmina.o(i.pf_cmina_send_hello)
 <LI><a href="#[ce]">pf_cmio_timer_expired</a> from pf_cmio.o(i.pf_cmio_timer_expired) referenced from pf_cmio.o(i.pf_cmio_cmdev_state_ind)
 <LI><a href="#[ce]">pf_cmio_timer_expired</a> from pf_cmio.o(i.pf_cmio_timer_expired) referenced from pf_cmio.o(i.pf_cmio_timer_expired)
 <LI><a href="#[cf]">pf_cmrpc_send_with_timeout</a> from pf_cmrpc.o(i.pf_cmrpc_send_with_timeout) referenced from pf_cmrpc.o(i.pf_cmrpc_send_with_timeout)
 <LI><a href="#[d0]">pf_cmsm_timeout</a> from pf_cmsm.o(i.pf_cmsm_timeout) referenced from pf_cmsm.o(i.pf_cmsm_cm_read_ind)
 <LI><a href="#[d0]">pf_cmsm_timeout</a> from pf_cmsm.o(i.pf_cmsm_timeout) referenced from pf_cmsm.o(i.pf_cmsm_cm_write_ind)
 <LI><a href="#[d0]">pf_cmsm_timeout</a> from pf_cmsm.o(i.pf_cmsm_timeout) referenced from pf_cmsm.o(i.pf_cmsm_cmdev_state_ind)
 <LI><a href="#[d0]">pf_cmsm_timeout</a> from pf_cmsm.o(i.pf_cmsm_timeout) referenced from pf_cmsm.o(i.pf_cmsm_rm_read_ind)
 <LI><a href="#[d2]">pf_cpm_c_data_ind</a> from pf_cpm_driver_sw.o(i.pf_cpm_c_data_ind) referenced from pf_cpm_driver_sw.o(i.pf_cpm_driver_sw_activate_req)
 <LI><a href="#[d1]">pf_cpm_control_interval_expired</a> from pf_cpm_driver_sw.o(i.pf_cpm_control_interval_expired) referenced from pf_cpm_driver_sw.o(i.pf_cpm_control_interval_expired)
 <LI><a href="#[d1]">pf_cpm_control_interval_expired</a> from pf_cpm_driver_sw.o(i.pf_cpm_control_interval_expired) referenced from pf_cpm_driver_sw.o(i.pf_cpm_driver_sw_activate_req)
 <LI><a href="#[f1]">pf_cpm_driver_sw_activate_req</a> from pf_cpm_driver_sw.o(i.pf_cpm_driver_sw_activate_req) referenced from pf_cpm_driver_sw.o(.constdata)
 <LI><a href="#[f2]">pf_cpm_driver_sw_close_req</a> from pf_cpm_driver_sw.o(i.pf_cpm_driver_sw_close_req) referenced from pf_cpm_driver_sw.o(.constdata)
 <LI><a href="#[f0]">pf_cpm_driver_sw_create</a> from pf_cpm_driver_sw.o(i.pf_cpm_driver_sw_create) referenced from pf_cpm_driver_sw.o(.constdata)
 <LI><a href="#[f4]">pf_cpm_driver_sw_get_data_and_iops</a> from pf_cpm_driver_sw.o(i.pf_cpm_driver_sw_get_data_and_iops) referenced from pf_cpm_driver_sw.o(.constdata)
 <LI><a href="#[f5]">pf_cpm_driver_sw_get_data_status</a> from pf_cpm_driver_sw.o(i.pf_cpm_driver_sw_get_data_status) referenced from pf_cpm_driver_sw.o(.constdata)
 <LI><a href="#[f3]">pf_cpm_driver_sw_get_iocs</a> from pf_cpm_driver_sw.o(i.pf_cpm_driver_sw_get_iocs) referenced from pf_cpm_driver_sw.o(.constdata)
 <LI><a href="#[f6]">pf_cpm_driver_sw_show</a> from pf_cpm_driver_sw.o(i.pf_cpm_driver_sw_show) referenced from pf_cpm_driver_sw.o(.constdata)
 <LI><a href="#[d8]">pf_dcp_clear_sam</a> from pf_dcp.o(i.pf_dcp_clear_sam) referenced from pf_dcp.o(i.pf_dcp_restart_sam_timeout)
 <LI><a href="#[d3]">pf_dcp_control_signal_led</a> from pf_dcp.o(i.pf_dcp_control_signal_led) referenced from pf_dcp.o(i.pf_dcp_control_signal_led)
 <LI><a href="#[d3]">pf_dcp_control_signal_led</a> from pf_dcp.o(i.pf_dcp_control_signal_led) referenced from pf_dcp.o(i.pf_dcp_trigger_signal_led)
 <LI><a href="#[d6]">pf_dcp_get_set</a> from pf_dcp.o(i.pf_dcp_get_set) referenced from pf_dcp.o(i.pf_dcp_init)
 <LI><a href="#[d5]">pf_dcp_hello_ind</a> from pf_dcp.o(i.pf_dcp_hello_ind) referenced from pf_dcp.o(i.pf_dcp_init)
 <LI><a href="#[d7]">pf_dcp_identify_req</a> from pf_dcp.o(i.pf_dcp_identify_req) referenced from pf_dcp.o(i.pf_dcp_init)
 <LI><a href="#[d4]">pf_dcp_responder</a> from pf_dcp.o(i.pf_dcp_responder) referenced from pf_dcp.o(i.pf_dcp_identify_req)
 <LI><a href="#[d9]">pf_eth_recv</a> from pf_eth.o(i.pf_eth_recv) referenced from pf_eth.o(i.pf_eth_init_netif)
 <LI><a href="#[da]">pf_lldp_receive_timeout</a> from pf_lldp.o(i.pf_lldp_receive_timeout) referenced from pf_lldp.o(i.pf_lldp_restart_peer_timeout)
 <LI><a href="#[db]">pf_lldp_trigger_linkmonitor</a> from pf_pdport.o(i.pf_lldp_trigger_linkmonitor) referenced from pf_pdport.o(i.pf_lldp_trigger_linkmonitor)
 <LI><a href="#[db]">pf_lldp_trigger_linkmonitor</a> from pf_pdport.o(i.pf_lldp_trigger_linkmonitor) referenced from pf_pdport.o(i.pf_pdport_start_linkmonitor)
 <LI><a href="#[dc]">pf_lldp_trigger_sending</a> from pf_lldp.o(i.pf_lldp_trigger_sending) referenced from pf_lldp.o(i.pf_lldp_trigger_sending)
 <LI><a href="#[dc]">pf_lldp_trigger_sending</a> from pf_lldp.o(i.pf_lldp_trigger_sending) referenced from pf_lldp.o(i.pf_lldp_tx_restart)
 <LI><a href="#[f8]">pf_ppm_drv_sw_activate_req</a> from pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_activate_req) referenced from pf_ppm_driver_sw.o(.constdata)
 <LI><a href="#[f9]">pf_ppm_drv_sw_close_req</a> from pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_close_req) referenced from pf_ppm_driver_sw.o(.constdata)
 <LI><a href="#[f7]">pf_ppm_drv_sw_create</a> from pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_create) referenced from pf_ppm_driver_sw.o(.constdata)
 <LI><a href="#[fb]">pf_ppm_drv_sw_read_data_and_iops</a> from pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_read_data_and_iops) referenced from pf_ppm_driver_sw.o(.constdata)
 <LI><a href="#[fd]">pf_ppm_drv_sw_read_iocs</a> from pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_read_iocs) referenced from pf_ppm_driver_sw.o(.constdata)
 <LI><a href="#[dd]">pf_ppm_drv_sw_send</a> from pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_send) referenced from pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_activate_req)
 <LI><a href="#[dd]">pf_ppm_drv_sw_send</a> from pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_send) referenced from pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_send)
 <LI><a href="#[ff]">pf_ppm_drv_sw_show</a> from pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_show) referenced from pf_ppm_driver_sw.o(.constdata)
 <LI><a href="#[fa]">pf_ppm_drv_sw_write_data_and_iops</a> from pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_write_data_and_iops) referenced from pf_ppm_driver_sw.o(.constdata)
 <LI><a href="#[fe]">pf_ppm_drv_sw_write_data_status</a> from pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_write_data_status) referenced from pf_ppm_driver_sw.o(.constdata)
 <LI><a href="#[fc]">pf_ppm_drv_sw_write_iocs</a> from pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_write_iocs) referenced from pf_ppm_driver_sw.o(.constdata)
 <LI><a href="#[bc]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.lwip_netconn_do_close_internal)
 <LI><a href="#[bc]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[e6]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[de]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[e7]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[df]">recv_tcp</a> from api_msg.o(i.recv_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[c9]">recv_udp</a> from api_msg.o(i.recv_udp) referenced from api_msg.o(i.pcb_new)
 <LI><a href="#[bb]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.lwip_netconn_do_close_internal)
 <LI><a href="#[bb]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[e1]">tcp_recv_null</a> from tcp.o(i.tcp_recv_null) referenced from tcp.o(i.tcp_alloc)
 <LI><a href="#[ed]">tcp_tmr</a> from tcp.o(i.tcp_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[9e]">tcpip_input</a> from tcpip.o(i.tcpip_input) referenced from main.o(i.Netif_Config)
 <LI><a href="#[e2]">tcpip_tcp_timer</a> from timeouts.o(i.tcpip_tcp_timer) referenced from timeouts.o(i.tcp_timer_needed)
 <LI><a href="#[e2]">tcpip_tcp_timer</a> from timeouts.o(i.tcpip_tcp_timer) referenced from timeouts.o(i.tcpip_tcp_timer)
 <LI><a href="#[e3]">tcpip_thread</a> from tcpip.o(i.tcpip_thread) referenced from tcpip.o(i.tcpip_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(.text)
</UL>
<P><STRONG><a name="[5e6]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[100]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[117]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5e7]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[5e8]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[5e9]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[5ea]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[5eb]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[d]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[5dd]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[5dc]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[f]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[5d0]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[7]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>CORDIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DCMI_PSSI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>DTS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>FDCAN3_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>FDCAN3_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>FMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>I2C5_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>I2C5_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OCTOSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>OCTOSPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>TIM23_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>TIM24_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>UART9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>USART10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[103]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[10c]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_visible_string
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_is_stationname_valid
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[5a4]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
</UL>

<P><STRONG><a name="[5ec]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[5ed]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sock_make_addr
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_get_netif_namelist
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_write_parameter
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_set_output_data
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_mem
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_str
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_dce_packet
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_set_default_cfg
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_set_ind
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_write_data_check
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_save_im
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_load_im
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_update
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_add
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_cm_write_ind
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_set_req
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_identify_req
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_get_req
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_driver_sw_get_iocs
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_driver_sw_get_data_and_iops
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_alarm
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_write_frame_buffer
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_read_frame_buffer
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_finish_buffer
</UL>

<P><STRONG><a name="[183]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_dce_packet
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_set_default_cfg
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_save_ase
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_set_ind
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_init
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_station_name
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_port_name
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_port_id
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_save
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_load
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_save_im
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_init
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_load_im
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_update
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_add
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_queue_post
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_queue_fetch
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_store_peer_info
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_parse_packet
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_chassis_id
</UL>

<P><STRONG><a name="[530]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem_overlapping
</UL>

<P><STRONG><a name="[5ee]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[5ef]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_clear_im_data
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[5f0]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5f1]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_get_netif_namelist
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_save_if_modified
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_init_buf
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_thread
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_pull_submodule
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_pnet_cfg_init_default
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_exit
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_new_subslot
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_new_slot
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_new_api
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_lookup_request
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_init
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_session_release
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_session_allocate
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_write_ind
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_release_ind
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_read_ind
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_dcontrol_ind
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_ccontrol_cnf
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_lookup_ind
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_release
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_allocate
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_read_ind
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_clear_im_data
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_set_default_cfg
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_init
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_set_ind
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_reset_all
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_ccontrol_req
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_new_diag
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_init
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_init
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_init
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_alpmr_alarm_ack
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init_only
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_station_name
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_port_name
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_write_data_check
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_save
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_queue_reset
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_alarm
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_parse_packet
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_management_address_from_packet
</UL>

<P><STRONG><a name="[5f2]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[49f]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_join_directory_filename
</UL>

<P><STRONG><a name="[3ba]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_set_default_cfg
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_set_ind
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_connect_ind
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_generate_alias_name
</UL>

<P><STRONG><a name="[4c5]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_station_name
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_generate_alias_name
</UL>

<P><STRONG><a name="[1d8]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_get_netif_namelist
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_data_real
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdinterface_data_real
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_str
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_interpret_ind
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_hello_req
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_set_default_cfg
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_init
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_set_ind
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_connect_ind
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_station_name
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_port_name
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_validate_configuration
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_join_directory_filename
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_get_req
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_port_id
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_chassis_id
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_generate_alias_name
</UL>

<P><STRONG><a name="[3cb]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_set_commit
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_is_alias_matching
</UL>

<P><STRONG><a name="[223]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_inquiry_read_all_reg_ind
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_session_locate_by_uuid
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_read_ind
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_dce_packet
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_find_by_uuid
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_save_if_modified
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_set_ind
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_set_commit
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_check_destination_address
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_identify_req
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_hello_ind
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_check_sam
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_check_src_addr
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_update_peer
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_parse_packet
</UL>

<P><STRONG><a name="[17e]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_get_hostname
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_set_ind
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_join_directory_filename
</UL>

<P><STRONG><a name="[3d2]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_is_stationname_valid
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_set_ind
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_check_peer_station_name
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_check_peer_port_name
</UL>

<P><STRONG><a name="[109]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_find
</UL>

<P><STRONG><a name="[5f3]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[5f4]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[5f5]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[5f6]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[17d]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[101]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[5f7]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[5f8]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[111]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[110]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[118]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[5f9]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[5fa]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>BSP_LED_Init</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, stm32h7xx_nucleo.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11c]"></a>BSP_LED_Off</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32h7xx_nucleo.o(i.BSP_LED_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_LED_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_status_updated
</UL>

<P><STRONG><a name="[11d]"></a>BSP_LED_On</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32h7xx_nucleo.o(i.BSP_LED_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_status_updated
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PNetThread
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>

<P><STRONG><a name="[11e]"></a>BSP_PB_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_nucleo.o(i.BSP_PB_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_USER_EXTI_Callback
</UL>

<P><STRONG><a name="[b]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>ETH_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ETH_IRQHandler &rArr; HAL_ETH_IRQHandler &rArr; HAL_ETH_TxCpltCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>ETH_PHY_IO_DeInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ethernetif.o(i.ETH_PHY_IO_DeInit))
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>ETH_PHY_IO_GetTick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ethernetif.o(i.ETH_PHY_IO_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_PHY_IO_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>ETH_PHY_IO_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ethernetif.o(i.ETH_PHY_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ETH_PHY_IO_Init &rArr; HAL_ETH_SetMDIOClockRange &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMDIOClockRange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>ETH_PHY_IO_ReadReg</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ethernetif.o(i.ETH_PHY_IO_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ETH_PHY_IO_ReadReg &rArr; HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>ETH_PHY_IO_WriteReg</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ethernetif.o(i.ETH_PHY_IO_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ETH_PHY_IO_WriteReg &rArr; HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.data)
</UL>
<P><STRONG><a name="[12a]"></a>FATFS_LinkDriver</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, ff_gen_drv.o(i.FATFS_LinkDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FATFS_LinkDriver &rArr; FATFS_LinkDriverEx
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PNetThread
</UL>

<P><STRONG><a name="[12b]"></a>FATFS_LinkDriverEx</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, ff_gen_drv.o(i.FATFS_LinkDriverEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>

<P><STRONG><a name="[132]"></a>HAL_ETH_EEECallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_EEECallback))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[12c]"></a>HAL_ETH_ErrorCallback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ethernetif.o(i.HAL_ETH_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_ETH_ErrorCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetDMAError
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[12d]"></a>HAL_ETH_GetDMAError</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_GetDMAError))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ErrorCallback
</UL>

<P><STRONG><a name="[22a]"></a>HAL_ETH_GetMACConfig</STRONG> (Thumb, 470 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_GetMACConfig))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_thread
</UL>

<P><STRONG><a name="[27f]"></a>HAL_ETH_GetMACFilterConfig</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_GetMACFilterConfig))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[11f]"></a>HAL_ETH_IRQHandler</STRONG> (Thumb, 444 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_ETH_IRQHandler &rArr; HAL_ETH_TxCpltCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_TxCpltCallback
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxCpltCallback
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ErrorCallback
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WakeUpCallback
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_PMTCallback
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_EEECallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[134]"></a>HAL_ETH_Init</STRONG> (Thumb, 346 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_ETH_Init &rArr; ETH_MACDMAConfig &rArr; ETH_SetMACConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMDIOClockRange
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCFG_ETHInterfaceSelect
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescListInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMARxDescListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[135]"></a>HAL_ETH_MspInit</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, ethernetif.o(i.HAL_ETH_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ETH_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[131]"></a>HAL_ETH_PMTCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_PMTCallback))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>HAL_ETH_ReadData</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = HAL_ETH_ReadData &rArr; ETH_UpdateDescriptor &rArr; HAL_ETH_RxAllocateCallback &rArr; memp_malloc_pool &rArr; do_memp_malloc_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxLinkCallback
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_UpdateDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[125]"></a>HAL_ETH_ReadPHYRegister</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_ReadPHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHY_IO_ReadReg
</UL>

<P><STRONG><a name="[13f]"></a>HAL_ETH_ReleaseTxPacket</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_ReleaseTxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = HAL_ETH_ReleaseTxPacket &rArr; HAL_ETH_TxFreeCallback &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_TxFreeCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[128]"></a>HAL_ETH_RxAllocateCallback</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ethernetif.o(i.HAL_ETH_RxAllocateCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HAL_ETH_RxAllocateCallback &rArr; memp_malloc_pool &rArr; do_memp_malloc_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_UpdateDescriptor
</UL>

<P><STRONG><a name="[12f]"></a>HAL_ETH_RxCpltCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernetif.o(i.HAL_ETH_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_ETH_RxCpltCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[13e]"></a>HAL_ETH_RxLinkCallback</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, ethernetif.o(i.HAL_ETH_RxLinkCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ETH_RxLinkCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadData
</UL>

<P><STRONG><a name="[143]"></a>HAL_ETH_SetMACConfig</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_SetMACConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ETH_SetMACConfig &rArr; ETH_SetMACConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetMACConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_thread
</UL>

<P><STRONG><a name="[280]"></a>HAL_ETH_SetMACFilterConfig</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_SetMACFilterConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ETH_SetMACFilterConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[124]"></a>HAL_ETH_SetMDIOClockRange</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_SetMDIOClockRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_ETH_SetMDIOClockRange &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHY_IO_Init
</UL>

<P><STRONG><a name="[144]"></a>HAL_ETH_Start_IT</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HAL_ETH_Start_IT &rArr; ETH_UpdateDescriptor &rArr; HAL_ETH_RxAllocateCallback &rArr; memp_malloc_pool &rArr; do_memp_malloc_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_UpdateDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_thread
</UL>

<P><STRONG><a name="[227]"></a>HAL_ETH_Stop_IT</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_Stop_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ETH_Stop_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_thread
</UL>

<P><STRONG><a name="[145]"></a>HAL_ETH_Transmit_IT</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_ETH_Transmit_IT &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[130]"></a>HAL_ETH_TxCpltCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernetif.o(i.HAL_ETH_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_ETH_TxCpltCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>HAL_ETH_TxFreeCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ethernetif.o(i.HAL_ETH_TxFreeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HAL_ETH_TxFreeCallback &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReleaseTxPacket
</UL>

<P><STRONG><a name="[133]"></a>HAL_ETH_WakeUpCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_WakeUpCallback))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[126]"></a>HAL_ETH_WritePHYRegister</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_WritePHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHY_IO_WriteReg
</UL>

<P><STRONG><a name="[177]"></a>HAL_EnableCompensationCell</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_EnableCompensationCell))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[11a]"></a>HAL_GPIO_Init</STRONG> (Thumb, 446 bytes, Stack size 24 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>

<P><STRONG><a name="[1ac]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_button
</UL>

<P><STRONG><a name="[11b]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_led
</UL>

<P><STRONG><a name="[123]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHY_IO_GetTick
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[161]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[148]"></a>HAL_Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32h7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14b]"></a>HAL_InitTick</STRONG> (Thumb, 140 bytes, Stack size 64 bytes, stm32h7xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[166]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_ConfigRegion))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[165]"></a>HAL_MPU_Disable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[167]"></a>HAL_MPU_Enable</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[14c]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[13c]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
</UL>

<P><STRONG><a name="[13b]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
</UL>

<P><STRONG><a name="[149]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[153]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32h7xx_hal_pwr_ex.o(i.HAL_PWREx_ConfigSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_ConfigSupply
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[154]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 774 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[14d]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[137]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMDIOClockRange
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[14e]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[14a]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 524 bytes, Stack size 20 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[155]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1786 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[136]"></a>HAL_SYSCFG_ETHInterfaceSelect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_SYSCFG_ETHInterfaceSelect))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[15e]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[15d]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[160]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[14f]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[156]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[150]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[159]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[158]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 440 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[15a]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[15b]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[15c]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_hal_timebase_tim.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[15f]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[162]"></a>HAL_UART_Transmit</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[9]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[226]"></a>LAN8742_GetLinkState</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, lan8742.o(i.LAN8742_GetLinkState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LAN8742_GetLinkState
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_thread
</UL>

<P><STRONG><a name="[27e]"></a>LAN8742_Init</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, lan8742.o(i.LAN8742_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LAN8742_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[27d]"></a>LAN8742_RegisterBusIO</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lan8742.o(i.LAN8742_RegisterBusIO))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[168]"></a>MX_LWIP_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.MX_LWIP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = MX_LWIP_Init &rArr; Netif_Config &rArr; netif_add &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Netif_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PNetThread
</UL>

<P><STRONG><a name="[a]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[e8]"></a>SD_initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sd_diskio.o(i.SD_initialize))
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>SD_ioctl</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sd_diskio.o(i.SD_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_ioctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>SD_read</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, sd_diskio.o(i.SD_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SD_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>SD_status</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sd_diskio.o(i.SD_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_status
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>SD_write</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, sd_diskio.o(i.SD_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SD_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[10]"></a>SysTick_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmsis_os2.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>SystemInit</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, system_stm32h7xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(.text)
</UL>
<P><STRONG><a name="[46]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_hal_timebase_tim.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[157]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[163]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[c]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[178]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5fb]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[16f]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_down
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_pool
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free_pool
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PNetThread
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_ipaddr
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_commit
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_netif
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_remove_listener
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_listen
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_err_to_msg
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_is_err_msg
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_vectors_partly
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_udp_raw_netbuf_flags
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf_flags
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd_msg
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread_handle_msg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sockopt_to_ipopt
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sock_make_addr
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_sleeptime
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_abs
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment_busy
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_fill_options
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc_reference
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header_impl
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input_local_match
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_get_netif_namelist
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_print_bytes
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_driver_sw_show
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_show
</UL>

<P><STRONG><a name="[5fc]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[5fd]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[17a]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5fe]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1d9]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_pnet_cfg_init_default
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_epm_annotation
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_ip_to_string
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_station_name
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_init
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_station_name
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_init_netif
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_mac_address_to_string
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_system_description
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_port_id
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_generate_alias_name
</UL>

<P><STRONG><a name="[5ff]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[600]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[17b]"></a>__0vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[601]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[602]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[603]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[1c3]"></a>vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[604]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[605]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[606]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[607]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[171]"></a>_main</STRONG> (Thumb, 298 bytes, Stack size 104 bytes, sampleapp_main.o(i._main))
<BR><BR>[Stack]<UL><LI>Max Depth = 4464<LI>Call Chain = _main &rArr; app_loop_forever &rArr; pnet_handle_periodic &rArr; pf_cmrpc_periodic &rArr; pf_cmrpc_dce_packet &rArr; pf_cmrpc_rpc_request &rArr; pf_cmrpc_rm_read_ind &rArr; pf_cmrdr_rm_read_ind &rArr; pf_pdport_read_ind &rArr; pf_lldp_get_peer_station_name &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortGetMinimumEverFreeHeapSize
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortGetFreeHeapSize
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_print_network_config
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_pnet_cfg_init_netifs
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_set_log_level
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pnet_cfg_init_default
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_loop_forever
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PNetThread
</UL>

<P><STRONG><a name="[195]"></a>app_data_get_input_data</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, app_data.o(i.app_data_get_input_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_data_get_input_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_initial_data_and_ioxs
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_cyclic_data_callback
</UL>

<P><STRONG><a name="[198]"></a>app_data_read_parameter</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, app_data.o(i.app_data_read_parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_data_read_parameter &rArr; app_log_print_bytes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_print_bytes
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gsdml_get_parameter_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_ind
</UL>

<P><STRONG><a name="[19b]"></a>app_data_set_default_outputs</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_data.o(i.app_data_set_default_outputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_data_set_default_outputs &rArr; app_handle_data_led_state &rArr; app_set_led
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_data_led_state
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_outputs_default_value
</UL>

<P><STRONG><a name="[194]"></a>app_data_set_output_data</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, app_data.o(i.app_data_set_output_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_data_set_output_data &rArr; app_handle_data_led_state &rArr; app_set_led
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_data_led_state
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_cyclic_data_callback
</UL>

<P><STRONG><a name="[19e]"></a>app_data_write_parameter</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, app_data.o(i.app_data_write_parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_data_write_parameter &rArr; app_log_print_bytes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log_print_bytes
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gsdml_get_parameter_cfg
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_write_ind
</UL>

<P><STRONG><a name="[1ab]"></a>app_get_button</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sampleapp_nucleo-h723zg.o(i.app_get_button))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_get_button
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_button_states
</UL>

<P><STRONG><a name="[1a0]"></a>app_gsdml_get_module_cfg</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_gsdml.o(i.app_gsdml_get_module_cfg))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_exp_module_ind
</UL>

<P><STRONG><a name="[199]"></a>app_gsdml_get_parameter_cfg</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, app_gsdml.o(i.app_gsdml_get_parameter_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = app_gsdml_get_parameter_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gsdml_get_submodule_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_write_parameter
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_read_parameter
</UL>

<P><STRONG><a name="[1a5]"></a>app_gsdml_get_submodule_cfg</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_gsdml.o(i.app_gsdml_get_submodule_cfg))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gsdml_get_parameter_cfg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_exp_submodule_ind
</UL>

<P><STRONG><a name="[187]"></a>app_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sampleapp_common.o(i.app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2472<LI>Call Chain = app_init &rArr; pnet_init &rArr; pnet_init_only &rArr; pf_pdport_init &rArr; pf_pdport_save &rArr; pf_file_save_if_modified &rArr; pf_file_load &rArr; pnal_load_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main
</UL>

<P><STRONG><a name="[180]"></a>app_log</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, app_log.o(i.app_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_log
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_print_network_config
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_print_ioxs_change
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_print_mac_address
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_write_parameter
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_read_parameter
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_loop_forever
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_write_ind
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_state_ind
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_signal_led_ind
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_outputs_default_value
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_initial_data_and_ioxs
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_reset_ind
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_release_ind
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_ind
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_plug_dap
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_new_data_status_ind
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_send_application_ready
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_send_alarm_ack
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_demo_pnet_api
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_exp_submodule_ind
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_exp_module_ind
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dcontrol_ind
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_cyclic_data_callback
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connect_ind
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ccontrol_cnf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_alarm_ind
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_alarm_cnf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_alarm_ack_cnf
</UL>

<P><STRONG><a name="[19a]"></a>app_log_print_bytes</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, app_log.o(i.app_log_print_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_log_print_bytes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_write_parameter
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_read_parameter
</UL>

<P><STRONG><a name="[17f]"></a>app_log_set_log_level</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_log.o(i.app_log_set_log_level))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main
</UL>

<P><STRONG><a name="[b5]"></a>app_loop_forever</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, sampleapp_common.o(i.app_loop_forever))
<BR><BR>[Stack]<UL><LI>Max Depth = 4360<LI>Call Chain = app_loop_forever &rArr; pnet_handle_periodic &rArr; pf_cmrpc_periodic &rArr; pf_cmrpc_dce_packet &rArr; pf_cmrpc_rpc_request &rArr; pf_cmrpc_rm_read_ind &rArr; pf_cmrdr_rm_read_ind &rArr; pf_pdport_read_ind &rArr; pf_lldp_get_peer_station_name &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_led
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wait
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_clr
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_handle_periodic
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_button_states
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_plug_dap
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_is_connected_to_controller
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_send_application_ready
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_send_alarm_ack
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_demo_pnet_api
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_cyclic_data
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sampleapp_common.o(i.app_start)
</UL>
<P><STRONG><a name="[181]"></a>app_pnet_cfg_init_default</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, sampleapp_common.o(i.app_pnet_cfg_init_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_pnet_cfg_init_default &rArr; app_utils_pnet_cfg_init_default &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_pnet_cfg_init_default
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main
</UL>

<P><STRONG><a name="[1af]"></a>app_set_led</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sampleapp_nucleo-h723zg.o(i.app_set_led))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_set_led
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_data_led_state
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_loop_forever
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_signal_led_ind
</UL>

<P><STRONG><a name="[188]"></a>app_start</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, sampleapp_common.o(i.app_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = app_start &rArr; os_timer_create &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_destroy
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_create
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main
</UL>

<P><STRONG><a name="[1dd]"></a>app_utils_copy_ip_to_struct</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_utils.o(i.app_utils_copy_ip_to_struct))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_pnet_cfg_init_netifs
</UL>

<P><STRONG><a name="[1ae]"></a>app_utils_cyclic_data_poll</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, app_utils.o(i.app_utils_cyclic_data_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_utils_cyclic_data_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_cyclic_data
</UL>

<P><STRONG><a name="[19f]"></a>app_utils_dcontrol_cmd_to_string</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, app_utils.o(i.app_utils_dcontrol_cmd_to_string))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dcontrol_ind
</UL>

<P><STRONG><a name="[1d3]"></a>app_utils_event_to_string</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, app_utils.o(i.app_utils_event_to_string))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_state_ind
</UL>

<P><STRONG><a name="[1d5]"></a>app_utils_get_error_code_strings</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, app_utils.o(i.app_utils_get_error_code_strings))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_utils_get_error_code_strings
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_state_ind
</UL>

<P><STRONG><a name="[1d7]"></a>app_utils_get_netif_namelist</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, app_utils.o(i.app_utils_get_netif_namelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_utils_get_netif_namelist &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_pnet_cfg_init_netifs
</UL>

<P><STRONG><a name="[1cc]"></a>app_utils_ioxs_to_string</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_utils.o(i.app_utils_ioxs_to_string))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_initial_data_and_ioxs
</UL>

<P><STRONG><a name="[1a4]"></a>app_utils_plug_module</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, app_utils.o(i.app_utils_plug_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_utils_plug_module
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_exp_module_ind
</UL>

<P><STRONG><a name="[1aa]"></a>app_utils_plug_submodule</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, app_utils.o(i.app_utils_plug_submodule))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_utils_plug_submodule
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_exp_submodule_ind
</UL>

<P><STRONG><a name="[1c9]"></a>app_utils_pnet_cfg_init_default</STRONG> (Thumb, 302 bytes, Stack size 8 bytes, app_utils.o(i.app_utils_pnet_cfg_init_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_utils_pnet_cfg_init_default &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pnet_cfg_init_default
</UL>

<P><STRONG><a name="[182]"></a>app_utils_pnet_cfg_init_netifs</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, app_utils.o(i.app_utils_pnet_cfg_init_netifs))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_utils_pnet_cfg_init_netifs &rArr; app_utils_get_netif_namelist &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_get_netmask
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_get_ip_address
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_get_gateway
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_get_netif_namelist
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_copy_ip_to_struct
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main
</UL>

<P><STRONG><a name="[192]"></a>app_utils_print_ioxs_change</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, app_utils.o(i.app_utils_print_ioxs_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_utils_print_ioxs_change &rArr; app_log
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_cyclic_data_callback
</UL>

<P><STRONG><a name="[184]"></a>app_utils_print_network_config</STRONG> (Thumb, 158 bytes, Stack size 88 bytes, app_utils.o(i.app_utils_print_network_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_utils_print_network_config &rArr; app_utils_print_mac_address &rArr; app_log
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_get_hostname
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_print_mac_address
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main
</UL>

<P><STRONG><a name="[1a2]"></a>app_utils_pull_module</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_utils.o(i.app_utils_pull_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_utils_pull_module
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_exp_module_ind
</UL>

<P><STRONG><a name="[1a7]"></a>app_utils_pull_submodule</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, app_utils.o(i.app_utils_pull_submodule))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = app_utils_pull_submodule &rArr; app_utils_subslot_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_subslot_get
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_exp_submodule_ind
</UL>

<P><STRONG><a name="[1a8]"></a>app_utils_submod_dir_to_string</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_utils.o(i.app_utils_submod_dir_to_string))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_exp_submodule_ind
</UL>

<P><STRONG><a name="[1ca]"></a>app_utils_subslot_get</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, app_utils.o(i.app_utils_subslot_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_utils_subslot_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_pull_submodule
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_write_ind
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_ind
</UL>

<P><STRONG><a name="[1b1]"></a>app_utils_subslot_is_input</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_utils.o(i.app_utils_subslot_is_input))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_demo_pnet_api
</UL>

<P><STRONG><a name="[190]"></a>assert_report</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, osal.o(i.assert_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_eth_send
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_create
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_cyclic_data_callback
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_create
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_timeout
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_set_state
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_dcontrol_interpret_req
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_ccontrol_cnf
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_init_iterator_over_ports
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_state_ind
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_ccontrol_cnf
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_init
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_init
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_bg_worker_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_alpmr_alarm_ack
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_is_valid
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_loc_port_num_to_dap_subslot
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_config
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_get_filename
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_usi_diagnosis_disappears
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_internal
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_unlock
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_lock
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_a_data_req
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_sanitize_delay
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_is_linked
</UL>

<P><STRONG><a name="[1e6]"></a>bind</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, sockets.o(i.bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = bind &rArr; netconn_bind &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_udp_open
</UL>

<P><STRONG><a name="[1ef]"></a>close</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, sockets.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = close &rArr; free_socket &rArr; free_socket_free_elements &rArr; netconn_delete &rArr; netconn_prepare_delete &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_prepare_delete
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_udp_open
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_udp_close
</UL>

<P><STRONG><a name="[258]"></a>disk_initialize</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[585]"></a>disk_ioctl</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[247]"></a>disk_read</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[257]"></a>disk_status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, diskio.o(i.disk_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[24b]"></a>disk_write</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[20c]"></a>eTaskGetState</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, tasks.o(i.eTaskGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eTaskGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[1e8]"></a>err_to_errno</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, err.o(i.err_to_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
</UL>

<P><STRONG><a name="[214]"></a>etharp_cleanup_netif</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, etharp.o(i.etharp_cleanup_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>

<P><STRONG><a name="[217]"></a>etharp_input</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, etharp.o(i.etharp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = etharp_input &rArr; etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[b6]"></a>etharp_output</STRONG> (Thumb, 410 bytes, Stack size 40 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[21c]"></a>etharp_query</STRONG> (Thumb, 500 bytes, Stack size 48 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[21e]"></a>etharp_request</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>

<P><STRONG><a name="[ef]"></a>etharp_tmr</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = etharp_tmr &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>ethernet_input</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, ethernet.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = ethernet_input &rArr; ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_hook_unknown_eth_protocol
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_input)
</UL>
<P><STRONG><a name="[a0]"></a>ethernet_link_status_updated</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_ethernet.o(i.ethernet_link_status_updated))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ethernet_link_status_updated &rArr; BSP_LED_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Netif_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Netif_Config)
</UL>
<P><STRONG><a name="[a1]"></a>ethernet_link_thread</STRONG> (Thumb, 202 bytes, Stack size 104 bytes, ethernetif.o(i.ethernet_link_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ethernet_link_thread &rArr; netif_set_up &rArr; netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_down
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8742_GetLinkState
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Stop_IT
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start_IT
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMACConfig
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetMACConfig
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Netif_Config)
</UL>
<P><STRONG><a name="[21d]"></a>ethernet_output</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, ethernet.o(i.ethernet_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ethernet_output &rArr; pbuf_add_header &rArr; pbuf_add_header_impl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[9f]"></a>ethernetif_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ethernetif.o(i.ethernetif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ethernetif_init &rArr; low_level_init &rArr; netif_set_up &rArr; netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Netif_Config)
</UL>
<P><STRONG><a name="[b9]"></a>ethernetif_input</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ethernetif.o(i.ethernetif_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ethernetif_input &rArr; low_level_input &rArr; HAL_ETH_ReadData &rArr; ETH_UpdateDescriptor &rArr; HAL_ETH_RxAllocateCallback &rArr; memp_malloc_pool &rArr; do_memp_malloc_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.low_level_init)
</UL>
<P><STRONG><a name="[232]"></a>f_close</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = f_close &rArr; f_sync &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_save_file
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_load_file
</UL>

<P><STRONG><a name="[170]"></a>f_mount</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = f_mount &rArr; find_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PNetThread
</UL>

<P><STRONG><a name="[23c]"></a>f_open</STRONG> (Thumb, 608 bytes, Stack size 112 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enq_lock
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_save_file
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_load_file
</UL>

<P><STRONG><a name="[249]"></a>f_read</STRONG> (Thumb, 512 bytes, Stack size 72 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = f_read &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_load_file
</UL>

<P><STRONG><a name="[233]"></a>f_sync</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = f_sync &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[24e]"></a>f_unlink</STRONG> (Thumb, 222 bytes, Stack size 128 bytes, ff.o(i.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_clear_file
</UL>

<P><STRONG><a name="[24f]"></a>f_write</STRONG> (Thumb, 580 bytes, Stack size 64 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = f_write &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_save_file
</UL>

<P><STRONG><a name="[1f8]"></a>ff_convert</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, unicode.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[23a]"></a>ff_cre_syncobj</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, syscall.o(i.ff_cre_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ff_cre_syncobj &rArr; osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[239]"></a>ff_del_syncobj</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, syscall.o(i.ff_del_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ff_del_syncobj &rArr; osSemaphoreDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[23d]"></a>ff_memalloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, syscall.o(i.ff_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[248]"></a>ff_memfree</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, syscall.o(i.ff_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ff_memfree &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[254]"></a>ff_rel_grant</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, syscall.o(i.ff_rel_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ff_rel_grant &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>

<P><STRONG><a name="[255]"></a>ff_req_grant</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, syscall.o(i.ff_req_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ff_req_grant &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
</UL>

<P><STRONG><a name="[1f3]"></a>ff_wtoupper</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, unicode.o(i.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[a2]"></a>fputc</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0printf)
<LI> printfa.o(i.__0vprintf)
</UL>
<P><STRONG><a name="[559]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init
</UL>

<P><STRONG><a name="[241]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[261]"></a>icmp_dest_unreach</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[263]"></a>icmp_input</STRONG> (Thumb, 784 bytes, Stack size 56 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = icmp_input &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[268]"></a>icmp_time_exceeded</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, icmp.o(i.icmp_time_exceeded))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[264]"></a>inet_chksum_pbuf</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, inet_chksum.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[21a]"></a>ip4_addr_isbroadcast_u32</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, ip4_addr.o(i.ip4_addr_isbroadcast_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_addr_isbroadcast_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input_accept
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[26a]"></a>ip4_frag</STRONG> (Thumb, 578 bytes, Stack size 96 bytes, ip4_frag.o(i.ip4_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
</UL>

<P><STRONG><a name="[e5]"></a>ip4_input</STRONG> (Thumb, 664 bytes, Stack size 32 bytes, ip4.o(i.ip4_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input_accept
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_input)
</UL>
<P><STRONG><a name="[266]"></a>ip4_output_if</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, ip4.o(i.ip4_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
</UL>

<P><STRONG><a name="[273]"></a>ip4_output_if_src</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, ip4.o(i.ip4_output_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[26f]"></a>ip4_reass</STRONG> (Thumb, 678 bytes, Stack size 56 bytes, ip4_frag.o(i.ip4_reass))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = ip4_reass &rArr; ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[267]"></a>ip4_route</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, ip4.o(i.ip4_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_route
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[ee]"></a>ip_reass_tmr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ip4_frag.o(i.ip_reass_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = ip_reass_tmr &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[225]"></a>lwip_hook_unknown_eth_protocol</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pnal_eth.o(i.lwip_hook_unknown_eth_protocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lwip_hook_unknown_eth_protocol &rArr; pnal_eth_sys_recv &rArr; pnal_eth_find_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_eth_sys_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[478]"></a>lwip_htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, def.o(i.lwip_htonl))
<BR><BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_set_ip_suite
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_get_netmask
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_get_ip_address
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_udp_sendto
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_udp_recvfrom
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_udp_open
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_hello_req
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_set_req
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_identify_req
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_get_set
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_get_req
</UL>

<P><STRONG><a name="[1e9]"></a>lwip_htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, def.o(i.lwip_htons))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sock_make_addr
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_udp_sendto
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_udp_recvfrom
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_udp_open
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_init_rpc_tower_entry
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_hello_req
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_recv
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_identify_req
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_get_set
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_get_req
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_finish_buffer
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_init_buf
</UL>

<P><STRONG><a name="[284]"></a>lwip_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, init.o(i.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; sys_timeout_abs &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[bf]"></a>lwip_netconn_do_bind</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lwip_netconn_do_bind &rArr; tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; sys_timeout_abs &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_bind)
</UL>
<P><STRONG><a name="[c0]"></a>lwip_netconn_do_close</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = lwip_netconn_do_close &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_close_shutdown)
</UL>
<P><STRONG><a name="[c3]"></a>lwip_netconn_do_delconn</STRONG> (Thumb, 362 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_delconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = lwip_netconn_do_delconn &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_prepare_delete)
</UL>
<P><STRONG><a name="[c1]"></a>lwip_netconn_do_getaddr</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lwip_netconn_do_getaddr &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_getaddr)
</UL>
<P><STRONG><a name="[c2]"></a>lwip_netconn_do_newconn</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_newconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = lwip_netconn_do_newconn &rArr; pcb_new &rArr; tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_new_with_proto_and_callback)
</UL>
<P><STRONG><a name="[c5]"></a>lwip_netconn_do_recv</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = lwip_netconn_do_recv &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_tcp_recvd_msg)
</UL>
<P><STRONG><a name="[c4]"></a>lwip_netconn_do_send</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = lwip_netconn_do_send &rArr; udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_err
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_send)
</UL>
<P><STRONG><a name="[c6]"></a>lwip_netconn_do_write</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = lwip_netconn_do_write &rArr; lwip_netconn_do_writemore &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_err
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_write_vectors_partly)
</UL>
<P><STRONG><a name="[2a6]"></a>lwip_netconn_is_err_msg</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_is_err_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lwip_netconn_is_err_msg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[269]"></a>lwip_standard_chksum</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
</UL>

<P><STRONG><a name="[9a]"></a>main</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CACHE_Enable
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[30c]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
</UL>

<P><STRONG><a name="[2b9]"></a>mem_free</STRONG> (Thumb, 356 bytes, Stack size 16 bytes, mem.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mem_free &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_link_valid
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[287]"></a>mem_init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, mem.o(i.mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mem_init &rArr; sys_mutex_new &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptr_to_mem
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[2bf]"></a>mem_malloc</STRONG> (Thumb, 528 bytes, Stack size 32 bytes, mem.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mem_malloc &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptr_to_mem
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_to_ptr
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[2c0]"></a>mem_trim</STRONG> (Thumb, 468 bytes, Stack size 40 bytes, mem.o(i.mem_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mem_trim &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptr_to_mem
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_to_ptr
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[27a]"></a>memp_free</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, memp.o(i.memp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_listen
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread_handle_msg
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</UL>

<P><STRONG><a name="[2c1]"></a>memp_free_pool</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, memp.o(i.memp_free_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = memp_free_pool &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_custom
</UL>

<P><STRONG><a name="[288]"></a>memp_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memp.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = memp_init &rArr; memp_init_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[27c]"></a>memp_init_pool</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, memp.o(i.memp_init_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memp_init_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
</UL>

<P><STRONG><a name="[279]"></a>memp_malloc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, memp.o(i.memp_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_abs
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc_reference
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
</UL>

<P><STRONG><a name="[141]"></a>memp_malloc_pool</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, memp.o(i.memp_malloc_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = memp_malloc_pool &rArr; do_memp_malloc_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxAllocateCallback
</UL>

<P><STRONG><a name="[25b]"></a>netbuf_delete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket_free_elements
</UL>

<P><STRONG><a name="[2c2]"></a>netbuf_free</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = netbuf_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[2c3]"></a>netbuf_ref</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, netbuf.o(i.netbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[2c4]"></a>netconn_alloc</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, api_msg.o(i.netconn_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netconn_alloc &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[1ea]"></a>netconn_bind</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, api_lib.o(i.netconn_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = netconn_bind &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
</UL>

<P><STRONG><a name="[25c]"></a>netconn_delete</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, api_lib.o(i.netconn_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = netconn_delete &rArr; netconn_prepare_delete &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_prepare_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket_free_elements
</UL>

<P><STRONG><a name="[2a0]"></a>netconn_err</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, api_lib.o(i.netconn_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = netconn_err &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data_tcp
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[2cc]"></a>netconn_free</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, api_msg.o(i.netconn_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = netconn_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_set_invalid
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>

<P><STRONG><a name="[2ad]"></a>netconn_getaddr</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, api_lib.o(i.netconn_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = netconn_getaddr &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp_from
</UL>

<P><STRONG><a name="[2d0]"></a>netconn_new_with_proto_and_callback</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, api_lib.o(i.netconn_new_with_proto_and_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[1f0]"></a>netconn_prepare_delete</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, api_lib.o(i.netconn_prepare_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = netconn_prepare_delete &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>

<P><STRONG><a name="[2a8]"></a>netconn_recv_tcp_pbuf_flags</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, api_lib.o(i.netconn_recv_tcp_pbuf_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data_tcp
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
</UL>

<P><STRONG><a name="[2b0]"></a>netconn_recv_udp_raw_netbuf_flags</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, api_lib.o(i.netconn_recv_udp_raw_netbuf_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netconn_recv_udp_raw_netbuf_flags &rArr; netconn_recv_data &rArr; netconn_err &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
</UL>

<P><STRONG><a name="[2d5]"></a>netconn_send</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, api_lib.o(i.netconn_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = netconn_send &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[2ab]"></a>netconn_tcp_recvd</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, api_lib.o(i.netconn_tcp_recvd))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = netconn_tcp_recvd &rArr; netconn_tcp_recvd_msg &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd_msg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
</UL>

<P><STRONG><a name="[2d6]"></a>netconn_write_partly</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, api_lib.o(i.netconn_write_partly))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = netconn_write_partly &rArr; netconn_write_vectors_partly &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_vectors_partly
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[2d7]"></a>netconn_write_vectors_partly</STRONG> (Thumb, 282 bytes, Stack size 72 bytes, api_lib.o(i.netconn_write_vectors_partly))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = netconn_write_vectors_partly &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
</UL>

<P><STRONG><a name="[16b]"></a>netif_add</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Netif_Config
</UL>

<P><STRONG><a name="[2b3]"></a>netif_find</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, netif.o(i.netif_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = netif_find &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_eth_init
</UL>

<P><STRONG><a name="[5bf]"></a>netif_get_by_index</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, netif.o(i.netif_get_by_index))
<BR><BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_route
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[289]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif.o(i.netif_init))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[2d8]"></a>netif_set_addr</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_netmask
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_ipaddr
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_set_ip_suite
</UL>

<P><STRONG><a name="[16c]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Netif_Config
</UL>

<P><STRONG><a name="[228]"></a>netif_set_down</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, netif.o(i.netif_set_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_thread
</UL>

<P><STRONG><a name="[16d]"></a>netif_set_link_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_link_callback))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Netif_Config
</UL>

<P><STRONG><a name="[229]"></a>netif_set_link_down</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, netif.o(i.netif_set_link_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = netif_set_link_down &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_thread
</UL>

<P><STRONG><a name="[22c]"></a>netif_set_link_up</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, netif.o(i.netif_set_link_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = netif_set_link_up &rArr; netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_thread
</UL>

<P><STRONG><a name="[22b]"></a>netif_set_up</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = netif_set_up &rArr; netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_thread
</UL>

<P><STRONG><a name="[172]"></a>osDelay</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cmsis_os2.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_thread
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PNetThread
</UL>

<P><STRONG><a name="[2e2]"></a>osKernelGetTickCount</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cmsis_os2.o(i.osKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osKernelGetTickCount &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>

<P><STRONG><a name="[2b7]"></a>osKernelInitialize</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cmsis_os2.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b8]"></a>osKernelStart</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, cmsis_os2.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e6]"></a>osMessageQueueDelete</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cmsis_os2.o(i.osMessageQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osMessageQueueDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[2e9]"></a>osMessageQueueGet</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, cmsis_os2.o(i.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMessageQueueGet &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[2ec]"></a>osMessageQueueGetCount</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cmsis_os2.o(i.osMessageQueueGetCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osMessageQueueGetCount &rArr; uxQueueMessagesWaiting
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaitingFromISR
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[2ef]"></a>osMessageQueueNew</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, cmsis_os2.o(i.osMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMessageQueueNew &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[2f3]"></a>osMessageQueuePut</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, cmsis_os2.o(i.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMessageQueuePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>

<P><STRONG><a name="[2f6]"></a>osMutexAcquire</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, cmsis_os2.o(i.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>

<P><STRONG><a name="[2f9]"></a>osMutexNew</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, cmsis_os2.o(i.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osMutexNew &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[2fc]"></a>osMutexRelease</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, cmsis_os2.o(i.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>

<P><STRONG><a name="[22f]"></a>osSemaphoreAcquire</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, cmsis_os2.o(i.osSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>

<P><STRONG><a name="[251]"></a>osSemaphoreDelete</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cmsis_os2.o(i.osSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osSemaphoreDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</UL>

<P><STRONG><a name="[250]"></a>osSemaphoreNew</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, cmsis_os2.o(i.osSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>

<P><STRONG><a name="[12e]"></a>osSemaphoreRelease</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, cmsis_os2.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_custom
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_TxCpltCallback
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxCpltCallback
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ErrorCallback
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>

<P><STRONG><a name="[16e]"></a>osThreadNew</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, cmsis_os2.o(i.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Netif_Config
</UL>

<P><STRONG><a name="[1e1]"></a>osThreadTerminate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, cmsis_os2.o(i.osThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
</UL>

<P><STRONG><a name="[1c6]"></a>os_event_clr</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, osal.o(i.os_event_clr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = os_event_clr &rArr; xEventGroupClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_loop_forever
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_worker_task
</UL>

<P><STRONG><a name="[1ce]"></a>os_event_create</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, osal.o(i.os_event_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = os_event_create &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_bg_worker_init
</UL>

<P><STRONG><a name="[1d0]"></a>os_event_destroy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, osal.o(i.os_event_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = os_event_destroy &rArr; vEventGroupDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start
</UL>

<P><STRONG><a name="[18f]"></a>os_event_set</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, osal.o(i.os_event_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = os_event_set &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_timer_tick
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_state_ind
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_alarm_ind
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_bg_worker_start_job
</UL>

<P><STRONG><a name="[1c5]"></a>os_event_wait</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, osal.o(i.os_event_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = os_event_wait &rArr; xEventGroupWaitBits &rArr; vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_loop_forever
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_worker_task
</UL>

<P><STRONG><a name="[309]"></a>os_get_current_time_us</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, osal.o(i.os_get_current_time_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_get_current_time_us
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_handle_periodic
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_activate_req
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_add_pnio_entry
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_add_epmv4_entry
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_session_allocate
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_dce_packet
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_load
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_ccontrol_req
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_tick
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init_only
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_create_log_book_entry
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_save
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_control_interval_expired
</UL>

<P><STRONG><a name="[30a]"></a>os_log</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, osal_log.o(i.os_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_eth_init
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_save_file
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_load_file
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_clear_file
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_port_data_check_check_peers
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_mem
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_exp_api_module
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_byte
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_bits
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_exp_submodule
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_set_redundancy_state
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_set_provider_state
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_set_primary_state
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_handle_periodic
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_ar_abort
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_application_ready
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_alarm_send_ack
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_api
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_cmio_info_ind
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_cm_ccontrol_req
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_cm_abort
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_set_state
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_new_subslot
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_new_slot
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_new_api
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_iocr_setup_iocs
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_iocr_setup_desc
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_iocr_setup_data_iops
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_subslot
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_slot
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_fix_frame_id
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_exp_submodule_configure
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_cm_connect_rsp_neg
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_ar_param
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_write_result
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem_overlapping
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_alarm_block
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_str
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_create
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_close_req
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_activate_req
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_create
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_close_req
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_activate_req
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_close
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_set_state
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_cm_write_ind
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_timeout
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_set_state
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_inquiry_read_all_reg_ind
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_udp_sendto
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_lookup_request
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error_if_not_already_set
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_periodic
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_session_release
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_session_allocate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_send_with_timeout
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_send_once_from_buffer
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rpc_response
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rpc_request
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_write_interpret_ind
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_write_ind
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_release_interpret_req
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_release_ind
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_read_interpret_ind
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_read_ind
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_dcontrol_interpret_req
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_dcontrol_ind
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_rsp
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_interpret_ind
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_ind
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_ccontrol_interpret_cnf
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_ccontrol_cnf
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_lookup_ind
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_dce_packet
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_release
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_allocate
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_get_iocs
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_get_data_and_iops
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_read_ind
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_cm_read_ind
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_get_iocs
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_get_data_and_iops
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmpbe_rm_dcontrol_ind
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmpbe_set_state
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmio_cpm_state_ind
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmio_cpm_new_data_ind
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmio_set_state
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_reset_ind
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_load
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_hello_req
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_bg_worker_start_job
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_set_default_cfg
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_save_ase
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_init
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_set_ind
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_set_commit
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_get_ar_iocr_desc
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_is_a_fast_port_in_use
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_state_ind
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_cm_release_ind
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_cm_dcontrol_ind
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_cm_connect_ind
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_ccontrol_cnf
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmwrr_cmdev_state_ind
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_start_req
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_cmdev_state_ind
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_cmdev_state_ind
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_ccontrol_req
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_cmdev_state_ind
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmpbe_cmdev_state_ind
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmio_cmdev_state_ind
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_pull
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_plug_wrong
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_plug
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_ind
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_dcontrol_ind
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_ccontrol_cnf
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_pull_submodule
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_pull_module
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_plug_submodule
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_plug_module
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_set_iocs
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_set_data_and_iops
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_init
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_init
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_process
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_alpmr_alarm_ack
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init_only
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_send_enable
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_send_disable
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_restart_peer_timeout
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_update_eth_status
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_start_linkmonitor
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_write_interface_adj
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_write_data_check
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_write_data_adj
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_save
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_run_peer_check
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_remove_all_diag
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_load
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_handle_link_up
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_handle_link_down
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_check_peer_station_name
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_check_peer_port_name
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_check_no_peer_detected
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_trigger_linkmonitor
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_validate_configuration
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_signal_led_ind
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_save_im
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_init
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_data_status_changed
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_create_log_book_entry
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_alpmr_alarm_ind
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_alpmr_alarm_ack_cnf
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_alpmi_alarm_cnf
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_load_im
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_usi_diagnosis_disappears
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_diagnosis
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_usi_update
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_usi_remove
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_usi_add
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_update
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_remove
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_add
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_cm_write_ind
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmwrr_write
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_save
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_join_directory_filename
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_recv
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_send_on_physical_port
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_init_netif
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_trigger_signal_led
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_set_req
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_restart_sam_timeout
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_responder
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_identify_req
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_get_set
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_control_signal_led
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_clear_sam
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_driver_sw_get_data_and_iops
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_driver_sw_activate_req
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_control_interval_expired
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_c_data_ind
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_driver_sw_init
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_set_state
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_get_ar_iocr_desc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_send_on_management_port
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_frame_id_map_remove
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_frame_id_map_add
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_queue_reset
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_queue_post
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_receive_queue_reset
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_receive_queue_post
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_internal
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_alarm
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_error_ind
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmx_close
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmx_activate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_timeout
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_apms_a_data_req
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_a_data_req
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_a_data_ind
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_periodic
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_frame_handler
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_a_data_ind
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_remove
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_unlink
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_link_before
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_link_after
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_close_req
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_activate_req
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_driver_sw_init
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_set_state
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_update_peer
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_parse_packet
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_construct_frame
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_tx_restart
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_trigger_sending
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_receive_timeout
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_ttl_from_packet
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_port_id_from_packet
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_port_description_from_packet
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_management_address_from_packet
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_chassis_id_from_packet
</UL>

<P><STRONG><a name="[30b]"></a>os_malloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, osal.o(i.os_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = os_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init
</UL>

<P><STRONG><a name="[30d]"></a>os_mutex_create</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, osal.o(i.os_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = os_mutex_create &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_create
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_create
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_init
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_init
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_init
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_init
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_init
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_init
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_mutex_create
</UL>

<P><STRONG><a name="[30e]"></a>os_mutex_destroy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, osal.o(i.os_mutex_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = os_mutex_destroy &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_exit
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_close_req
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_close_req
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_mutex_destroy
</UL>

<P><STRONG><a name="[30f]"></a>os_mutex_lock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, osal.o(i.os_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = os_mutex_lock &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_session_allocate
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_allocate
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_clear_im_data
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_save_ase
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_tick
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_invalidate_peer_info
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_timestamp
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_station_name
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_port_name
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_port_id
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_update_eth_status
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_get_eth_status
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_save
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_save_im
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_create_log_book_entry
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_load_im
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_update
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_remove
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_add
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_cm_write_ind
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_put_buf
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_get_buf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_driver_sw_get_iocs
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_driver_sw_get_data_and_iops
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_lock
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_remove
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_write_iocs
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_write_data_and_iops
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_read_iocs
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_read_data_and_iops
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_finish_buffer
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_store_peer_info
</UL>

<P><STRONG><a name="[310]"></a>os_mutex_unlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, osal.o(i.os_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_session_allocate
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_allocate
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_clear_im_data
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_save_ase
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_tick
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_invalidate_peer_info
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_timestamp
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_station_name
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_port_name
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_port_id
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_update_eth_status
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_get_eth_status
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_save
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_save_im
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_create_log_book_entry
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_load_im
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_update
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_remove
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_add
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_cm_write_ind
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_put_buf
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_get_buf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_driver_sw_get_iocs
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_driver_sw_get_data_and_iops
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_unlock
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_remove
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_write_iocs
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_write_data_and_iops
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_read_iocs
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_read_data_and_iops
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_finish_buffer
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_store_peer_info
</UL>

<P><STRONG><a name="[1d1]"></a>os_thread_create</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, osal.o(i.os_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = os_thread_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_bg_worker_init
</UL>

<P><STRONG><a name="[1cf]"></a>os_timer_create</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, osal.o(i.os_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = os_timer_create &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start
</UL>

<P><STRONG><a name="[1d2]"></a>os_timer_start</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, osal.o(i.os_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = os_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start
</UL>

<P><STRONG><a name="[22d]"></a>pbuf_add_header</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_add_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pbuf_add_header &rArr; pbuf_add_header_impl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[222]"></a>pbuf_alloc</STRONG> (Thumb, 406 bytes, Stack size 48 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc_reference
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_init_alloced_pbuf
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_buf_alloc
</UL>

<P><STRONG><a name="[315]"></a>pbuf_alloc_reference</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_alloc_reference))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pbuf_alloc_reference &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_init_alloced_pbuf
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[142]"></a>pbuf_alloced_custom</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, pbuf.o(i.pbuf_alloced_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pbuf_alloced_custom &rArr; pbuf_init_alloced_pbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_init_alloced_pbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxAllocateCallback
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[26d]"></a>pbuf_cat</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_cat &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[317]"></a>pbuf_chain</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pbuf_chain &rArr; pbuf_ref &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[274]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
</UL>

<P><STRONG><a name="[220]"></a>pbuf_clone</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pbuf_clone &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[265]"></a>pbuf_copy</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pbuf_copy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
</UL>

<P><STRONG><a name="[2a9]"></a>pbuf_copy_partial</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pbuf_copy_partial &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
</UL>

<P><STRONG><a name="[147]"></a>pbuf_free</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_TxFreeCallback
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread_handle_msg
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket_free_elements
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_header
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_buf_free
</UL>

<P><STRONG><a name="[9d]"></a>pbuf_free_custom</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ethernetif.o(i.pbuf_free_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pbuf_free_custom &rArr; memp_free_pool &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free_pool
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.HAL_ETH_RxAllocateCallback)
</UL>
<P><STRONG><a name="[2aa]"></a>pbuf_free_header</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_free_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pbuf_free_header &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
</UL>

<P><STRONG><a name="[272]"></a>pbuf_header_force</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_header_force))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pbuf_header_force &rArr; pbuf_header_impl &rArr; pbuf_add_header_impl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[319]"></a>pbuf_realloc</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[221]"></a>pbuf_ref</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pbuf_ref &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[224]"></a>pbuf_remove_header</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_remove_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pbuf_remove_header &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_header
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[31e]"></a>pf_alarm_activate</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, pf_alarm.o(i.pf_alarm_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pf_alarm_activate &rArr; pf_alarm_apmx_activate &rArr; pf_alarm_receive_queue_reset &rArr; pnal_buf_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_queue_reset
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_mutex_create
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmx_activate
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_alpmx_activate
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_start_req
</UL>

<P><STRONG><a name="[35a]"></a>pf_alarm_add_diag_item_to_summary</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, pf_alarm.o(i.pf_alarm_add_diag_item_to_summary))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pf_alarm_add_diag_item_to_summary
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_update_submodule_state
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_get_diag_summary
</UL>

<P><STRONG><a name="[32a]"></a>pf_alarm_alpmr_alarm_ack</STRONG> (Thumb, 236 bytes, Stack size 96 bytes, pf_alarm.o(i.pf_alarm_alpmr_alarm_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = pf_alarm_alpmr_alarm_ack &rArr; pf_alarm_apms_apms_a_data_req &rArr; pf_alarm_alpmr_apms_a_data_cnf &rArr; pf_alarm_error_ind &rArr; pf_cmsu_alarm_error_ind &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_apms_a_data_req
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_alpmr_state_to_string
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_alarm_send_ack
</UL>

<P><STRONG><a name="[354]"></a>pf_alarm_close</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, pf_alarm.o(i.pf_alarm_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_queue_reset
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_mutex_destroy
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmx_close
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_alpmx_close
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_cmdev_state_ind
</UL>

<P><STRONG><a name="[3e9]"></a>pf_alarm_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pf_alarm.o(i.pf_alarm_disable))
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmpbe_rm_dcontrol_ind
</UL>

<P><STRONG><a name="[3b4]"></a>pf_alarm_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pf_alarm.o(i.pf_alarm_enable))
<BR><BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmpbe_rm_ccontrol_cnf
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_ccontrol_cnf
</UL>

<P><STRONG><a name="[55a]"></a>pf_alarm_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pf_alarm.o(i.pf_alarm_init))
<BR><BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init_only
</UL>

<P><STRONG><a name="[35c]"></a>pf_alarm_periodic</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pf_alarm.o(i.pf_alarm_periodic))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = pf_alarm_periodic &rArr; pf_alarm_apmr_periodic &rArr; pf_alarm_apmr_a_data_ind &rArr; pf_alarm_alpmr_apmr_a_data_ind &rArr; pf_alarm_error_ind &rArr; pf_cmsu_alarm_error_ind &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_find_by_index
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_periodic
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_almpi_periodic
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_handle_periodic
</UL>

<P><STRONG><a name="[360]"></a>pf_alarm_queue_is_available</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pf_alarm.o(i.pf_alarm_queue_is_available))
<BR><BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_queue_reset
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_queue_post
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_queue_fetch
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_receive_queue_reset
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_receive_queue_post
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_receive_queue_fetch
</UL>

<P><STRONG><a name="[31f]"></a>pf_alarm_queue_mutex_create</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pf_alarm.o(i.pf_alarm_queue_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pf_alarm_queue_mutex_create &rArr; os_mutex_create &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_activate
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmx_activate
</UL>

<P><STRONG><a name="[353]"></a>pf_alarm_queue_mutex_destroy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pf_alarm.o(i.pf_alarm_queue_mutex_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pf_alarm_queue_mutex_destroy &rArr; os_mutex_destroy &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_close
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmx_close
</UL>

<P><STRONG><a name="[33f]"></a>pf_alarm_receive_queue_fetch</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, pf_alarm.o(i.pf_alarm_receive_queue_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pf_alarm_receive_queue_fetch &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_is_available
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_unlock
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_lock
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_get_readindex
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_periodic
</UL>

<P><STRONG><a name="[33a]"></a>pf_alarm_receive_queue_post</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, pf_alarm.o(i.pf_alarm_receive_queue_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pf_alarm_receive_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_is_available
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_unlock
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_lock
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_get_writeindex
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_frame_handler
</UL>

<P><STRONG><a name="[34d]"></a>pf_alarm_receive_queue_reset</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, pf_alarm.o(i.pf_alarm_receive_queue_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pf_alarm_receive_queue_reset &rArr; pnal_buf_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_buf_free
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_is_available
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_unlock
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_lock
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_accountant_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmx_close
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmx_activate
</UL>

<P><STRONG><a name="[366]"></a>pf_alarm_send_diagnosis</STRONG> (Thumb, 284 bytes, Stack size 80 bytes, pf_alarm.o(i.pf_alarm_send_diagnosis))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pf_alarm_send_diagnosis &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_submodule_ident
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_module_ident
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_alarm
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_update
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_remove
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_add
</UL>

<P><STRONG><a name="[369]"></a>pf_alarm_send_plug</STRONG> (Thumb, 78 bytes, Stack size 72 bytes, pf_alarm.o(i.pf_alarm_send_plug))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pf_alarm_send_plug &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_alarm
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_plug_submodule
</UL>

<P><STRONG><a name="[36a]"></a>pf_alarm_send_plug_wrong</STRONG> (Thumb, 78 bytes, Stack size 72 bytes, pf_alarm.o(i.pf_alarm_send_plug_wrong))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pf_alarm_send_plug_wrong &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_alarm
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_plug_submodule
</UL>

<P><STRONG><a name="[36b]"></a>pf_alarm_send_process</STRONG> (Thumb, 206 bytes, Stack size 80 bytes, pf_alarm.o(i.pf_alarm_send_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pf_alarm_send_process &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_submodule_ident
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_module_ident
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_alarm
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_alarm_send_process_alarm
</UL>

<P><STRONG><a name="[36c]"></a>pf_alarm_send_pull</STRONG> (Thumb, 96 bytes, Stack size 64 bytes, pf_alarm.o(i.pf_alarm_send_pull))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = pf_alarm_send_pull &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_alarm
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_pull_submodule
</UL>

<P><STRONG><a name="[324]"></a>pf_alarm_send_queue_fetch</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, pf_alarm.o(i.pf_alarm_send_queue_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pf_alarm_send_queue_fetch &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_is_available
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_unlock
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_lock
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_get_readindex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_almpi_periodic
</UL>

<P><STRONG><a name="[365]"></a>pf_alarm_send_queue_post</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, pf_alarm.o(i.pf_alarm_send_queue_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_is_available
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_unlock
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_lock
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_get_writeindex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_alarm
</UL>

<P><STRONG><a name="[320]"></a>pf_alarm_send_queue_reset</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, pf_alarm.o(i.pf_alarm_send_queue_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pf_alarm_send_queue_reset &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_is_available
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_unlock
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_lock
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_accountant_reset
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_close
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_activate
</UL>

<P><STRONG><a name="[36d]"></a>pf_alarm_send_usi_diagnosis_disappears</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, pf_alarm.o(i.pf_alarm_send_usi_diagnosis_disappears))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pf_alarm_send_usi_diagnosis_disappears &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_submodule_ident
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_module_ident
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_alarm
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_remove
</UL>

<P><STRONG><a name="[4a4]"></a>pf_ar_find_by_arep</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pf_cmrpc.o(i.pf_ar_find_by_arep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pf_ar_find_by_arep
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_get_ar_error_codes
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_ar_abort
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_application_ready
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_alarm_send_process_alarm
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_alarm_send_ack
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_create_log_book_entry
</UL>

<P><STRONG><a name="[35d]"></a>pf_ar_find_by_index</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pf_cmrpc.o(i.pf_ar_find_by_index))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_set_redundancy_state
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_set_provider_state
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_set_primary_state
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_verify_free_frame_id
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_data
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_nbr_of_active_ars
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_abort_active_ars
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_periodic
</UL>

<P><STRONG><a name="[374]"></a>pf_bg_worker_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pf_bg_worker.o(i.pf_bg_worker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pf_bg_worker_init &rArr; os_thread_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_create
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init_only
</UL>

<P><STRONG><a name="[375]"></a>pf_bg_worker_start_job</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, pf_bg_worker.o(i.pf_bg_worker_start_job))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pf_bg_worker_start_job &rArr; os_event_set &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_clear_im_data
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_set_default_cfg
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_set_ind
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_reset_all
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_trigger_linkmonitor
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_write_req
</UL>

<P><STRONG><a name="[3a3]"></a>pf_cmdev_calculate_exp_sub_data_descriptor_direction</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, pf_cmdev.o(i.pf_cmdev_calculate_exp_sub_data_descriptor_direction))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pf_cmdev_calculate_exp_sub_data_descriptor_direction
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_exp_sub_data_descriptor
</UL>

<P><STRONG><a name="[380]"></a>pf_cmdev_check_ar_type</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pf_cmdev.o(i.pf_cmdev_check_ar_type))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_ar_param
</UL>

<P><STRONG><a name="[386]"></a>pf_cmdev_check_no_straddle</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, pf_cmdev.o(i.pf_cmdev_check_no_straddle))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pf_cmdev_check_no_straddle
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_iocr_overlap
</UL>

<P><STRONG><a name="[383]"></a>pf_cmdev_check_visible_string</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pf_cmdev.o(i.pf_cmdev_check_visible_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pf_cmdev_check_visible_string
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_ar_param
</UL>

<P><STRONG><a name="[381]"></a>pf_cmdev_check_zero</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pf_cmdev.o(i.pf_cmdev_check_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pf_cmdev_check_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_iocr_param
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_ar_param
</UL>

<P><STRONG><a name="[38a]"></a>pf_cmdev_cm_abort</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, pf_cmdev.o(i.pf_cmdev_cm_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = pf_cmdev_cm_abort &rArr; pf_cmdev_set_state &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_ar_abort
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_send_with_timeout
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_ind
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_dce_packet
</UL>

<P><STRONG><a name="[38c]"></a>pf_cmdev_cm_ccontrol_req</STRONG> (Thumb, 388 bytes, Stack size 72 bytes, pf_cmdev.o(i.pf_cmdev_cm_ccontrol_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = pf_cmdev_cm_ccontrol_req &rArr; pf_cmrpc_rm_ccontrol_req &rArr; pf_cmrpc_send_with_timeout &rArr; pf_cmrpc_send_once &rArr; pf_cmrpc_send_once_from_buffer &rArr; pf_udp_sendto &rArr; pnal_udp_sendto &rArr; sendto &rArr; send &rArr;  sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_set_state
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_get_ar_iocr_desc
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_ccontrol_req
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_application_ready
</UL>

<P><STRONG><a name="[393]"></a>pf_cmdev_cmio_info_ind</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, pf_cmdev.o(i.pf_cmdev_cmio_info_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = pf_cmdev_cmio_info_ind &rArr; pf_cmdev_set_state &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_set_state
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmio_timer_expired
</UL>

<P><STRONG><a name="[3c1]"></a>pf_cmdev_event_to_string</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, pf_cmdev.o(i.pf_cmdev_event_to_string))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_state_ind
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmwrr_cmdev_state_ind
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_cmdev_state_ind
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_cmdev_state_ind
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_cmdev_state_ind
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmpbe_cmdev_state_ind
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmio_cmdev_state_ind
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_ind
</UL>

<P><STRONG><a name="[394]"></a>pf_cmdev_exit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pf_cmdev.o(i.pf_cmdev_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pf_cmdev_exit &rArr; os_mutex_destroy &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_destroy
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_exit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init_only
</UL>

<P><STRONG><a name="[489]"></a>pf_cmdev_free_diag</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pf_cmdev.o(i.pf_cmdev_free_diag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pf_cmdev_free_diag
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_remove
</UL>

<P><STRONG><a name="[3a0]"></a>pf_cmdev_generate_submodule_diff</STRONG> (Thumb, 1230 bytes, Stack size 80 bytes, pf_cmdev.o(i.pf_cmdev_generate_submodule_diff))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pf_cmdev_generate_submodule_diff &rArr; pf_cmdev_get_api &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_api
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_subslot
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_connect_ind
</UL>

<P><STRONG><a name="[396]"></a>pf_cmdev_get_api</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, pf_cmdev.o(i.pf_cmdev_get_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pf_cmdev_get_api &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_subslot_full
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_slot_full
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_generate_submodule_diff
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_new_api
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_exp_apis_configure
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_read_ind
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_perform_one_write
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_pull_submodule
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_pull_module
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_plug_submodule
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_plug_module
</UL>

<P><STRONG><a name="[358]"></a>pf_cmdev_get_device</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pf_cmdev.o(i.pf_cmdev_get_device))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_im_0_filter_data
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ident_data
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_diag_data
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_data
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_update
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_remove
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_add
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_update_submodule_state
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_update_station_problem_indicator
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_get_diag_summary
</UL>

<P><STRONG><a name="[35b]"></a>pf_cmdev_get_diag_item</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, pf_cmdev.o(i.pf_cmdev_get_diag_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pf_cmdev_get_diag_item
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_next_diagnosis_usi
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_diag_list
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_update
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_remove
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_add
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_update_submodule_state
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_update_station_problem_indicator
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_find_entry
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_get_diag_summary
</UL>

<P><STRONG><a name="[367]"></a>pf_cmdev_get_module_ident</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, pf_cmdev.o(i.pf_cmdev_get_module_ident))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pf_cmdev_get_module_ident &rArr; pf_cmdev_get_slot_full &rArr; pf_cmdev_get_api &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_slot_full
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_process
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_usi_diagnosis_disappears
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_diagnosis
</UL>

<P><STRONG><a name="[3a5]"></a>pf_cmdev_get_next_diagnosis_usi</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, pf_cmdev.o(i.pf_cmdev_get_next_diagnosis_usi))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = pf_cmdev_get_next_diagnosis_usi &rArr; pf_cmdev_get_diag_item
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_diag_item
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_diag_subslot
</UL>

<P><STRONG><a name="[3a4]"></a>pf_cmdev_get_slot_full</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, pf_cmdev.o(i.pf_cmdev_get_slot_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pf_cmdev_get_slot_full &rArr; pf_cmdev_get_api &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_api
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_module_ident
</UL>

<P><STRONG><a name="[372]"></a>pf_cmdev_get_state</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pf_cmdev.o(i.pf_cmdev_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_find_by_uuid
</UL>

<P><STRONG><a name="[368]"></a>pf_cmdev_get_submodule_ident</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, pf_cmdev.o(i.pf_cmdev_get_submodule_ident))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pf_cmdev_get_submodule_ident &rArr; pf_cmdev_get_subslot_full &rArr; pf_cmdev_get_api &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_subslot_full
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_process
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_usi_diagnosis_disappears
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_diagnosis
</UL>

<P><STRONG><a name="[359]"></a>pf_cmdev_get_subslot_full</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, pf_cmdev.o(i.pf_cmdev_get_subslot_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pf_cmdev_get_subslot_full &rArr; pf_cmdev_get_api &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_api
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_subslot
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_submodule_ident
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_get_ar_iocr_desc
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_find_entry
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_get_ar_iocr_desc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_get_diag_summary
</UL>

<P><STRONG><a name="[3a6]"></a>pf_cmdev_init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, pf_cmdev.o(i.pf_cmdev_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pf_cmdev_init &rArr; os_mutex_create &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_new_api
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init_only
</UL>

<P><STRONG><a name="[3aa]"></a>pf_cmdev_new_diag</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, pf_cmdev.o(i.pf_cmdev_new_diag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pf_cmdev_new_diag
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_add
</UL>

<P><STRONG><a name="[3ad]"></a>pf_cmdev_plug_module</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, pf_cmdev.o(i.pf_cmdev_plug_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pf_cmdev_plug_module &rArr; pf_cmdev_new_slot &rArr; pf_cmdev_get_slot &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_api
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_new_slot
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_plug_module
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_plug_submodule
</UL>

<P><STRONG><a name="[3ae]"></a>pf_cmdev_plug_submodule</STRONG> (Thumb, 520 bytes, Stack size 72 bytes, pf_cmdev.o(i.pf_cmdev_plug_submodule))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = pf_cmdev_plug_submodule &rArr; pf_cmdev_pull_submodule &rArr; pf_alarm_send_pull &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_api
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_new_subslot
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_subslot
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_slot
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_exp_sub
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_plug_wrong
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_plug
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_pull_submodule
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_plug_module
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_plug_submodule
</UL>

<P><STRONG><a name="[3b0]"></a>pf_cmdev_pull_module</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, pf_cmdev.o(i.pf_cmdev_pull_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = pf_cmdev_pull_module &rArr; pf_cmdev_pull_submodule &rArr; pf_alarm_send_pull &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_api
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_slot
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_pull_submodule
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_pull_module
</UL>

<P><STRONG><a name="[3af]"></a>pf_cmdev_pull_submodule</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, pf_cmdev.o(i.pf_cmdev_pull_submodule))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = pf_cmdev_pull_submodule &rArr; pf_alarm_send_pull &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_api
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_subslot
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_slot
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_pull
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_pull_submodule
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_pull_module
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_plug_submodule
</UL>

<P><STRONG><a name="[3b3]"></a>pf_cmdev_rm_ccontrol_cnf</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, pf_cmdev.o(i.pf_cmdev_rm_ccontrol_cnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = pf_cmdev_rm_ccontrol_cnf &rArr; pf_cmdev_set_state &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_create_log_book_entry
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_set_state
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_ccontrol_cnf
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_enable
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_to_string
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_ccontrol_cnf
</UL>

<P><STRONG><a name="[3b7]"></a>pf_cmdev_rm_connect_ind</STRONG> (Thumb, 336 bytes, Stack size 272 bytes, pf_cmdev.o(i.pf_cmdev_rm_connect_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = pf_cmdev_rm_connect_ind &rArr; pf_pdport_ar_connect_ind &rArr; pf_lldp_send_enable &rArr; pf_lldp_tx_restart &rArr; pf_lldp_send &rArr; pf_lldp_construct_frame &rArr; pf_lldp_get_port_id &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_generate_submodule_diff
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_set_state
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_reset_observers
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_fix_frame_id
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_cm_connect_rsp_pos
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_cm_connect_rsp_neg
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_apdu
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_ar_connect_ind
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_cm_connect_ind
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_station_name
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_device_macaddr
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_ind
</UL>

<P><STRONG><a name="[3bc]"></a>pf_cmdev_rm_dcontrol_ind</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, pf_cmdev.o(i.pf_cmdev_rm_dcontrol_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = pf_cmdev_rm_dcontrol_ind &rArr; pf_cmdev_set_state &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_set_state
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_pdev
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_cm_dcontrol_ind
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_dcontrol_ind
</UL>

<P><STRONG><a name="[3be]"></a>pf_cmdev_rm_release_ind</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, pf_cmdev.o(i.pf_cmdev_rm_release_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = pf_cmdev_rm_release_ind &rArr; pf_cmdev_set_state &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_set_state
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_cm_release_ind
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_release_ind
</UL>

<P><STRONG><a name="[38e]"></a>pf_cmdev_state_ind</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, pf_cmdev.o(i.pf_cmdev_state_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_event_to_string
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_state_ind
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmwrr_cmdev_state_ind
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_cmdev_state_ind
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_cmdev_state_ind
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_cmdev_state_ind
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmpbe_cmdev_state_ind
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmio_cmdev_state_ind
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_to_string
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_cmio_info_ind
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_cm_ccontrol_req
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_set_state
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_cm_connect_rsp_pos
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_ppm_error_ind
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_cpm_error_ind
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_alarm_error_ind
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_timeout
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_dce_packet
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmpbe_rm_dcontrol_ind
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmio_cpm_state_ind
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_abort_active_ars
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_release_ind
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_dcontrol_ind
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_ccontrol_cnf
</UL>

<P><STRONG><a name="[3b6]"></a>pf_cmdev_state_to_string</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, pf_cmdev.o(i.pf_cmdev_state_to_string))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_set_state
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_timeout
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_ind
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_ccontrol_cnf
</UL>

<P><STRONG><a name="[4ad]"></a>pf_cmdev_submod_dir_to_string</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, pf_cmdev.o(i.pf_cmdev_submod_dir_to_string))
<BR><BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_exp_submodule
</UL>

<P><STRONG><a name="[460]"></a>pf_cmdmc_activate_req</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pf_cmdmc.o(i.pf_cmdmc_activate_req))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_start_req
</UL>

<P><STRONG><a name="[459]"></a>pf_cmdmc_close_req</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pf_cmdmc.o(i.pf_cmdmc_close_req))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_cmdev_state_ind
</UL>

<P><STRONG><a name="[471]"></a>pf_cmdmc_cpm_state_ind</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pf_cmdmc.o(i.pf_cmdmc_cpm_state_ind))
<BR><BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_state_ind
</UL>

<P><STRONG><a name="[477]"></a>pf_cmina_dcp_get_req</STRONG> (Thumb, 430 bytes, Stack size 20 bytes, pf_cmina.o(i.pf_cmina_dcp_get_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pf_cmina_dcp_get_req
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_hello_req
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_identify_req
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_get_req
</UL>

<P><STRONG><a name="[3ca]"></a>pf_cmina_dcp_set_commit</STRONG> (Thumb, 270 bytes, Stack size 80 bytes, pf_cmina.o(i.pf_cmina_dcp_set_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = pf_cmina_dcp_set_commit &rArr; pnal_set_ip_suite &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_set_ip_suite
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_ip_to_string
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_get_set
</UL>

<P><STRONG><a name="[3ce]"></a>pf_cmina_dcp_set_ind</STRONG> (Thumb, 1434 bytes, Stack size 136 bytes, pf_cmina.o(i.pf_cmina_dcp_set_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120<LI>Call Chain = pf_cmina_dcp_set_ind &rArr; pf_cmina_set_default_cfg &rArr; pf_file_load &rArr; pnal_load_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_remove_if_running
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_bg_worker_start_job
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_set_default_cfg
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_nbr_of_active_ars
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_is_stationname_valid
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_is_ipsuite_valid
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_is_full_ipsuite_valid
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_ip_to_string
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_abort_active_ars
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_set_req
</UL>

<P><STRONG><a name="[341]"></a>pf_cmina_get_device_macaddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pf_cmina.o(i.pf_cmina_get_device_macaddr))
<BR><BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_session_allocate
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_read_ind
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_hello_req
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_connect_ind
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_identify_req
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_get_set
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_a_data_req
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_port_id
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_chassis_id
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_construct_frame
</UL>

<P><STRONG><a name="[3d9]"></a>pf_cmina_get_file_directory</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pf_cmina.o(i.pf_cmina_get_file_directory))
<BR><BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_set_default_cfg
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_save_ase
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_save
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_load
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_save_im
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_load_im
</UL>

<P><STRONG><a name="[407]"></a>pf_cmina_get_gateway</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pf_cmina.o(i.pf_cmina_get_gateway))
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_read_ind
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
</UL>

<P><STRONG><a name="[409]"></a>pf_cmina_get_ipaddr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pf_cmina.o(i.pf_cmina_get_ipaddr))
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_read_ind
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_management_address
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_construct_frame
</UL>

<P><STRONG><a name="[408]"></a>pf_cmina_get_netmask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pf_cmina.o(i.pf_cmina_get_netmask))
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_read_ind
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
</UL>

<P><STRONG><a name="[3b9]"></a>pf_cmina_get_station_name</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, pf_cmina.o(i.pf_cmina_get_station_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pf_cmina_get_station_name &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_read_ind
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_connect_ind
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_port_id
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_chassis_id
</UL>

<P><STRONG><a name="[557]"></a>pf_cmina_has_timed_out</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pf_cmina.o(i.pf_cmina_has_timed_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pf_cmina_has_timed_out
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_handle_periodic
</UL>

<P><STRONG><a name="[3d5]"></a>pf_cmina_init</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, pf_cmina.o(i.pf_cmina_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2000<LI>Call Chain = pf_cmina_init &rArr; pf_cmina_set_default_cfg &rArr; pf_file_load &rArr; pnal_load_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_init_handle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_set_default_cfg
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_set_commit
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init_only
</UL>

<P><STRONG><a name="[3cc]"></a>pf_cmina_ip_to_string</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, pf_cmina.o(i.pf_cmina_ip_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pf_cmina_ip_to_string &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_periodic
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_send_once_from_buffer
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_set_default_cfg
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_save_ase
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_set_ind
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_set_commit
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_construct_frame
</UL>

<P><STRONG><a name="[3d0]"></a>pf_cmina_is_full_ipsuite_valid</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pf_cmina.o(i.pf_cmina_is_full_ipsuite_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pf_cmina_is_full_ipsuite_valid &rArr; pf_cmina_is_ipsuite_valid &rArr; pf_cmina_is_ipaddress_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_is_ipsuite_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_set_ind
</UL>

<P><STRONG><a name="[3d8]"></a>pf_cmina_is_gateway_valid</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pf_cmina.o(i.pf_cmina_is_gateway_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pf_cmina_is_gateway_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_is_ipsuite_valid
</UL>

<P><STRONG><a name="[3d6]"></a>pf_cmina_is_ipaddress_valid</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, pf_cmina.o(i.pf_cmina_is_ipaddress_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pf_cmina_is_ipaddress_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_is_netmask_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_is_ipsuite_valid
</UL>

<P><STRONG><a name="[3cf]"></a>pf_cmina_is_ipsuite_valid</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pf_cmina.o(i.pf_cmina_is_ipsuite_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pf_cmina_is_ipsuite_valid &rArr; pf_cmina_is_ipaddress_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_is_netmask_valid
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_is_ipaddress_valid
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_is_gateway_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_is_full_ipsuite_valid
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_set_ind
</UL>

<P><STRONG><a name="[3d7]"></a>pf_cmina_is_netmask_valid</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pf_cmina.o(i.pf_cmina_is_netmask_valid))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_is_ipsuite_valid
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_is_ipaddress_valid
</UL>

<P><STRONG><a name="[3d1]"></a>pf_cmina_is_stationname_valid</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, pf_cmina.o(i.pf_cmina_is_stationname_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pf_cmina_is_stationname_valid &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_set_ind
</UL>

<P><STRONG><a name="[3d3]"></a>pf_cmina_nbr_of_active_ars</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, pf_cmina.o(i.pf_cmina_nbr_of_active_ars))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pf_cmina_nbr_of_active_ars
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_find_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_set_ind
</UL>

<P><STRONG><a name="[1e2]"></a>pf_cmina_save_ase</STRONG> (Thumb, 254 bytes, Stack size 1240 bytes, pf_cmina.o(i.pf_cmina_save_ase))
<BR><BR>[Stack]<UL><LI>Max Depth = 2568<LI>Call Chain = pf_cmina_save_ase &rArr; pf_file_save_if_modified &rArr; pf_file_load &rArr; pnal_load_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_save_if_modified
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_ip_to_string
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_file_directory
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_worker_task
</UL>

<P><STRONG><a name="[3d4]"></a>pf_cmina_set_default_cfg</STRONG> (Thumb, 732 bytes, Stack size 688 bytes, pf_cmina.o(i.pf_cmina_set_default_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = pf_cmina_set_default_cfg &rArr; pf_file_load &rArr; pnal_load_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_reset_ind
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_get_default_cfg
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_clear_im_data
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_load
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_clear
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_bg_worker_start_job
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_ip_to_string
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_file_directory
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_reset_all
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_init
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_set_ind
</UL>

<P><STRONG><a name="[3c4]"></a>pf_cmio_cmdev_state_ind</STRONG> (Thumb, 422 bytes, Stack size 40 bytes, pf_cmio.o(i.pf_cmio_cmdev_state_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = pf_cmio_cmdev_state_ind &rArr; pf_scheduler_remove_if_running &rArr; pf_scheduler_remove &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_event_to_string
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmio_state_to_string
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmio_set_state
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_remove_if_running
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_ind
</UL>

<P><STRONG><a name="[3e3]"></a>pf_cmio_cpm_new_data_ind</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, pf_cmio.o(i.pf_cmio_cpm_new_data_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pf_cmio_cpm_new_data_ind &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_c_data_ind
</UL>

<P><STRONG><a name="[3e4]"></a>pf_cmio_cpm_state_ind</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, pf_cmio.o(i.pf_cmio_cpm_state_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = pf_cmio_cpm_state_ind &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_state_ind
</UL>

<P><STRONG><a name="[3c7]"></a>pf_cmpbe_cmdev_state_ind</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, pf_cmpbe.o(i.pf_cmpbe_cmdev_state_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pf_cmpbe_cmdev_state_ind &rArr; pf_cmpbe_set_state &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_event_to_string
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmpbe_state_to_string
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmpbe_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_ind
</UL>

<P><STRONG><a name="[3e7]"></a>pf_cmpbe_rm_ccontrol_cnf</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, pf_cmpbe.o(i.pf_cmpbe_rm_ccontrol_cnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pf_cmpbe_rm_ccontrol_cnf &rArr; pf_cmpbe_set_state &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmpbe_set_state
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_ccontrol_cnf
</UL>

<P><STRONG><a name="[3e8]"></a>pf_cmpbe_rm_dcontrol_ind</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, pf_cmpbe.o(i.pf_cmpbe_rm_dcontrol_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = pf_cmpbe_rm_dcontrol_ind &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_disable
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmpbe_state_to_string
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmpbe_set_state
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_cm_dcontrol_ind
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_dcontrol_ind
</UL>

<P><STRONG><a name="[3ef]"></a>pf_cmrdr_rm_read_ind</STRONG> (Thumb, 4500 bytes, Stack size 2408 bytes, pf_cmrdr.o(i.pf_cmrdr_rm_read_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 3784<LI>Call Chain = pf_cmrdr_rm_read_ind &rArr; pf_pdport_read_ind &rArr; pf_lldp_get_peer_station_name &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_generate_submodule_diff
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_record_data_read
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_read_result
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdinterface_data_real
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_output_data
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_log_book_data
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_input_data
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_im_3
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_im_2
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_im_1
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_im_0_filter_data
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_im_0
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ident_data
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_diag_data
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_diff
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_data
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_get_iocs
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_get_data_and_iops
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_subslot_is_dap_port_id
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_dap_subslot_to_local_port
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_read_ind
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_cm_read_ind
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_get_iocs
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_get_data_and_iops
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_cm_read_ind
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_index_to_logstring
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_netmask
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_ipaddr
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_gateway
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_station_name
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_device_macaddr
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_read_ind
</UL>

<P><STRONG><a name="[3c8]"></a>pf_cmrpc_cmdev_state_ind</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, pf_cmrpc.o(i.pf_cmrpc_cmdev_state_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = pf_cmrpc_cmdev_state_ind &rArr; pf_session_release &rArr; pf_udp_close &rArr; pnal_udp_close &rArr; close &rArr; free_socket &rArr; free_socket_free_elements &rArr; netconn_delete &rArr; netconn_prepare_delete &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_event_to_string
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_session_release
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_session_locate_by_ar
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_release
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_ind
</UL>

<P><STRONG><a name="[41c]"></a>pf_cmrpc_init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, pf_cmrpc.o(i.pf_cmrpc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = pf_cmrpc_init &rArr; pf_udp_open &rArr; pnal_udp_open &rArr; close &rArr; free_socket &rArr; free_socket_free_elements &rArr; netconn_delete &rArr; netconn_prepare_delete &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_udp_open
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init_only
</UL>

<P><STRONG><a name="[41f]"></a>pf_cmrpc_lookup_request</STRONG> (Thumb, 134 bytes, Stack size 168 bytes, pf_cmrpc_epm.o(i.pf_cmrpc_lookup_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = pf_cmrpc_lookup_request &rArr; pf_put_lookup_response_data &rArr; pf_put_rpc_epm_entry &rArr; pf_put_tower_entry &rArr; pf_put_rpc_floor_2_uuid &rArr; pf_put_rpc_floor_1_uuid &rArr; pf_put_rpc_uuid &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_lookup_response_data
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_inquiry_read_all_reg_ind
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_lookup_ind
</UL>

<P><STRONG><a name="[424]"></a>pf_cmrpc_periodic</STRONG> (Thumb, 440 bytes, Stack size 64 bytes, pf_cmrpc.o(i.pf_cmrpc_periodic))
<BR><BR>[Stack]<UL><LI>Max Depth = 4336<LI>Call Chain = pf_cmrpc_periodic &rArr; pf_cmrpc_dce_packet &rArr; pf_cmrpc_rpc_request &rArr; pf_cmrpc_rm_read_ind &rArr; pf_cmrdr_rm_read_ind &rArr; pf_pdport_read_ind &rArr; pf_lldp_get_peer_station_name &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_udp_recvfrom
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_udp_close
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_dce_packet
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_ip_to_string
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_handle_periodic
</UL>

<P><STRONG><a name="[38f]"></a>pf_cmrpc_rm_ccontrol_req</STRONG> (Thumb, 1176 bytes, Stack size 184 bytes, pf_cmrpc.o(i.pf_cmrpc_rm_ccontrol_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = pf_cmrpc_rm_ccontrol_req &rArr; pf_cmrpc_send_with_timeout &rArr; pf_cmrpc_send_once &rArr; pf_cmrpc_send_once_from_buffer &rArr; pf_udp_sendto &rArr; pnal_udp_sendto &rArr; sendto &rArr; send &rArr;  sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_current_time_us
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_dce_rpc_header
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_control
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_diff
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_udp_open
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_session_allocate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_send_with_timeout
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_cm_ccontrol_req
</UL>

<P><STRONG><a name="[44f]"></a>pf_cmsm_activate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pf_cmsm.o(i.pf_cmsm_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pf_cmsm_activate &rArr; pf_scheduler_init_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_init_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_start_req
</UL>

<P><STRONG><a name="[40c]"></a>pf_cmsm_cm_read_ind</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, pf_cmsm.o(i.pf_cmsm_cm_read_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = pf_cmsm_cm_read_ind &rArr; pf_scheduler_restart &rArr; pf_scheduler_remove_if_running &rArr; pf_scheduler_remove &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
</UL>

<P><STRONG><a name="[451]"></a>pf_cmsm_cm_write_ind</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, pf_cmsm.o(i.pf_cmsm_cm_write_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = pf_cmsm_cm_write_ind &rArr; pf_scheduler_restart &rArr; pf_scheduler_remove_if_running &rArr; pf_scheduler_remove &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmwrr_rm_write_ind
</UL>

<P><STRONG><a name="[3c6]"></a>pf_cmsm_cmdev_state_ind</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, pf_cmsm.o(i.pf_cmsm_cmdev_state_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pf_cmsm_cmdev_state_ind &rArr; pf_scheduler_restart &rArr; pf_scheduler_remove_if_running &rArr; pf_scheduler_remove &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_event_to_string
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_restart
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_is_running
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_state_to_string
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_set_state
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_remove_if_running
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_ind
</UL>

<P><STRONG><a name="[445]"></a>pf_cmsm_rm_read_ind</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, pf_cmsm.o(i.pf_cmsm_rm_read_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = pf_cmsm_rm_read_ind &rArr; pf_scheduler_restart &rArr; pf_scheduler_remove_if_running &rArr; pf_scheduler_remove &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_read_ind
</UL>

<P><STRONG><a name="[356]"></a>pf_cmsu_alarm_error_ind</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, pf_cmsu.o(i.pf_cmsu_alarm_error_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = pf_cmsu_alarm_error_ind &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_error_ind
</UL>

<P><STRONG><a name="[3c3]"></a>pf_cmsu_cmdev_state_ind</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, pf_cmsu.o(i.pf_cmsu_cmdev_state_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_event_to_string
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_close_req
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_activate_req
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_close_req
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_close
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_state_to_string
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_set_state
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdmc_close_req
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_ind
</UL>

<P><STRONG><a name="[45b]"></a>pf_cmsu_cpm_error_ind</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, pf_cmsu.o(i.pf_cmsu_cpm_error_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = pf_cmsu_cpm_error_ind &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_activate_req
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_control_interval_expired
</UL>

<P><STRONG><a name="[36f]"></a>pf_cmsu_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pf_cmsu.o(i.pf_cmsu_init))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_allocate
</UL>

<P><STRONG><a name="[45c]"></a>pf_cmsu_ppm_error_ind</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, pf_cmsu.o(i.pf_cmsu_ppm_error_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = pf_cmsu_ppm_error_ind &rArr;  pf_cmdev_state_ind (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_state_ind
</UL>

<P><STRONG><a name="[392]"></a>pf_cmsu_start_req</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, pf_cmsu.o(i.pf_cmsu_start_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = pf_cmsu_start_req &rArr; pf_cpm_activate_req &rArr; pf_cmsu_cpm_error_ind &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_create
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_create
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_activate_req
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_activate
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_set_state
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_activate
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdmc_activate_req
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_cm_connect_rsp_pos
</UL>

<P><STRONG><a name="[3c5]"></a>pf_cmwrr_cmdev_state_ind</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, pf_cmwrr.o(i.pf_cmwrr_cmdev_state_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pf_cmwrr_cmdev_state_ind &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_event_to_string
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmwrr_state_to_string
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_ind
</UL>

<P><STRONG><a name="[370]"></a>pf_cmwrr_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pf_cmwrr.o(i.pf_cmwrr_init))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_allocate
</UL>

<P><STRONG><a name="[422]"></a>pf_cmwrr_rm_write_ind</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, pf_cmwrr.o(i.pf_cmwrr_rm_write_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944<LI>Call Chain = pf_cmwrr_rm_write_ind &rArr; pf_cmwrr_write &rArr; pf_fspm_cm_write_ind &rArr; pf_fspm_save_im &rArr; pf_file_save_if_modified &rArr; pf_file_load &rArr; pnal_load_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_cm_write_ind
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmwrr_write
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_perform_one_write
</UL>

<P><STRONG><a name="[45e]"></a>pf_cpm_activate_req</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, pf_cpm.o(i.pf_cpm_activate_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = pf_cpm_activate_req &rArr; pf_cmsu_cpm_error_ind &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_cpm_error_ind
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_number_of_ports
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_start_req
</UL>

<P><STRONG><a name="[468]"></a>pf_cpm_check_cycle</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pf_cpm.o(i.pf_cpm_check_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pf_cpm_check_cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_c_data_ind
</UL>

<P><STRONG><a name="[467]"></a>pf_cpm_check_src_addr</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pf_cpm.o(i.pf_cpm_check_src_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = pf_cpm_check_src_addr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_c_data_ind
</UL>

<P><STRONG><a name="[458]"></a>pf_cpm_close_req</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, pf_cpm.o(i.pf_cpm_close_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pf_cpm_close_req &rArr; os_mutex_destroy &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_destroy
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_cmdev_state_ind
</UL>

<P><STRONG><a name="[45d]"></a>pf_cpm_create</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, pf_cpm.o(i.pf_cpm_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pf_cpm_create &rArr; os_mutex_create &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_start_req
</UL>

<P><STRONG><a name="[46d]"></a>pf_cpm_driver_sw_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pf_cpm_driver_sw.o(i.pf_cpm_driver_sw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pf_cpm_driver_sw_init &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_init
</UL>

<P><STRONG><a name="[400]"></a>pf_cpm_get_data_and_iops</STRONG> (Thumb, 314 bytes, Stack size 88 bytes, pf_cpm.o(i.pf_cpm_get_data_and_iops))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pf_cpm_get_data_and_iops &rArr; pf_cpm_get_ar_iocr_desc &rArr; pf_cmdev_get_subslot_full &rArr; pf_cmdev_get_api &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_get_ar_iocr_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_output_get_data_and_iops
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
</UL>

<P><STRONG><a name="[52c]"></a>pf_cpm_get_data_status</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pf_cpm.o(i.pf_cpm_get_data_status))
<BR><BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_iocr
</UL>

<P><STRONG><a name="[3fe]"></a>pf_cpm_get_iocs</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, pf_cpm.o(i.pf_cpm_get_iocs))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pf_cpm_get_iocs &rArr; pf_cpm_get_ar_iocr_desc &rArr; pf_cmdev_get_subslot_full &rArr; pf_cmdev_get_api &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_get_ar_iocr_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_input_get_iocs
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
</UL>

<P><STRONG><a name="[46f]"></a>pf_cpm_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pf_cpm.o(i.pf_cpm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pf_cpm_init &rArr; pf_cpm_driver_sw_init &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_driver_sw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init_only
</UL>

<P><STRONG><a name="[466]"></a>pf_cpm_set_state</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, pf_cpm.o(i.pf_cpm_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pf_cpm_set_state &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_state_to_string
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_create
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_close_req
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_activate_req
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_control_interval_expired
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_c_data_ind
</UL>

<P><STRONG><a name="[469]"></a>pf_cpm_state_ind</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, pf_cpm.o(i.pf_cpm_state_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = pf_cpm_state_ind &rArr; pf_cmio_cpm_state_ind &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmio_cpm_state_ind
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdmc_cpm_state_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_control_interval_expired
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_c_data_ind
</UL>

<P><STRONG><a name="[47d]"></a>pf_dcp_calculate_response_delay</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, pf_dcp.o(i.pf_dcp_calculate_response_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pf_dcp_calculate_response_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_identify_req
</UL>

<P><STRONG><a name="[472]"></a>pf_dcp_check_destination_address</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pf_dcp.o(i.pf_dcp_check_destination_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = pf_dcp_check_destination_address &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_get_set
</UL>

<P><STRONG><a name="[475]"></a>pf_dcp_exit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pf_dcp.o(i.pf_dcp_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pf_dcp_exit &rArr; pf_eth_frame_id_map_remove &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_frame_id_map_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init_only
</UL>

<P><STRONG><a name="[3db]"></a>pf_dcp_hello_req</STRONG> (Thumb, 588 bytes, Stack size 88 bytes, pf_dcp.o(i.pf_dcp_hello_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pf_dcp_hello_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_buf_free
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_buf_alloc
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_get_req
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_device_macaddr
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_put_block
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_send_on_management_port
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_send_hello
</UL>

<P><STRONG><a name="[47e]"></a>pf_dcp_init</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, pf_dcp.o(i.pf_dcp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pf_dcp_init &rArr; pf_eth_frame_id_map_add &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_init_handle
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_frame_id_map_add
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init_only
</UL>

<P><STRONG><a name="[480]"></a>pf_dcp_trigger_signal_led</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, pf_dcp.o(i.pf_dcp_trigger_signal_led))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = pf_dcp_trigger_signal_led &rArr; pf_scheduler_add &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_is_running
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_set_req
</UL>

<P><STRONG><a name="[481]"></a>pf_diag_add</STRONG> (Thumb, 940 bytes, Stack size 128 bytes, pf_diag.o(i.pf_diag_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = pf_diag_add &rArr; pf_alarm_send_diagnosis &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_diag_item
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_device
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_new_diag
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_diagnosis
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_update_submodule_state
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_update_station_problem_indicator
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_find_first_ar
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_find_entry
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_usi_add
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_std_add
</UL>

<P><STRONG><a name="[395]"></a>pf_diag_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pf_diag.o(i.pf_diag_exit))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_exit
</UL>

<P><STRONG><a name="[3a7]"></a>pf_diag_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pf_diag.o(i.pf_diag_init))
<BR><BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_init
</UL>

<P><STRONG><a name="[488]"></a>pf_diag_remove</STRONG> (Thumb, 496 bytes, Stack size 72 bytes, pf_diag.o(i.pf_diag_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = pf_diag_remove &rArr; pf_alarm_send_diagnosis &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_free_diag
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_diag_item
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_device
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_usi_diagnosis_disappears
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_diagnosis
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_update_submodule_state
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_update_station_problem_indicator
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_find_first_ar
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_usi_remove
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_std_remove
</UL>

<P><STRONG><a name="[48a]"></a>pf_diag_std_add</STRONG> (Thumb, 56 bytes, Stack size 80 bytes, pf_diag.o(i.pf_diag_std_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = pf_diag_std_add &rArr; pf_diag_add &rArr; pf_alarm_send_diagnosis &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_add
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_get_preferred_usi
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_diag_std_add
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_check_peer_station_name
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_check_peer_port_name
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_check_no_peer_detected
</UL>

<P><STRONG><a name="[48b]"></a>pf_diag_std_remove</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, pf_diag.o(i.pf_diag_std_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = pf_diag_std_remove &rArr; pf_diag_remove &rArr; pf_alarm_send_diagnosis &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_remove
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_get_preferred_usi
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_diag_std_remove
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_remove_all_diag
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_check_peer_station_name
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_check_peer_port_name
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_check_no_peer_detected
</UL>

<P><STRONG><a name="[48c]"></a>pf_diag_std_update</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, pf_diag.o(i.pf_diag_std_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = pf_diag_std_update &rArr; pf_diag_update &rArr; pf_alarm_send_diagnosis &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_update
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_get_preferred_usi
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_diag_std_update
</UL>

<P><STRONG><a name="[48d]"></a>pf_diag_update</STRONG> (Thumb, 608 bytes, Stack size 104 bytes, pf_diag.o(i.pf_diag_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = pf_diag_update &rArr; pf_alarm_send_diagnosis &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_diag_item
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_device
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_diagnosis
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_update_submodule_state
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_update_station_problem_indicator
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_find_first_ar
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_find_entry
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_usi_update
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_std_update
</UL>

<P><STRONG><a name="[48f]"></a>pf_diag_usi_add</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, pf_diag.o(i.pf_diag_usi_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = pf_diag_usi_add &rArr; pf_diag_add &rArr; pf_alarm_send_diagnosis &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_diag_usi_add
</UL>

<P><STRONG><a name="[490]"></a>pf_diag_usi_remove</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, pf_diag.o(i.pf_diag_usi_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = pf_diag_usi_remove &rArr; pf_diag_remove &rArr; pf_alarm_send_diagnosis &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_diag_usi_remove
</UL>

<P><STRONG><a name="[491]"></a>pf_diag_usi_update</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, pf_diag.o(i.pf_diag_usi_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = pf_diag_usi_update &rArr; pf_diag_update &rArr; pf_alarm_send_diagnosis &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_diag_usi_update
</UL>

<P><STRONG><a name="[34f]"></a>pf_eth_frame_id_map_add</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, pf_eth.o(i.pf_eth_frame_id_map_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pf_eth_frame_id_map_add &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_driver_sw_activate_req
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmx_activate
</UL>

<P><STRONG><a name="[351]"></a>pf_eth_frame_id_map_remove</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, pf_eth.o(i.pf_eth_frame_id_map_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pf_eth_frame_id_map_remove &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_exit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_driver_sw_close_req
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmx_close
</UL>

<P><STRONG><a name="[492]"></a>pf_eth_init</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, pf_eth.o(i.pf_eth_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pf_eth_init &rArr; pf_eth_init_netif &rArr; pnal_eth_init &rArr; netif_find &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_init_iterator_over_ports
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_next
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_config
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_init_netif
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init_only
</UL>

<P><STRONG><a name="[d9]"></a>pf_eth_recv</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, pf_eth.o(i.pf_eth_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = pf_eth_recv &rArr; pf_lldp_recv &rArr; pf_lldp_update_peer &rArr; pf_lldp_restart_peer_timeout &rArr; pf_scheduler_remove_if_running &rArr; pf_scheduler_remove &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_port_number
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pf_eth.o(i.pf_eth_init_netif)
</UL>
<P><STRONG><a name="[349]"></a>pf_eth_send_on_management_port</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pf_eth.o(i.pf_eth_send_on_management_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pf_eth_send_on_management_port &rArr; pnal_eth_send &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_eth_send
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_hello_req
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_responder
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_get_set
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_timeout
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_a_data_req
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_send
</UL>

<P><STRONG><a name="[49c]"></a>pf_eth_send_on_physical_port</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, pf_eth.o(i.pf_eth_send_on_physical_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pf_eth_send_on_physical_port &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_eth_send
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_send
</UL>

<P><STRONG><a name="[3df]"></a>pf_file_clear</STRONG> (Thumb, 38 bytes, Stack size 288 bytes, pf_file.o(i.pf_file_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = pf_file_clear &rArr; pnal_clear_file &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_clear_file
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_join_directory_filename
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_set_default_cfg
</UL>

<P><STRONG><a name="[49d]"></a>pf_file_join_directory_filename</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, pf_file.o(i.pf_file_join_directory_filename))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pf_file_join_directory_filename &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_load
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_clear
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_save
</UL>

<P><STRONG><a name="[3dd]"></a>pf_file_load</STRONG> (Thumb, 222 bytes, Stack size 344 bytes, pf_file.o(i.pf_file_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = pf_file_load &rArr; pnal_load_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_load_file
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_current_time_us
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint32
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_join_directory_filename
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_save_if_modified
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_set_default_cfg
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_load
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_load_im
</UL>

<P><STRONG><a name="[4a1]"></a>pf_file_save</STRONG> (Thumb, 148 bytes, Stack size 320 bytes, pf_file.o(i.pf_file_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = pf_file_save &rArr; pnal_save_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_save_file
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_current_time_us
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_join_directory_filename
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_save_if_modified
</UL>

<P><STRONG><a name="[3da]"></a>pf_file_save_if_modified</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, pf_file.o(i.pf_file_save_if_modified))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = pf_file_save_if_modified &rArr; pf_file_load &rArr; pnal_load_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_load
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_save
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_save_ase
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_save
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_save_im
</UL>

<P><STRONG><a name="[327]"></a>pf_fspm_alpmi_alarm_cnf</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, pf_fspm.o(i.pf_fspm_alpmi_alarm_cnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pf_fspm_alpmi_alarm_cnf &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_alpmi_apmr_a_data_ind
</UL>

<P><STRONG><a name="[330]"></a>pf_fspm_alpmr_alarm_ack_cnf</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, pf_fspm.o(i.pf_fspm_alpmr_alarm_ack_cnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pf_fspm_alpmr_alarm_ack_cnf &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_alpmr_apms_a_data_cnf
</UL>

<P><STRONG><a name="[32e]"></a>pf_fspm_alpmr_alarm_ind</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, pf_fspm.o(i.pf_fspm_alpmr_alarm_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pf_fspm_alpmr_alarm_ind &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_alpmr_apmr_a_data_ind
</UL>

<P><STRONG><a name="[3b5]"></a>pf_fspm_ccontrol_cnf</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, pf_fspm.o(i.pf_fspm_ccontrol_cnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pf_fspm_ccontrol_cnf &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_ccontrol_cnf
</UL>

<P><STRONG><a name="[3de]"></a>pf_fspm_clear_im_data</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, pf_fspm.o(i.pf_fspm_clear_im_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pf_fspm_clear_im_data &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_bg_worker_start_job
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_set_default_cfg
</UL>

<P><STRONG><a name="[3bb]"></a>pf_fspm_cm_connect_ind</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, pf_fspm.o(i.pf_fspm_cm_connect_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pf_fspm_cm_connect_ind &rArr; pf_fspm_create_log_book_entry &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_create_log_book_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_connect_ind
</UL>

<P><STRONG><a name="[3bd]"></a>pf_fspm_cm_dcontrol_ind</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, pf_fspm.o(i.pf_fspm_cm_dcontrol_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pf_fspm_cm_dcontrol_ind &rArr; pf_fspm_create_log_book_entry &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_create_log_book_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmpbe_rm_dcontrol_ind
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_dcontrol_ind
</UL>

<P><STRONG><a name="[3f3]"></a>pf_fspm_cm_read_ind</STRONG> (Thumb, 598 bytes, Stack size 72 bytes, pf_fspm.o(i.pf_fspm_cm_read_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pf_fspm_cm_read_ind &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
</UL>

<P><STRONG><a name="[3bf]"></a>pf_fspm_cm_release_ind</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, pf_fspm.o(i.pf_fspm_cm_release_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pf_fspm_cm_release_ind &rArr; pf_fspm_create_log_book_entry &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_create_log_book_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_release_ind
</UL>

<P><STRONG><a name="[463]"></a>pf_fspm_cm_write_ind</STRONG> (Thumb, 914 bytes, Stack size 80 bytes, pf_fspm.o(i.pf_fspm_cm_write_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800<LI>Call Chain = pf_fspm_cm_write_ind &rArr; pf_fspm_save_im &rArr; pf_file_save_if_modified &rArr; pf_file_load &rArr; pnal_load_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_im_1
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_save_im
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmwrr_write
</UL>

<P><STRONG><a name="[338]"></a>pf_fspm_create_log_book_entry</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, pf_fspm.o(i.pf_fspm_create_log_book_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pf_fspm_create_log_book_entry &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_current_time_us
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_find_by_arep
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_create_log_book_entry
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_cm_release_ind
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_cm_dcontrol_ind
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_cm_connect_ind
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_a_data_ind
</UL>

<P><STRONG><a name="[46b]"></a>pf_fspm_data_status_changed</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, pf_fspm.o(i.pf_fspm_data_status_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pf_fspm_data_status_changed &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_c_data_ind
</UL>

<P><STRONG><a name="[39a]"></a>pf_fspm_exp_module_ind</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, pf_fspm.o(i.pf_fspm_exp_module_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pf_fspm_exp_module_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_exp_modules_configure
</UL>

<P><STRONG><a name="[39d]"></a>pf_fspm_exp_submodule_ind</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, pf_fspm.o(i.pf_fspm_exp_submodule_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pf_fspm_exp_submodule_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_exp_submodule_configure
</UL>

<P><STRONG><a name="[487]"></a>pf_fspm_get_cfg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pf_fspm.o(i.pf_fspm_get_cfg))
<BR><BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_get_preferred_usi
</UL>

<P><STRONG><a name="[3dc]"></a>pf_fspm_get_default_cfg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pf_fspm.o(i.pf_fspm_get_default_cfg))
<BR><BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_set_default_cfg
</UL>

<P><STRONG><a name="[387]"></a>pf_fspm_get_min_device_interval</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pf_fspm.o(i.pf_fspm_get_min_device_interval))
<BR><BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_iocr_param
</UL>

<P><STRONG><a name="[4a5]"></a>pf_fspm_init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, pf_fspm.o(i.pf_fspm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = pf_fspm_init &rArr; pf_fspm_save_im &rArr; pf_file_save_if_modified &rArr; pf_file_load &rArr; pnal_load_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_validate_configuration
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_signal_led_ind
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_save_im
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_load_im
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init_only
</UL>

<P><STRONG><a name="[3e0]"></a>pf_fspm_reset_ind</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, pf_fspm.o(i.pf_fspm_reset_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pf_fspm_reset_ind &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_set_default_cfg
</UL>

<P><STRONG><a name="[1e3]"></a>pf_fspm_save_im</STRONG> (Thumb, 206 bytes, Stack size 392 bytes, pf_fspm.o(i.pf_fspm_save_im))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = pf_fspm_save_im &rArr; pf_file_save_if_modified &rArr; pf_file_load &rArr; pnal_load_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_save_if_modified
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_file_directory
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_init
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_cm_write_ind
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_worker_task
</UL>

<P><STRONG><a name="[474]"></a>pf_fspm_signal_led_ind</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, pf_fspm.o(i.pf_fspm_signal_led_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pf_fspm_signal_led_ind &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_control_signal_led
</UL>

<P><STRONG><a name="[3c2]"></a>pf_fspm_state_ind</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, pf_fspm.o(i.pf_fspm_state_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pf_fspm_state_ind &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_event_to_string
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_ind
</UL>

<P><STRONG><a name="[4a6]"></a>pf_fspm_validate_configuration</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, pf_fspm.o(i.pf_fspm_validate_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pf_fspm_validate_configuration &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_init
</UL>

<P><STRONG><a name="[54c]"></a>pf_generate_uuid</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, pf_cmrpc_helpers.o(i.pf_generate_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pf_generate_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_session_allocate
</UL>

<P><STRONG><a name="[434]"></a>pf_get_alarm_cr_request</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, pf_block_reader.o(i.pf_get_alarm_cr_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pf_get_alarm_cr_request &rArr; pf_get_uint32 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint32
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_interpret_ind
</UL>

<P><STRONG><a name="[336]"></a>pf_get_alarm_data</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, pf_block_reader.o(i.pf_get_alarm_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pf_get_alarm_data &rArr; pf_get_uint32 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint32
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_a_data_ind
</UL>

<P><STRONG><a name="[33c]"></a>pf_get_alarm_fixed</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, pf_block_reader.o(i.pf_get_alarm_fixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pf_get_alarm_fixed &rArr; pf_get_uint16 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_byte
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_periodic
</UL>

<P><STRONG><a name="[42f]"></a>pf_get_ar_param</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, pf_block_reader.o(i.pf_get_ar_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pf_get_ar_param &rArr; pf_get_uuid &rArr; pf_get_uint32 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint32
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_mem
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_bits
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_interpret_ind
</UL>

<P><STRONG><a name="[435]"></a>pf_get_ar_prm_server_request</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, pf_block_reader.o(i.pf_get_ar_prm_server_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pf_get_ar_prm_server_request &rArr; pf_get_uuid &rArr; pf_get_uint32 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint32
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_mem
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_interpret_ind
</UL>

<P><STRONG><a name="[437]"></a>pf_get_ar_rpc_request</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, pf_block_reader.o(i.pf_get_ar_rpc_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pf_get_ar_rpc_request &rArr; pf_get_uint16 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_interpret_ind
</UL>

<P><STRONG><a name="[438]"></a>pf_get_ar_vendor_request</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, pf_block_reader.o(i.pf_get_ar_vendor_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pf_get_ar_vendor_request &rArr; pf_get_uint32 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint32
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_interpret_ind
</UL>

<P><STRONG><a name="[4a8]"></a>pf_get_bits</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, pf_block_reader.o(i.pf_get_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pf_get_bits &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_port_data_adjust_peer_to_peer_boundary
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_iocr_param
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_interface_adjust
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_dce_rpc_header
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_ar_param
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_alarm_fixed
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_alarm_data
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_alarm_cr_request
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_exp_submodule
</UL>

<P><STRONG><a name="[332]"></a>pf_get_block_header</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pf_block_reader.o(i.pf_get_block_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pf_get_block_header &rArr; pf_get_uint16 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_port_data_check
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_port_data_adjust
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_write_interpret_ind
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_release_interpret_req
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_read_interpret_ind
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_dcontrol_interpret_req
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_interpret_ind
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_ccontrol_interpret_cnf
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_perform_one_write
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_a_data_ind
</UL>

<P><STRONG><a name="[25e]"></a>pf_get_byte</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, pf_block_reader.o(i.pf_get_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_write_request
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint32
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_read_request
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_port_data_check_check_peers
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_pnio_status
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_mcr_request
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_dce_rpc_header
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_block_header
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_alarm_fixed
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_handle
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_exp_submodule
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_dfp_iocr
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_check_peer
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_org_header_from_packet
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_port_id_from_packet
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_management_address_from_packet
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_link_status_from_packet
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_chassis_id_from_packet
</UL>

<P><STRONG><a name="[429]"></a>pf_get_control</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, pf_block_reader.o(i.pf_get_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pf_get_control &rArr; pf_get_uuid &rArr; pf_get_uint32 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_release_interpret_req
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_dcontrol_interpret_req
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_ccontrol_interpret_cnf
</UL>

<P><STRONG><a name="[410]"></a>pf_get_dce_rpc_header</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, pf_block_reader.o(i.pf_get_dce_rpc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pf_get_dce_rpc_header &rArr; pf_get_uuid &rArr; pf_get_uint32 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint32
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_byte
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_bits
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_dce_packet
</UL>

<P><STRONG><a name="[41e]"></a>pf_get_epm_lookup_request</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, pf_block_reader.o(i.pf_get_epm_lookup_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pf_get_epm_lookup_request &rArr; pf_get_uuid &rArr; pf_get_uint32 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint32
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uuid
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_lookup_ind
</UL>

<P><STRONG><a name="[433]"></a>pf_get_exp_api_module</STRONG> (Thumb, 384 bytes, Stack size 64 bytes, pf_block_reader.o(i.pf_get_exp_api_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pf_get_exp_api_module &rArr; pf_get_exp_submodule &rArr; pf_get_uint32 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint32
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_exp_submodule
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_interpret_ind
</UL>

<P><STRONG><a name="[4a3]"></a>pf_get_im_1</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pf_block_reader.o(i.pf_get_im_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pf_get_im_1 &rArr; pf_get_mem &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_cm_write_ind
</UL>

<P><STRONG><a name="[4af]"></a>pf_get_interface_adjust</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, pf_block_reader.o(i.pf_get_interface_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pf_get_interface_adjust &rArr; pf_get_uint32 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint32
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_mem
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_write_interface_adj
</UL>

<P><STRONG><a name="[431]"></a>pf_get_iocr_param</STRONG> (Thumb, 658 bytes, Stack size 32 bytes, pf_block_reader.o(i.pf_get_iocr_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pf_get_iocr_param &rArr; pf_get_iocr_api_entry &rArr; pf_get_frame_descriptor &rArr; pf_get_uint16 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint32
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_mem
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_bits
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_iocr_api_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_interpret_ind
</UL>

<P><STRONG><a name="[439]"></a>pf_get_ir_info_request</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, pf_block_reader.o(i.pf_get_ir_info_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pf_get_ir_info_request &rArr; pf_get_uuid &rArr; pf_get_uint32 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uuid
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_dfp_iocr
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_interpret_ind
</UL>

<P><STRONG><a name="[436]"></a>pf_get_mcr_request</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, pf_block_reader.o(i.pf_get_mcr_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pf_get_mcr_request &rArr; pf_get_uint16 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_mem
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_interpret_ind
</UL>

<P><STRONG><a name="[25f]"></a>pf_get_mem</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, pf_block_reader.o(i.pf_get_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pf_get_mem &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_port_data_check
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_port_data_adjust_peer_to_peer_boundary
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_port_data_adjust
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_mcr_request
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_iocr_param
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_interface_adjust
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_im_1
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_ar_vendor_request
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_ar_prm_server_request
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_ar_param
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uuid
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_handle
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_check_peer
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_org_header_from_packet
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_port_status_from_packet
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_port_id_from_packet
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_port_description_from_packet
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_management_address_from_packet
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_chassis_mac_from_packet
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_chassis_id_from_packet
</UL>

<P><STRONG><a name="[415]"></a>pf_get_ndr_data</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pf_block_reader.o(i.pf_get_ndr_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pf_get_ndr_data &rArr; pf_get_uint32 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint32
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_dce_packet
</UL>

<P><STRONG><a name="[335]"></a>pf_get_pnio_status</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pf_block_reader.o(i.pf_get_pnio_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pf_get_pnio_status &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_periodic
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_a_data_ind
</UL>

<P><STRONG><a name="[4b1]"></a>pf_get_port_data_adjust</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, pf_block_reader.o(i.pf_get_port_data_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pf_get_port_data_adjust &rArr; pf_get_block_header &rArr; pf_get_uint16 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_mem
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_write_data_adj
</UL>

<P><STRONG><a name="[4b2]"></a>pf_get_port_data_adjust_peer_to_peer_boundary</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, pf_block_reader.o(i.pf_get_port_data_adjust_peer_to_peer_boundary))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pf_get_port_data_adjust_peer_to_peer_boundary &rArr; pf_get_uint32 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint32
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_mem
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_write_data_adj
</UL>

<P><STRONG><a name="[4b3]"></a>pf_get_port_data_check</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, pf_block_reader.o(i.pf_get_port_data_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pf_get_port_data_check &rArr; pf_get_block_header &rArr; pf_get_uint16 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_mem
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_write_data_check
</UL>

<P><STRONG><a name="[4b4]"></a>pf_get_port_data_check_check_peers</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, pf_block_reader.o(i.pf_get_port_data_check_check_peers))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pf_get_port_data_check_check_peers &rArr; get_check_peer &rArr; pf_get_mem &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_byte
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_check_peer
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_write_data_check
</UL>

<P><STRONG><a name="[446]"></a>pf_get_read_request</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, pf_block_reader.o(i.pf_get_read_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pf_get_read_request &rArr; pf_get_uuid &rArr; pf_get_uint32 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint32
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_byte
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_read_interpret_ind
</UL>

<P><STRONG><a name="[337]"></a>pf_get_uint16</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, pf_block_reader.o(i.pf_get_uint16))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pf_get_uint16 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_write_request
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_read_request
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_port_data_check
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_port_data_adjust_peer_to_peer_boundary
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_port_data_adjust
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_mcr_request
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_ir_info_request
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_iocr_param
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_exp_api_module
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_epm_lookup_request
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_dce_rpc_header
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_control
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_block_header
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_ar_vendor_request
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_ar_rpc_request
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_ar_prm_server_request
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_ar_param
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_alarm_fixed
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_alarm_data
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_alarm_cr_request
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uuid
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_iocr_api_entry
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_handle
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_frame_descriptor
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_exp_submodule
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_dfp_iocr
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_periodic
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_a_data_ind
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_tlv_from_packet
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_ttl_from_packet
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_link_status_from_packet
</UL>

<P><STRONG><a name="[41b]"></a>pf_get_uint32</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, pf_block_reader.o(i.pf_get_uint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pf_get_uint32 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_write_request
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_read_request
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_port_data_adjust_peer_to_peer_boundary
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_ndr_data
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_iocr_param
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_interface_adjust
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_exp_api_module
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_epm_lookup_request
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_dce_rpc_header
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_ar_vendor_request
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_ar_prm_server_request
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_ar_param
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_alarm_data
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_alarm_cr_request
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uuid
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_iocr_api_entry
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_handle
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_exp_submodule
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_dce_packet
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_load
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_signal_delay_from_packet
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_management_address_from_packet
</UL>

<P><STRONG><a name="[44d]"></a>pf_get_write_request</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, pf_block_reader.o(i.pf_get_write_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pf_get_write_request &rArr; pf_get_uuid &rArr; pf_get_uint32 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint32
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_byte
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_write_interpret_ind
</UL>

<P><STRONG><a name="[3f1]"></a>pf_index_to_logstring</STRONG> (Thumb, 4876 bytes, Stack size 0 bytes, pf_cmrdr.o(i.pf_index_to_logstring))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmwrr_write
</UL>

<P><STRONG><a name="[4bf]"></a>pf_lldp_construct_frame</STRONG> (Thumb, 294 bytes, Stack size 656 bytes, pf_lldp.o(i.pf_lldp_construct_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = pf_lldp_construct_frame &rArr; pf_lldp_get_port_id &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_ip_to_string
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_ipaddr
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_device_macaddr
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_port_id
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_management_address
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_link_status
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_chassis_id
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_ttl_tlv
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_tlv_header
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_port_status
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_port_id_tlv
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_management
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_ieee_mac_phy
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_ethernet_header
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_chassis_mac
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_chassis_id_tlv
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_send
</UL>

<P><STRONG><a name="[4c4]"></a>pf_lldp_generate_alias_name</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, pf_lldp.o(i.pf_lldp_generate_alias_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pf_lldp_generate_alias_name &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_is_alias_matching
</UL>

<P><STRONG><a name="[4c0]"></a>pf_lldp_get_chassis_id</STRONG> (Thumb, 134 bytes, Stack size 264 bytes, pf_lldp.o(i.pf_lldp_get_chassis_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pf_lldp_get_chassis_id &rArr; pf_lldp_get_system_description &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_station_name
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_device_macaddr
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_system_description
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_construct_frame
</UL>

<P><STRONG><a name="[4c2]"></a>pf_lldp_get_link_status</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, pf_lldp.o(i.pf_lldp_get_link_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pf_lldp_get_link_status &rArr; pf_pdport_get_eth_status_filtered_mau &rArr; pf_pdport_get_eth_status &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_get_eth_status_filtered_mau
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_construct_frame
</UL>

<P><STRONG><a name="[4c3]"></a>pf_lldp_get_management_address</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, pf_lldp.o(i.pf_lldp_get_management_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pf_lldp_get_management_address
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_get_interface_index
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_ipaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_construct_frame
</UL>

<P><STRONG><a name="[4cd]"></a>pf_lldp_get_org_header_from_packet</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pf_lldp.o(i.pf_lldp_get_org_header_from_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pf_lldp_get_org_header_from_packet &rArr; pf_get_mem &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_mem
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_parse_packet
</UL>

<P><STRONG><a name="[4ce]"></a>pf_lldp_get_peer_port_id</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, pf_lldp.o(i.pf_lldp_get_peer_port_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pf_lldp_get_peer_port_id &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_check_peer_port_name
</UL>

<P><STRONG><a name="[4cf]"></a>pf_lldp_get_peer_port_name</STRONG> (Thumb, 138 bytes, Stack size 288 bytes, pf_lldp.o(i.pf_lldp_get_peer_port_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = pf_lldp_get_peer_port_name &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_read_ind
</UL>

<P><STRONG><a name="[4d0]"></a>pf_lldp_get_peer_station_name</STRONG> (Thumb, 188 bytes, Stack size 544 bytes, pf_lldp.o(i.pf_lldp_get_peer_station_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = pf_lldp_get_peer_station_name &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_mac_address_to_string
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_read_ind
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_check_peer_station_name
</UL>

<P><STRONG><a name="[4d2]"></a>pf_lldp_get_peer_timestamp</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, pf_lldp.o(i.pf_lldp_get_peer_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pf_lldp_get_peer_timestamp &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_check_no_peer_detected
</UL>

<P><STRONG><a name="[4c1]"></a>pf_lldp_get_port_id</STRONG> (Thumb, 128 bytes, Stack size 272 bytes, pf_lldp.o(i.pf_lldp_get_port_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = pf_lldp_get_port_id &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_station_name
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_device_macaddr
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_mac_address_to_string
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_construct_frame
</UL>

<P><STRONG><a name="[4c6]"></a>pf_lldp_get_system_description</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, pf_lldp.o(i.pf_lldp_get_system_description))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pf_lldp_get_system_description &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_chassis_id
</UL>

<P><STRONG><a name="[4d7]"></a>pf_lldp_get_tlv_from_packet</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, pf_lldp.o(i.pf_lldp_get_tlv_from_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pf_lldp_get_tlv_from_packet &rArr; pf_get_uint16 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_parse_packet
</UL>

<P><STRONG><a name="[4d9]"></a>pf_lldp_init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, pf_lldp.o(i.pf_lldp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pf_lldp_init &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_init_handle
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_init_iterator_over_ports
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_next
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init_only
</UL>

<P><STRONG><a name="[4da]"></a>pf_lldp_invalidate_peer_info</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, pf_lldp.o(i.pf_lldp_invalidate_peer_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pf_lldp_invalidate_peer_info &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_handle_link_down
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_receive_timeout
</UL>

<P><STRONG><a name="[47c]"></a>pf_lldp_is_alias_matching</STRONG> (Thumb, 96 bytes, Stack size 288 bytes, pf_lldp.o(i.pf_lldp_is_alias_matching))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = pf_lldp_is_alias_matching &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_init_iterator_over_ports
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_next
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_generate_alias_name
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_identify_req
</UL>

<P><STRONG><a name="[4d1]"></a>pf_lldp_mac_address_to_string</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, pf_lldp.o(i.pf_lldp_mac_address_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pf_lldp_mac_address_to_string &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_station_name
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_port_id
</UL>

<P><STRONG><a name="[4db]"></a>pf_lldp_parse_packet</STRONG> (Thumb, 476 bytes, Stack size 104 bytes, pf_lldp.o(i.pf_lldp_parse_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = pf_lldp_parse_packet &rArr; pf_lldp_get_tlv_from_packet &rArr; pf_get_uint16 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_tlv_from_packet
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_org_header_from_packet
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_management_address_is_ipv4
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_ttl_from_packet
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_signal_delay_from_packet
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_port_status_from_packet
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_port_id_from_packet
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_port_description_from_packet
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_management_address_from_packet
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_link_status_from_packet
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_chassis_mac_from_packet
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_chassis_id_from_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_recv
</UL>

<P><STRONG><a name="[49a]"></a>pf_lldp_recv</STRONG> (Thumb, 246 bytes, Stack size 752 bytes, pf_lldp.o(i.pf_lldp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = pf_lldp_recv &rArr; pf_lldp_update_peer &rArr; pf_lldp_restart_peer_timeout &rArr; pf_scheduler_remove_if_running &rArr; pf_scheduler_remove &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_buf_free
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_is_valid
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_update_peer
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_parse_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_recv
</UL>

<P><STRONG><a name="[4e0]"></a>pf_lldp_restart_peer_timeout</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, pf_lldp.o(i.pf_lldp_restart_peer_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pf_lldp_restart_peer_timeout &rArr; pf_scheduler_remove_if_running &rArr; pf_scheduler_remove &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_remove_if_running
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_load
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_update_peer
</UL>

<P><STRONG><a name="[4e2]"></a>pf_lldp_send_disable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pf_lldp.o(i.pf_lldp_send_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = pf_lldp_send_disable &rArr; pf_scheduler_remove_if_running &rArr; pf_scheduler_remove &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_remove_if_running
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_lldp_restart_transmission
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_ar_connect_ind
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_write_data_adj
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_load
</UL>

<P><STRONG><a name="[4e3]"></a>pf_lldp_send_enable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pf_lldp.o(i.pf_lldp_send_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = pf_lldp_send_enable &rArr; pf_lldp_tx_restart &rArr; pf_lldp_send &rArr; pf_lldp_construct_frame &rArr; pf_lldp_get_port_id &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_tx_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_lldp_restart_transmission
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_ar_connect_ind
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_write_data_adj
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_load
</UL>

<P><STRONG><a name="[4e5]"></a>pf_lldp_stop_peer_timeout</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pf_lldp.o(i.pf_lldp_stop_peer_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = pf_lldp_stop_peer_timeout &rArr; pf_scheduler_remove_if_running &rArr; pf_scheduler_remove &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_remove_if_running
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_handle_link_down
</UL>

<P><STRONG><a name="[4e6]"></a>pf_lldp_store_peer_info</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, pf_lldp.o(i.pf_lldp_store_peer_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pf_lldp_store_peer_info &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_get_system_uptime_10ms
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_update_peer
</UL>

<P><STRONG><a name="[4df]"></a>pf_lldp_update_peer</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, pf_lldp.o(i.pf_lldp_update_peer))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pf_lldp_update_peer &rArr; pf_lldp_restart_peer_timeout &rArr; pf_scheduler_remove_if_running &rArr; pf_scheduler_remove &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_restart_peer_timeout
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_peer_indication
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_store_peer_info
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_recv
</UL>

<P><STRONG><a name="[3b8]"></a>pf_pdport_ar_connect_ind</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, pf_pdport.o(i.pf_pdport_ar_connect_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = pf_pdport_ar_connect_ind &rArr; pf_lldp_send_enable &rArr; pf_lldp_tx_restart &rArr; pf_lldp_send &rArr; pf_lldp_construct_frame &rArr; pf_lldp_get_port_id &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_init_iterator_over_ports
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_next
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_send_enable
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_send_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_connect_ind
</UL>

<P><STRONG><a name="[4ee]"></a>pf_pdport_get_eth_status</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, pf_pdport.o(i.pf_pdport_get_eth_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pf_pdport_get_eth_status &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_is_a_fast_port_in_use
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_get_eth_status_filtered_mau
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_monitor_link
</UL>

<P><STRONG><a name="[4c9]"></a>pf_pdport_get_eth_status_filtered_mau</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, pf_pdport.o(i.pf_pdport_get_eth_status_filtered_mau))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = pf_pdport_get_eth_status_filtered_mau &rArr; pf_pdport_get_eth_status &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_config
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_get_eth_status
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_filter_mau_type
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_read_ind
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_link_status
</UL>

<P><STRONG><a name="[4f3]"></a>pf_pdport_init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, pf_pdport.o(i.pf_pdport_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2424<LI>Call Chain = pf_pdport_init &rArr; pf_pdport_save &rArr; pf_file_save_if_modified &rArr; pf_file_load &rArr; pnal_load_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_init_iterator_over_ports
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_next
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_save
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_load
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init_only
</UL>

<P><STRONG><a name="[389]"></a>pf_pdport_is_a_fast_port_in_use</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, pf_pdport.o(i.pf_pdport_is_a_fast_port_in_use))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pf_pdport_is_a_fast_port_in_use &rArr; pf_pdport_get_eth_status &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_init_iterator_over_ports
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_next
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_config
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_get_eth_status
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_pdev
</UL>

<P><STRONG><a name="[42e]"></a>pf_pdport_lldp_restart_transmission</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, pf_pdport.o(i.pf_pdport_lldp_restart_transmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = pf_pdport_lldp_restart_transmission &rArr; pf_lldp_send_enable &rArr; pf_lldp_tx_restart &rArr; pf_lldp_send &rArr; pf_lldp_construct_frame &rArr; pf_lldp_get_port_id &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_init_iterator_over_ports
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_next
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_send_enable
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_send_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_ind
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_write_interface_adj
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_get_set
</UL>

<P><STRONG><a name="[4dd]"></a>pf_pdport_peer_indication</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, pf_pdport.o(i.pf_pdport_peer_indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pf_pdport_peer_indication &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_handle_link_down
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_update_peer
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_receive_timeout
</UL>

<P><STRONG><a name="[4f7]"></a>pf_pdport_periodic</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, pf_pdport.o(i.pf_pdport_periodic))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = pf_pdport_periodic &rArr; pf_pdport_run_peer_check &rArr; pf_pdport_check_peer_station_name &rArr; pf_lldp_get_peer_station_name &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_init_iterator_over_ports
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_next
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_run_peer_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_handle_periodic
</UL>

<P><STRONG><a name="[406]"></a>pf_pdport_read_ind</STRONG> (Thumb, 898 bytes, Stack size 672 bytes, pf_pdport.o(i.pf_pdport_read_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = pf_pdport_read_ind &rArr; pf_lldp_get_peer_station_name &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_get_port_statistics
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_statistics
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_data_real
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_data_check
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_data_adj
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pd_multiblock_port_and_statistics
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pd_multiblock_interface_and_statistics
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pd_interface_adj
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_subslot_is_dap_port_id
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_dap_subslot_to_local_port
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_init_iterator_over_ports
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_next
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_netmask
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_ipaddr
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_gateway
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_station_name
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_device_macaddr
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_loc_port_num_to_dap_subslot
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_media_type
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_station_name
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_port_name
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_get_eth_status_filtered_mau
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
</UL>

<P><STRONG><a name="[3b2]"></a>pf_pdport_reset_all</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, pf_pdport.o(i.pf_pdport_reset_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = pf_pdport_reset_all &rArr; pf_pdport_remove_all_diag &rArr; pf_diag_std_remove &rArr; pf_diag_remove &rArr; pf_alarm_send_diagnosis &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_init_iterator_over_ports
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_next
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_bg_worker_start_job
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_remove_all_diag
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_reset_observers
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_set_default_cfg
</UL>

<P><STRONG><a name="[1e4]"></a>pf_pdport_save_all</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, pf_pdport.o(i.pf_pdport_save_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 2424<LI>Call Chain = pf_pdport_save_all &rArr; pf_pdport_save &rArr; pf_file_save_if_modified &rArr; pf_file_load &rArr; pnal_load_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_init_iterator_over_ports
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_next
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_save
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_worker_task
</UL>

<P><STRONG><a name="[503]"></a>pf_pdport_start_linkmonitor</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pf_pdport.o(i.pf_pdport_start_linkmonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = pf_pdport_start_linkmonitor &rArr; pf_scheduler_add &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_main_interface_init
</UL>

<P><STRONG><a name="[1e5]"></a>pf_pdport_update_eth_status</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, pf_pdport.o(i.pf_pdport_update_eth_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pf_pdport_update_eth_status &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_eth_get_status
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_init_iterator_over_ports
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_worker_task
</UL>

<P><STRONG><a name="[464]"></a>pf_pdport_write_req</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, pf_pdport.o(i.pf_pdport_write_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = pf_pdport_write_req &rArr; pf_pdport_write_data_check &rArr; pf_pdport_run_peer_check &rArr; pf_pdport_check_peer_station_name &rArr; pf_lldp_get_peer_station_name &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_dap_subslot_to_local_port
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_bg_worker_start_job
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_write_interface_adj
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_write_data_check
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_write_data_adj
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmwrr_write
</UL>

<P><STRONG><a name="[3f2]"></a>pf_port_dap_subslot_to_local_port</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pf_port.o(i.pf_port_dap_subslot_to_local_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pf_port_dap_subslot_to_local_port &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_subslot_is_dap_port_id
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_read_ind
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_write_req
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmwrr_write
</UL>

<P><STRONG><a name="[497]"></a>pf_port_get_config</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pf_port.o(i.pf_port_get_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pf_port_get_config &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_is_a_fast_port_in_use
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_init
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_get_eth_status_filtered_mau
</UL>

<P><STRONG><a name="[4f9]"></a>pf_port_get_media_type</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, pf_port.o(i.pf_port_get_media_type))
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_read_ind
</UL>

<P><STRONG><a name="[495]"></a>pf_port_get_next</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, pf_port.o(i.pf_port_get_next))
<BR><BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_lldp_restart_transmission
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_read_ind
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_reset_all
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_is_a_fast_port_in_use
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_ar_connect_ind
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_init
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_init
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_update_eth_status
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_save_all
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_periodic
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_init
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_is_alias_matching
</UL>

<P><STRONG><a name="[4e8]"></a>pf_port_get_next_repeat_cyclic</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pf_port.o(i.pf_port_get_next_repeat_cyclic))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_trigger_linkmonitor
</UL>

<P><STRONG><a name="[465]"></a>pf_port_get_number_of_ports</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pf_port.o(i.pf_port_get_number_of_ports))
<BR><BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_activate_req
</UL>

<P><STRONG><a name="[499]"></a>pf_port_get_port_number</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, pf_port.o(i.pf_port_get_port_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pf_port_get_port_number
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_recv
</UL>

<P><STRONG><a name="[496]"></a>pf_port_get_state</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pf_port.o(i.pf_port_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_lldp_restart_transmission
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_read_ind
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_reset_all
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_ar_connect_ind
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_init
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_init
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_init
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_stop_peer_timeout
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_send_disable
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_restart_peer_timeout
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_invalidate_peer_info
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_timestamp
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_station_name
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_port_name
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_port_id
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_update_eth_status
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_periodic
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_peer_indication
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_get_eth_status
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_write_data_check
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_write_data_adj
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_save
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_run_peer_check
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_monitor_link
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_load
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_check_peer_station_name
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_check_peer_port_name
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_send_on_physical_port
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_is_alias_matching
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_update_peer
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_store_peer_info
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_port_id
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_construct_frame
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_tx_restart
</UL>

<P><STRONG><a name="[508]"></a>pf_port_init</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, pf_port.o(i.pf_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pf_port_init &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_init_iterator_over_ports
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_next
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init_only
</UL>

<P><STRONG><a name="[494]"></a>pf_port_init_iterator_over_ports</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pf_port.o(i.pf_port_init_iterator_over_ports))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pf_port_init_iterator_over_ports &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_lldp_restart_transmission
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_read_ind
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_reset_all
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_is_a_fast_port_in_use
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_ar_connect_ind
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_init
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_init
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_main_interface_init
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_update_eth_status
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_save_all
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_periodic
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_init
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_is_alias_matching
</UL>

<P><STRONG><a name="[4de]"></a>pf_port_is_valid</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pf_port.o(i.pf_port_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_dap_subslot_to_local_port
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_loc_port_num_to_dap_subslot
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_config
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_recv
</UL>

<P><STRONG><a name="[4f6]"></a>pf_port_loc_port_num_to_dap_subslot</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pf_port.o(i.pf_port_loc_port_num_to_dap_subslot))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pf_port_loc_port_num_to_dap_subslot &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_read_ind
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_init_diag_source
</UL>

<P><STRONG><a name="[509]"></a>pf_port_main_interface_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, pf_port.o(i.pf_port_main_interface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pf_port_main_interface_init &rArr; pf_pdport_start_linkmonitor &rArr; pf_scheduler_add &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_init_handle
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_init_iterator_over_ports
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_start_linkmonitor
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init_only
</UL>

<P><STRONG><a name="[3f0]"></a>pf_port_subslot_is_dap_port_id</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pf_port.o(i.pf_port_subslot_is_dap_port_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pf_port_subslot_is_dap_port_id &rArr; pf_port_dap_subslot_to_local_port &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_dap_subslot_to_local_port
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_read_ind
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmwrr_write
</UL>

<P><STRONG><a name="[456]"></a>pf_ppm_activate_req</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, pf_ppm.o(i.pf_ppm_activate_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pf_ppm_activate_req &rArr; pf_ppm_finish_buffer &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_current_time_us
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_state_ind
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_set_state
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_finish_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_cmdev_state_ind
</UL>

<P><STRONG><a name="[512]"></a>pf_ppm_calculate_next_cyclecounter</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, pf_ppm.o(i.pf_ppm_calculate_next_cyclecounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pf_ppm_calculate_next_cyclecounter
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_finish_buffer
</UL>

<P><STRONG><a name="[457]"></a>pf_ppm_close_req</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, pf_ppm.o(i.pf_ppm_close_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pf_ppm_close_req &rArr; pnal_buf_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_buf_free
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_destroy
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_cmdev_state_ind
</UL>

<P><STRONG><a name="[45f]"></a>pf_ppm_create</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, pf_ppm.o(i.pf_ppm_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pf_ppm_create &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_buf_alloc
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_init_cr_config
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_init_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_start_req
</UL>

<P><STRONG><a name="[50f]"></a>pf_ppm_driver_sw_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pf_ppm_driver_sw.o(i.pf_ppm_driver_sw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pf_ppm_driver_sw_init &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_init
</UL>

<P><STRONG><a name="[f8]"></a>pf_ppm_drv_sw_activate_req</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_activate_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pf_ppm_drv_sw_activate_req &rArr; pf_scheduler_add &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_init_handle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pf_ppm_driver_sw.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>pf_ppm_drv_sw_close_req</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_close_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pf_ppm_drv_sw_close_req &rArr; pf_scheduler_remove_if_running &rArr; pf_scheduler_remove &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_remove_if_running
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pf_ppm_driver_sw.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>pf_ppm_drv_sw_create</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_create))
<BR>[Address Reference Count : 1]<UL><LI> pf_ppm_driver_sw.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>pf_ppm_drv_sw_read_data_and_iops</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_read_data_and_iops))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pf_ppm_drv_sw_read_data_and_iops &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_read_frame_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pf_ppm_driver_sw.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>pf_ppm_drv_sw_read_iocs</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_read_iocs))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pf_ppm_drv_sw_read_iocs &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_read_frame_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pf_ppm_driver_sw.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>pf_ppm_drv_sw_show</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pf_ppm_drv_sw_show &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pf_ppm_driver_sw.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>pf_ppm_drv_sw_write_data_and_iops</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_write_data_and_iops))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pf_ppm_drv_sw_write_data_and_iops &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_write_frame_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pf_ppm_driver_sw.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>pf_ppm_drv_sw_write_data_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_write_data_status))
<BR>[Address Reference Count : 1]<UL><LI> pf_ppm_driver_sw.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>pf_ppm_drv_sw_write_iocs</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_write_iocs))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pf_ppm_drv_sw_write_iocs &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_write_frame_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pf_ppm_driver_sw.o(.constdata)
</UL>
<P><STRONG><a name="[50b]"></a>pf_ppm_finish_buffer</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, pf_ppm.o(i.pf_ppm_finish_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pf_ppm_finish_buffer &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_calculate_next_cyclecounter
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_activate_req
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_send
</UL>

<P><STRONG><a name="[38d]"></a>pf_ppm_get_ar_iocr_desc</STRONG> (Thumb, 268 bytes, Stack size 64 bytes, pf_ppm.o(i.pf_ppm_get_ar_iocr_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pf_ppm_get_ar_iocr_desc &rArr; pf_cmdev_get_subslot_full &rArr; pf_cmdev_get_api &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_subslot_full
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_cm_ccontrol_req
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_get_iocs
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_get_data_and_iops
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_set_iocs
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_set_data_and_iops
</UL>

<P><STRONG><a name="[3fd]"></a>pf_ppm_get_data_and_iops</STRONG> (Thumb, 296 bytes, Stack size 80 bytes, pf_ppm.o(i.pf_ppm_get_data_and_iops))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = pf_ppm_get_data_and_iops &rArr; pf_ppm_get_ar_iocr_desc &rArr; pf_cmdev_get_subslot_full &rArr; pf_cmdev_get_api &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_get_ar_iocr_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
</UL>

<P><STRONG><a name="[52b]"></a>pf_ppm_get_data_status</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pf_ppm.o(i.pf_ppm_get_data_status))
<BR><BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_iocr
</UL>

<P><STRONG><a name="[401]"></a>pf_ppm_get_iocs</STRONG> (Thumb, 256 bytes, Stack size 64 bytes, pf_ppm.o(i.pf_ppm_get_iocs))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = pf_ppm_get_iocs &rArr; pf_ppm_get_ar_iocr_desc &rArr; pf_cmdev_get_subslot_full &rArr; pf_cmdev_get_api &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_get_ar_iocr_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
</UL>

<P><STRONG><a name="[513]"></a>pf_ppm_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pf_ppm.o(i.pf_ppm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pf_ppm_init &rArr; pf_ppm_driver_sw_init &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_driver_sw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init_only
</UL>

<P><STRONG><a name="[514]"></a>pf_ppm_set_data_and_iops</STRONG> (Thumb, 228 bytes, Stack size 80 bytes, pf_ppm.o(i.pf_ppm_set_data_and_iops))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = pf_ppm_set_data_and_iops &rArr; pf_ppm_get_ar_iocr_desc &rArr; pf_cmdev_get_subslot_full &rArr; pf_cmdev_get_api &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_get_ar_iocr_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_input_set_data_and_iops
</UL>

<P><STRONG><a name="[55c]"></a>pf_ppm_set_data_status_provider</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, pf_ppm.o(i.pf_ppm_set_data_status_provider))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pf_ppm_set_data_status_provider
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_set_provider_state
</UL>

<P><STRONG><a name="[55d]"></a>pf_ppm_set_data_status_redundancy</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, pf_ppm.o(i.pf_ppm_set_data_status_redundancy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pf_ppm_set_data_status_redundancy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_set_redundancy_state
</UL>

<P><STRONG><a name="[55b]"></a>pf_ppm_set_data_status_state</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, pf_ppm.o(i.pf_ppm_set_data_status_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pf_ppm_set_data_status_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_set_primary_state
</UL>

<P><STRONG><a name="[515]"></a>pf_ppm_set_iocs</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, pf_ppm.o(i.pf_ppm_set_iocs))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = pf_ppm_set_iocs &rArr; pf_ppm_get_ar_iocr_desc &rArr; pf_cmdev_get_subslot_full &rArr; pf_cmdev_get_api &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_get_ar_iocr_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_output_set_iocs
</UL>

<P><STRONG><a name="[48e]"></a>pf_ppm_set_problem_indicator</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, pf_ppm.o(i.pf_ppm_set_problem_indicator))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pf_ppm_set_problem_indicator
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_update_station_problem_indicator
</UL>

<P><STRONG><a name="[50a]"></a>pf_ppm_set_state</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, pf_ppm.o(i.pf_ppm_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pf_ppm_set_state &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_state_to_string
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_close_req
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_activate_req
</UL>

<P><STRONG><a name="[50c]"></a>pf_ppm_state_ind</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, pf_ppm.o(i.pf_ppm_state_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pf_ppm_state_ind &rArr; pf_cmsu_ppm_error_ind &rArr;  pf_cmdev_state_ind (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_ppm_error_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_activate_req
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_send
</UL>

<P><STRONG><a name="[516]"></a>pf_ppm_state_to_string</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pf_ppm.o(i.pf_ppm_state_to_string))
<BR><BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_set_state
</UL>

<P><STRONG><a name="[347]"></a>pf_put_alarm_block</STRONG> (Thumb, 426 bytes, Stack size 80 bytes, pf_block_writer.o(i.pf_put_alarm_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pf_put_alarm_block &rArr; pf_put_maint_status &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pnet_status
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_maint_status
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_diag_item
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_a_data_req
</UL>

<P><STRONG><a name="[43c]"></a>pf_put_alarm_cr_result</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, pf_block_writer.o(i.pf_put_alarm_cr_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pf_put_alarm_cr_result &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_rsp
</UL>

<P><STRONG><a name="[346]"></a>pf_put_alarm_fixed</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, pf_block_writer.o(i.pf_put_alarm_fixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pf_put_alarm_fixed &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_a_data_req
</UL>

<P><STRONG><a name="[404]"></a>pf_put_ar_data</STRONG> (Thumb, 356 bytes, Stack size 88 bytes, pf_block_writer.o(i.pf_put_ar_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pf_put_ar_data &rArr; pf_put_one_ar &rArr; pf_put_iocr &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_device
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_find_by_index
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_one_ar
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
</UL>

<P><STRONG><a name="[405]"></a>pf_put_ar_diff</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, pf_block_writer.o(i.pf_put_ar_diff))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = pf_put_ar_diff &rArr; pf_put_api_diff &rArr; pf_put_module_diff &rArr; pf_put_submodule_diff &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_api_diff
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_rsp
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_ccontrol_req
</UL>

<P><STRONG><a name="[43a]"></a>pf_put_ar_result</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, pf_block_writer.o(i.pf_put_ar_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pf_put_ar_result &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uuid
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_rsp
</UL>

<P><STRONG><a name="[43d]"></a>pf_put_ar_rpc_result</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, pf_block_writer.o(i.pf_put_ar_rpc_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pf_put_ar_rpc_result &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_rsp
</UL>

<P><STRONG><a name="[43e]"></a>pf_put_ar_server_result</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, pf_block_writer.o(i.pf_put_ar_server_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pf_put_ar_server_result &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_padding_align
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_rsp
</UL>

<P><STRONG><a name="[43f]"></a>pf_put_ar_vendor_result</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, pf_block_writer.o(i.pf_put_ar_vendor_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pf_put_ar_vendor_result &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_padding_align
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_rsp
</UL>

<P><STRONG><a name="[47f]"></a>pf_put_byte</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, pf_block_writer.o(i.pf_put_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_write_result
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_read_result
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_data_real
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_data_check
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdinterface_data_real
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_padding_align
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_padding
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_output_data
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_maint_status
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_input_data
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_im_0
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_dce_rpc_header
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_control
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_alarm_fixed
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_str
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_uuid
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_floor_5_ip
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_floor_4_udp
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_floor_3_rpc
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_floor_1_uuid
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_one_ar
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_iocr
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_put_block
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_port_status
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_port_id_tlv
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_pnio_header
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_management
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_ieee_mac_phy
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_chassis_mac
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_chassis_id_tlv
</UL>

<P><STRONG><a name="[42a]"></a>pf_put_control</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, pf_block_writer.o(i.pf_put_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pf_put_control &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uuid
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_release_rsp
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_dcontrol_rsp
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_ccontrol_req
</UL>

<P><STRONG><a name="[413]"></a>pf_put_dce_rpc_header</STRONG> (Thumb, 486 bytes, Stack size 32 bytes, pf_block_writer.o(i.pf_put_dce_rpc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pf_put_dce_rpc_header &rArr; pf_put_uuid &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uuid
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_dce_packet
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_ccontrol_req
</UL>

<P><STRONG><a name="[403]"></a>pf_put_diag_data</STRONG> (Thumb, 72 bytes, Stack size 88 bytes, pf_block_writer.o(i.pf_put_diag_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = pf_put_diag_data &rArr; pf_put_diag_device &rArr; pf_put_diag_api &rArr; pf_put_diag_slot &rArr; pf_put_diag_subslot &rArr; pf_put_diag_list &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_device
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_diag_device
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
</UL>

<P><STRONG><a name="[3fc]"></a>pf_put_ident_data</STRONG> (Thumb, 168 bytes, Stack size 104 bytes, pf_block_writer.o(i.pf_put_ident_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = pf_put_ident_data &rArr; pf_put_ident_device &rArr; pf_put_ident_api &rArr; pf_put_ident_slot &rArr; pf_put_ident_subslot &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_device
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ident_device
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
</UL>

<P><STRONG><a name="[3f6]"></a>pf_put_im_0</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, pf_block_writer.o(i.pf_put_im_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pf_put_im_0 &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_str
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
</UL>

<P><STRONG><a name="[3f5]"></a>pf_put_im_0_filter_data</STRONG> (Thumb, 234 bytes, Stack size 72 bytes, pf_block_writer.o(i.pf_put_im_0_filter_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = pf_put_im_0_filter_data &rArr; pf_put_ident_device &rArr; pf_put_ident_api &rArr; pf_put_ident_slot &rArr; pf_put_ident_subslot &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_device
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ident_device
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
</UL>

<P><STRONG><a name="[3f7]"></a>pf_put_im_1</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, pf_block_writer.o(i.pf_put_im_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pf_put_im_1 &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_str
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
</UL>

<P><STRONG><a name="[3f8]"></a>pf_put_im_2</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, pf_block_writer.o(i.pf_put_im_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pf_put_im_2 &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_str
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
</UL>

<P><STRONG><a name="[3f9]"></a>pf_put_im_3</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, pf_block_writer.o(i.pf_put_im_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pf_put_im_3 &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_str
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
</UL>

<P><STRONG><a name="[3ff]"></a>pf_put_input_data</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, pf_block_writer.o(i.pf_put_input_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pf_put_input_data &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
</UL>

<P><STRONG><a name="[43b]"></a>pf_put_iocr_result</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, pf_block_writer.o(i.pf_put_iocr_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pf_put_iocr_result &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_rsp
</UL>

<P><STRONG><a name="[3fb]"></a>pf_put_log_book_data</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, pf_block_writer.o(i.pf_put_log_book_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pf_put_log_book_data &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_time_timestamp
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pnet_status
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uuid
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
</UL>

<P><STRONG><a name="[420]"></a>pf_put_lookup_response_data</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, pf_block_writer.o(i.pf_put_lookup_response_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pf_put_lookup_response_data &rArr; pf_put_rpc_epm_entry &rArr; pf_put_tower_entry &rArr; pf_put_rpc_floor_2_uuid &rArr; pf_put_rpc_floor_1_uuid &rArr; pf_put_rpc_uuid &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_padding_align
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_handle
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_epm_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_lookup_request
</UL>

<P><STRONG><a name="[519]"></a>pf_put_maint_status</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, pf_block_writer.o(i.pf_put_maint_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pf_put_maint_status &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_alarm_block
</UL>

<P><STRONG><a name="[344]"></a>pf_put_mem</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, pf_block_writer.o(i.pf_put_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pf_put_mem &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_substitute_data
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_record_data_read
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_data_real
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_data_check
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdinterface_data_real
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_output_data
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_input_data
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_vendor_result
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_server_result
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_result
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_alarm_block
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uuid
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_uuid
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_epm_annotation
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_one_ar
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_diag_item
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_put_block
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_a_data_req
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_port_id_tlv
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_management
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_ethernet_header
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_chassis_id_tlv
</UL>

<P><STRONG><a name="[419]"></a>pf_put_mem_overlapping</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, pf_block_writer.o(i.pf_put_mem_overlapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pf_put_mem_overlapping &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_dce_packet
</UL>

<P><STRONG><a name="[402]"></a>pf_put_output_data</STRONG> (Thumb, 230 bytes, Stack size 96 bytes, pf_block_writer.o(i.pf_put_output_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pf_put_output_data &rArr; pf_put_substitute_data &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_substitute_data
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
</UL>

<P><STRONG><a name="[539]"></a>pf_put_padding</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, pf_block_writer.o(i.pf_put_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pf_put_padding &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_write_result
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_read_result
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_peer_to_peer_boundary
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_statistics
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_data_real
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_data_check
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_data_adj
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdinterface_data_real
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pd_multiblock_port_and_statistics
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pd_multiblock_interface_and_statistics
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pd_interface_adj
</UL>

<P><STRONG><a name="[51f]"></a>pf_put_padding_align</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, pf_block_writer.o(i.pf_put_padding_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pf_put_padding_align &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_data_real
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_data_check
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdinterface_data_real
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pd_interface_adj
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_lookup_response_data
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_vendor_result
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_server_result
</UL>

<P><STRONG><a name="[501]"></a>pf_put_pd_interface_adj</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, pf_block_writer.o(i.pf_put_pd_interface_adj))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pf_put_pd_interface_adj &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_padding_align
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_padding
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_read_ind
</UL>

<P><STRONG><a name="[4fe]"></a>pf_put_pd_multiblock_interface_and_statistics</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, pf_block_writer.o(i.pf_put_pd_multiblock_interface_and_statistics))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pf_put_pd_multiblock_interface_and_statistics &rArr; pf_put_pdinterface_data_real &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_statistics
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdinterface_data_real
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_padding
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_read_ind
</UL>

<P><STRONG><a name="[4ff]"></a>pf_put_pd_multiblock_port_and_statistics</STRONG> (Thumb, 192 bytes, Stack size 72 bytes, pf_block_writer.o(i.pf_put_pd_multiblock_port_and_statistics))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pf_put_pd_multiblock_port_and_statistics &rArr; pf_put_pdport_data_real &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_statistics
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_data_real
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_padding
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_read_ind
</UL>

<P><STRONG><a name="[40a]"></a>pf_put_pdinterface_data_real</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, pf_block_writer.o(i.pf_put_pdinterface_data_real))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pf_put_pdinterface_data_real &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_padding_align
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_padding
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pd_multiblock_interface_and_statistics
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
</UL>

<P><STRONG><a name="[4fb]"></a>pf_put_pdport_data_adj</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, pf_block_writer.o(i.pf_put_pdport_data_adj))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pf_put_pdport_data_adj &rArr; pf_put_peer_to_peer_boundary &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_peer_to_peer_boundary
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_padding
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_read_ind
</UL>

<P><STRONG><a name="[4fc]"></a>pf_put_pdport_data_check</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, pf_block_writer.o(i.pf_put_pdport_data_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pf_put_pdport_data_check &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_padding_align
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_padding
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_read_ind
</UL>

<P><STRONG><a name="[4fa]"></a>pf_put_pdport_data_real</STRONG> (Thumb, 468 bytes, Stack size 80 bytes, pf_block_writer.o(i.pf_put_pdport_data_real))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = pf_put_pdport_data_real &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_padding_align
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_padding
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pd_multiblock_port_and_statistics
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_read_ind
</UL>

<P><STRONG><a name="[500]"></a>pf_put_pdport_statistics</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, pf_block_writer.o(i.pf_put_pdport_statistics))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pf_put_pdport_statistics &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_padding
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pd_multiblock_port_and_statistics
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pd_multiblock_interface_and_statistics
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_read_ind
</UL>

<P><STRONG><a name="[53a]"></a>pf_put_peer_to_peer_boundary</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, pf_block_writer.o(i.pf_put_peer_to_peer_boundary))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pf_put_peer_to_peer_boundary &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_padding
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_data_adj
</UL>

<P><STRONG><a name="[348]"></a>pf_put_pnet_status</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, pf_block_writer.o(i.pf_put_pnet_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pf_put_pnet_status &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_write_result
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_log_book_data
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_alarm_block
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_write_ind
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_release_rsp
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_release_ind
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_read_ind
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_dcontrol_rsp
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_rsp
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_a_data_req
</UL>

<P><STRONG><a name="[3f4]"></a>pf_put_read_result</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, pf_block_writer.o(i.pf_put_read_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pf_put_read_result &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_padding
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uuid
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
</UL>

<P><STRONG><a name="[3fa]"></a>pf_put_record_data_read</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, pf_block_writer.o(i.pf_put_record_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pf_put_record_data_read &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
</UL>

<P><STRONG><a name="[538]"></a>pf_put_substitute_data</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, pf_block_writer.o(i.pf_put_substitute_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pf_put_substitute_data &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_output_data
</UL>

<P><STRONG><a name="[52d]"></a>pf_put_time_timestamp</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, pf_block_writer.o(i.pf_put_time_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pf_put_time_timestamp &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_log_book_data
</UL>

<P><STRONG><a name="[345]"></a>pf_put_uint16</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, pf_block_writer.o(i.pf_put_uint16))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_write_result
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_time_timestamp
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_substitute_data
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_record_data_read
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_read_result
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_peer_to_peer_boundary
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_statistics
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_data_real
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_data_check
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_data_adj
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdinterface_data_real
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pd_multiblock_port_and_statistics
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pd_multiblock_interface_and_statistics
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pd_interface_adj
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_output_data
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_maint_status
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_log_book_data
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_iocr_result
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_input_data
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_im_3
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_im_2
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_im_1
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_im_0_filter_data
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_im_0
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ident_data
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_dce_rpc_header
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_control
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_vendor_result
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_server_result
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_rpc_result
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_result
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_diff
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_data
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_alarm_fixed
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_alarm_cr_result
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_alarm_block
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uuid
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_submodule_diff
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_uuid
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_floor_count
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_floor_5_ip
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_floor_4_udp
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_floor_3_rpc
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_floor_1_uuid
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_one_ar
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_module_diff
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_iocr
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ident_subslot
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ident_slot
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ident_device
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ident_api
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_diag_list
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_diag_item
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_api_diff
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_dce_packet
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_ccontrol_req
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_put_block
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_a_data_req
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_ttl_tlv
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_tlv_header
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_port_status
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_ieee_mac_phy
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_ethernet_header
</UL>

<P><STRONG><a name="[40b]"></a>pf_put_uint32</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, pf_block_writer.o(i.pf_put_uint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_write_result
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_time_timestamp
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_read_result
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pnet_status
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_peer_to_peer_boundary
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_statistics
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_data_real
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdinterface_data_real
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pd_multiblock_port_and_statistics
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pd_multiblock_interface_and_statistics
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pd_interface_adj
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_maint_status
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_lookup_response_data
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_log_book_data
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_dce_rpc_header
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_vendor_result
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_alarm_block
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uuid
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_tower_entry
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_submodule_diff
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_uuid
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_handle
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_floor_5_ip
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_epm_entry
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_one_ar
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_module_diff
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_iocr
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ident_subslot
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ident_slot
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ident_api
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_diag_list
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_diag_item
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_api_diff
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_write_ind
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_release_rsp
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_read_ind
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_dcontrol_rsp
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_rsp
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_ccontrol_req
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_save
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_management
</UL>

<P><STRONG><a name="[44c]"></a>pf_put_write_result</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, pf_block_writer.o(i.pf_put_write_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pf_put_write_result &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pnet_status
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_padding
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uuid
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_write_ind
</UL>

<P><STRONG><a name="[34a]"></a>pf_scheduler_add</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, pf_scheduler.o(i.pf_scheduler_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pf_scheduler_add &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_current_time_us
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_sanitize_delay
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_unlink
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_link_before
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_link_after
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_restart
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_send_with_timeout
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmio_timer_expired
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_send_hello
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmio_cmdev_state_ind
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_restart_peer_timeout
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_start_linkmonitor
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_trigger_linkmonitor
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_trigger_signal_led
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_identify_req
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_control_signal_led
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_driver_sw_activate_req
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_control_interval_expired
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_timeout
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_apms_a_data_req
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_activate_req
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_send
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_trigger_sending
</UL>

<P><STRONG><a name="[548]"></a>pf_scheduler_init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, pf_scheduler.o(i.pf_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pf_scheduler_init &rArr; pf_scheduler_link_before &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_link_before
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init_only
</UL>

<P><STRONG><a name="[34e]"></a>pf_scheduler_init_handle</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, pf_scheduler.o(i.pf_scheduler_init_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pf_scheduler_init_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_reset_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_activate
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_session_allocate
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_allocate
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_init
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_init
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_main_interface_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_driver_sw_activate_req
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmx_activate
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_activate_req
</UL>

<P><STRONG><a name="[454]"></a>pf_scheduler_is_running</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pf_scheduler.o(i.pf_scheduler_is_running))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_remove_if_running
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_cmdev_state_ind
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_trigger_signal_led
</UL>

<P><STRONG><a name="[54a]"></a>pf_scheduler_remove</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, pf_scheduler.o(i.pf_scheduler_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pf_scheduler_remove &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_unlink
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_link_before
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_remove_if_running
</UL>

<P><STRONG><a name="[352]"></a>pf_scheduler_remove_if_running</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, pf_scheduler.o(i.pf_scheduler_remove_if_running))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pf_scheduler_remove_if_running &rArr; pf_scheduler_remove &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_is_running
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_restart
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_session_release
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_dce_packet
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_set_ind
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_cmdev_state_ind
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmio_cmdev_state_ind
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_stop_peer_timeout
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_send_disable
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_restart_peer_timeout
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_driver_sw_close_req
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmx_close
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_close_req
</UL>

<P><STRONG><a name="[34b]"></a>pf_scheduler_reset_handle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pf_scheduler.o(i.pf_scheduler_reset_handle))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_timeout
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_send_with_timeout
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmio_timer_expired
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_init_handle
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_send_hello
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_responder
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_control_signal_led
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_clear_sam
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_control_interval_expired
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_timeout
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_send
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_receive_timeout
</UL>

<P><STRONG><a name="[450]"></a>pf_scheduler_restart</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, pf_scheduler.o(i.pf_scheduler_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pf_scheduler_restart &rArr; pf_scheduler_remove_if_running &rArr; pf_scheduler_remove &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_remove_if_running
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_cm_write_ind
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_rm_read_ind
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_cm_read_ind
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_cmdev_state_ind
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_restart_sam_timeout
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_tx_restart
</UL>

<P><STRONG><a name="[544]"></a>pf_scheduler_sanitize_delay</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, pf_scheduler.o(i.pf_scheduler_sanitize_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pf_scheduler_sanitize_delay &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
</UL>

<P><STRONG><a name="[54b]"></a>pf_scheduler_tick</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, pf_scheduler.o(i.pf_scheduler_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pf_scheduler_tick &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_current_time_us
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_unlink
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_link_before
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_handle_periodic
</UL>

<P><STRONG><a name="[377]"></a>pf_set_error</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, pf_cmrpc.o(i.pf_set_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pf_set_error &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_exp_submodule_configure
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_exp_modules_configure
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_exp_apis_configure
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_cm_connect_rsp_pos
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_iocr_param
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_iocr_overlap
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_iocr_apis
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_ar_rpc
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_ar_param
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_apdu
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_alarm_cr
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_write_interpret_ind
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_write_ind
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_release_interpret_req
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_release_ind
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_read_interpret_ind
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_read_ind
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_dcontrol_interpret_req
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_dcontrol_ind
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_interpret_ind
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_ind
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_ccontrol_interpret_cnf
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_perform_one_write
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_lookup_ind
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_dce_packet
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_check_block_header
</UL>

<P><STRONG><a name="[423]"></a>pf_set_error_if_not_already_set</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, pf_cmrpc.o(i.pf_set_error_if_not_already_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pf_set_error_if_not_already_set &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_perform_one_write
</UL>

<P><STRONG><a name="[426]"></a>pf_udp_close</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, pf_udp.o(i.pf_udp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pf_udp_close &rArr; pnal_udp_close &rArr; close &rArr; free_socket &rArr; free_socket_free_elements &rArr; netconn_delete &rArr; netconn_prepare_delete &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_udp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_periodic
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_session_release
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_send_with_timeout
</UL>

<P><STRONG><a name="[41d]"></a>pf_udp_open</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pf_udp.o(i.pf_udp_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = pf_udp_open &rArr; pnal_udp_open &rArr; close &rArr; free_socket &rArr; free_socket_free_elements &rArr; netconn_delete &rArr; netconn_prepare_delete &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_udp_open
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_init
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_ccontrol_req
</UL>

<P><STRONG><a name="[425]"></a>pf_udp_recvfrom</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, pf_udp.o(i.pf_udp_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = pf_udp_recvfrom &rArr; pnal_udp_recvfrom &rArr; recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_udp_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_periodic
</UL>

<P><STRONG><a name="[44e]"></a>pf_udp_sendto</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, pf_udp.o(i.pf_udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = pf_udp_sendto &rArr; pnal_udp_sendto &rArr; sendto &rArr; send &rArr;  sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_udp_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_send_once_from_buffer
</UL>

<P><STRONG><a name="[342]"></a>pnal_buf_alloc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pnal.o(i.pnal_buf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_create
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_hello_req
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_identify_req
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_get_set
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_a_data_req
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_send
</UL>

<P><STRONG><a name="[33e]"></a>pnal_buf_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pnal.o(i.pnal_buf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = pnal_buf_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_close_req
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_hello_req
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_recv
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_responder
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_identify_req
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_hello_ind
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_get_set
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_driver_sw_close_req
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_c_data_ind
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_receive_queue_reset
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmx_close
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_timeout
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_a_data_req
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_a_data_ind
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_periodic
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_send
</UL>

<P><STRONG><a name="[49e]"></a>pnal_clear_file</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, pnal.o(i.pnal_clear_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = pnal_clear_file &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_clear
</UL>

<P><STRONG><a name="[504]"></a>pnal_eth_get_status</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pnal.o(i.pnal_eth_get_status))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_update_eth_status
</UL>

<P><STRONG><a name="[498]"></a>pnal_eth_init</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, pnal_eth.o(i.pnal_eth_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pnal_eth_init &rArr; netif_find &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_find
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_eth_allocate_handle
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_init_netif
</UL>

<P><STRONG><a name="[49b]"></a>pnal_eth_send</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pnal_eth.o(i.pnal_eth_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pnal_eth_send &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_send_on_physical_port
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_send_on_management_port
</UL>

<P><STRONG><a name="[1dc]"></a>pnal_get_gateway</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pnal.o(i.pnal_get_gateway))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pnal_get_gateway &rArr; pnal_get_ip_address
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_get_ip_address
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_pnet_cfg_init_netifs
</UL>

<P><STRONG><a name="[1e0]"></a>pnal_get_hostname</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pnal.o(i.pnal_get_hostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pnal_get_hostname
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_print_network_config
</UL>

<P><STRONG><a name="[4cb]"></a>pnal_get_interface_index</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pnal.o(i.pnal_get_interface_index))
<BR><BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_management_address
</UL>

<P><STRONG><a name="[1da]"></a>pnal_get_ip_address</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pnal.o(i.pnal_get_ip_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pnal_get_ip_address
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_get_gateway
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_pnet_cfg_init_netifs
</UL>

<P><STRONG><a name="[1df]"></a>pnal_get_macaddress</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pnal.o(i.pnal_get_macaddress))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_print_mac_address
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_init_netif
</UL>

<P><STRONG><a name="[1db]"></a>pnal_get_netmask</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pnal.o(i.pnal_get_netmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pnal_get_netmask
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_pnet_cfg_init_netifs
</UL>

<P><STRONG><a name="[4fd]"></a>pnal_get_port_statistics</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, pnal.o(i.pnal_get_port_statistics))
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_read_ind
</UL>

<P><STRONG><a name="[4e7]"></a>pnal_get_system_uptime_10ms</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pnal.o(i.pnal_get_system_uptime_10ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pnal_get_system_uptime_10ms &rArr; sys_now
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_store_peer_info
</UL>

<P><STRONG><a name="[4a0]"></a>pnal_load_file</STRONG> (Thumb, 200 bytes, Stack size 600 bytes, pnal.o(i.pnal_load_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = pnal_load_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_load
</UL>

<P><STRONG><a name="[4a2]"></a>pnal_save_file</STRONG> (Thumb, 196 bytes, Stack size 600 bytes, pnal.o(i.pnal_save_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = pnal_save_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_save
</UL>

<P><STRONG><a name="[3cd]"></a>pnal_set_ip_suite</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, pnal.o(i.pnal_set_ip_suite))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = pnal_set_ip_suite &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_set_commit
</UL>

<P><STRONG><a name="[54d]"></a>pnal_udp_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pnal_udp.o(i.pnal_udp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = pnal_udp_close &rArr; close &rArr; free_socket &rArr; free_socket_free_elements &rArr; netconn_delete &rArr; netconn_prepare_delete &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_udp_close
</UL>

<P><STRONG><a name="[54e]"></a>pnal_udp_open</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, pnal_udp.o(i.pnal_udp_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = pnal_udp_open &rArr; close &rArr; free_socket &rArr; free_socket_free_elements &rArr; netconn_delete &rArr; netconn_prepare_delete &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_udp_open
</UL>

<P><STRONG><a name="[54f]"></a>pnal_udp_recvfrom</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, pnal_udp.o(i.pnal_udp_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = pnal_udp_recvfrom &rArr; recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_udp_recvfrom
</UL>

<P><STRONG><a name="[550]"></a>pnal_udp_sendto</STRONG> (Thumb, 90 bytes, Stack size 72 bytes, pnal_udp.o(i.pnal_udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = pnal_udp_sendto &rArr; sendto &rArr; send &rArr;  sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_udp_sendto
</UL>

<P><STRONG><a name="[1bf]"></a>pnet_alarm_send_ack</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, pnet_api.o(i.pnet_alarm_send_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = pnet_alarm_send_ack &rArr; pf_alarm_alpmr_alarm_ack &rArr; pf_alarm_apms_apms_a_data_req &rArr; pf_alarm_alpmr_apms_a_data_cnf &rArr; pf_alarm_error_ind &rArr; pf_cmsu_alarm_error_ind &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_find_by_arep
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_alpmr_alarm_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_send_alarm_ack
</UL>

<P><STRONG><a name="[1b3]"></a>pnet_alarm_send_process_alarm</STRONG> (Thumb, 70 bytes, Stack size 64 bytes, pnet_api.o(i.pnet_alarm_send_process_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = pnet_alarm_send_process_alarm &rArr; pf_alarm_send_process &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_find_by_arep
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_process
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_demo_pnet_api
</UL>

<P><STRONG><a name="[1c1]"></a>pnet_application_ready</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, pnet_api.o(i.pnet_application_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = pnet_application_ready &rArr; pf_cmdev_cm_ccontrol_req &rArr; pf_cmrpc_rm_ccontrol_req &rArr; pf_cmrpc_send_with_timeout &rArr; pf_cmrpc_send_once &rArr; pf_cmrpc_send_once_from_buffer &rArr; pf_udp_sendto &rArr; pnal_udp_sendto &rArr; sendto &rArr; send &rArr;  sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_cm_ccontrol_req
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_find_by_arep
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_send_application_ready
</UL>

<P><STRONG><a name="[1bd]"></a>pnet_ar_abort</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, pnet_api.o(i.pnet_ar_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = pnet_ar_abort &rArr; pf_cmdev_cm_abort &rArr; pf_cmdev_set_state &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_cm_abort
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_find_by_arep
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_demo_pnet_api
</UL>

<P><STRONG><a name="[1bc]"></a>pnet_create_log_book_entry</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, pnet_api.o(i.pnet_create_log_book_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pnet_create_log_book_entry &rArr; pf_fspm_create_log_book_entry &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_create_log_book_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_demo_pnet_api
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_cm_connect_rsp_pos
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_cm_connect_rsp_neg
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_ccontrol_cnf
</UL>

<P><STRONG><a name="[1b6]"></a>pnet_diag_std_add</STRONG> (Thumb, 42 bytes, Stack size 56 bytes, pnet_api.o(i.pnet_diag_std_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = pnet_diag_std_add &rArr; pf_diag_std_add &rArr; pf_diag_add &rArr; pf_alarm_send_diagnosis &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_std_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_demo_pnet_api
</UL>

<P><STRONG><a name="[1b8]"></a>pnet_diag_std_remove</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, pnet_api.o(i.pnet_diag_std_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = pnet_diag_std_remove &rArr; pf_diag_std_remove &rArr; pf_diag_remove &rArr; pf_alarm_send_diagnosis &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_std_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_demo_pnet_api
</UL>

<P><STRONG><a name="[1b7]"></a>pnet_diag_std_update</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, pnet_api.o(i.pnet_diag_std_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = pnet_diag_std_update &rArr; pf_diag_std_update &rArr; pf_diag_update &rArr; pf_alarm_send_diagnosis &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_std_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_demo_pnet_api
</UL>

<P><STRONG><a name="[1b9]"></a>pnet_diag_usi_add</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, pnet_api.o(i.pnet_diag_usi_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = pnet_diag_usi_add &rArr; pf_diag_usi_add &rArr; pf_diag_add &rArr; pf_alarm_send_diagnosis &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_usi_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_demo_pnet_api
</UL>

<P><STRONG><a name="[1bb]"></a>pnet_diag_usi_remove</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, pnet_api.o(i.pnet_diag_usi_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = pnet_diag_usi_remove &rArr; pf_diag_usi_remove &rArr; pf_diag_remove &rArr; pf_alarm_send_diagnosis &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_usi_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_demo_pnet_api
</UL>

<P><STRONG><a name="[1ba]"></a>pnet_diag_usi_update</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, pnet_api.o(i.pnet_diag_usi_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = pnet_diag_usi_update &rArr; pf_diag_usi_update &rArr; pf_diag_update &rArr; pf_alarm_send_diagnosis &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_usi_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_demo_pnet_api
</UL>

<P><STRONG><a name="[1d4]"></a>pnet_get_ar_error_codes</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, pnet_api.o(i.pnet_get_ar_error_codes))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pnet_get_ar_error_codes &rArr; pf_ar_find_by_arep
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_find_by_arep
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_state_ind
</UL>

<P><STRONG><a name="[1c8]"></a>pnet_handle_periodic</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, pnet_api.o(i.pnet_handle_periodic))
<BR><BR>[Stack]<UL><LI>Max Depth = 4352<LI>Call Chain = pnet_handle_periodic &rArr; pf_cmrpc_periodic &rArr; pf_cmrpc_dce_packet &rArr; pf_cmrpc_rpc_request &rArr; pf_cmrpc_rm_read_ind &rArr; pf_cmrdr_rm_read_ind &rArr; pf_pdport_read_ind &rArr; pf_lldp_get_peer_station_name &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_current_time_us
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_periodic
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_has_timed_out
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_tick
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_periodic
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_periodic
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_loop_forever
</UL>

<P><STRONG><a name="[1c2]"></a>pnet_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, pnet_api.o(i.pnet_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2456<LI>Call Chain = pnet_init &rArr; pnet_init_only &rArr; pf_pdport_init &rArr; pf_pdport_save &rArr; pf_file_save_if_modified &rArr; pf_file_load &rArr; pnal_load_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_malloc
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init_only
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[558]"></a>pnet_init_only</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, pnet_api.o(i.pnet_init_only))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440<LI>Call Chain = pnet_init_only &rArr; pf_pdport_init &rArr; pf_pdport_save &rArr; pf_file_save_if_modified &rArr; pf_file_load &rArr; pnal_load_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_current_time_us
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_exit
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_init
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_init
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_init
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_init
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_init
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_init
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_exit
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_init
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_bg_worker_init
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_init
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_main_interface_init
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_init
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_init
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_init
</UL>

<P><STRONG><a name="[197]"></a>pnet_input_get_iocs</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, pnet_api.o(i.pnet_input_get_iocs))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pnet_input_get_iocs &rArr; pf_cpm_get_iocs &rArr; pf_cpm_get_ar_iocr_desc &rArr; pf_cmdev_get_subslot_full &rArr; pf_cmdev_get_api &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_get_iocs
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_cyclic_data_callback
</UL>

<P><STRONG><a name="[196]"></a>pnet_input_set_data_and_iops</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, pnet_api.o(i.pnet_input_set_data_and_iops))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pnet_input_set_data_and_iops &rArr; pf_ppm_set_data_and_iops &rArr; pf_ppm_get_ar_iocr_desc &rArr; pf_cmdev_get_subslot_full &rArr; pf_cmdev_get_api &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_set_data_and_iops
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_initial_data_and_ioxs
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_cyclic_data_callback
</UL>

<P><STRONG><a name="[191]"></a>pnet_output_get_data_and_iops</STRONG> (Thumb, 52 bytes, Stack size 64 bytes, pnet_api.o(i.pnet_output_get_data_and_iops))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pnet_output_get_data_and_iops &rArr; pf_cpm_get_data_and_iops &rArr; pf_cpm_get_ar_iocr_desc &rArr; pf_cmdev_get_subslot_full &rArr; pf_cmdev_get_api &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_get_data_and_iops
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_cyclic_data_callback
</UL>

<P><STRONG><a name="[1cd]"></a>pnet_output_set_iocs</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, pnet_api.o(i.pnet_output_set_iocs))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pnet_output_set_iocs &rArr; pf_ppm_set_iocs &rArr; pf_ppm_get_ar_iocr_desc &rArr; pf_cmdev_get_subslot_full &rArr; pf_cmdev_get_api &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_set_iocs
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_initial_data_and_ioxs
</UL>

<P><STRONG><a name="[1a3]"></a>pnet_plug_module</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, pnet_api.o(i.pnet_plug_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pnet_plug_module &rArr; pf_cmdev_plug_module &rArr; pf_cmdev_new_slot &rArr; pf_cmdev_get_slot &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_plug_module
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_exp_module_ind
</UL>

<P><STRONG><a name="[1a9]"></a>pnet_plug_submodule</STRONG> (Thumb, 44 bytes, Stack size 80 bytes, pnet_api.o(i.pnet_plug_submodule))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = pnet_plug_submodule &rArr; pf_cmdev_plug_submodule &rArr; pf_cmdev_pull_submodule &rArr; pf_alarm_send_pull &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_plug_submodule
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_exp_submodule_ind
</UL>

<P><STRONG><a name="[1a1]"></a>pnet_pull_module</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, pnet_api.o(i.pnet_pull_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = pnet_pull_module &rArr; pf_cmdev_pull_module &rArr; pf_cmdev_pull_submodule &rArr; pf_alarm_send_pull &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_pull_module
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_exp_module_ind
</UL>

<P><STRONG><a name="[1a6]"></a>pnet_pull_submodule</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, pnet_api.o(i.pnet_pull_submodule))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = pnet_pull_submodule &rArr; pf_cmdev_pull_submodule &rArr; pf_alarm_send_pull &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_pull_submodule
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_exp_submodule_ind
</UL>

<P><STRONG><a name="[1b4]"></a>pnet_set_primary_state</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, pnet_api.o(i.pnet_set_primary_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pnet_set_primary_state &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_find_by_index
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_set_data_status_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_demo_pnet_api
</UL>

<P><STRONG><a name="[1d6]"></a>pnet_set_provider_state</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, pnet_api.o(i.pnet_set_provider_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pnet_set_provider_state &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_find_by_index
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_set_data_status_provider
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_state_ind
</UL>

<P><STRONG><a name="[1b5]"></a>pnet_set_redundancy_state</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, pnet_api.o(i.pnet_set_redundancy_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pnet_set_redundancy_state &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_find_by_index
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_set_data_status_redundancy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_demo_pnet_api
</UL>

<P><STRONG><a name="[252]"></a>pvPortMalloc</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[5e2]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[311]"></a>pvTimerGetTimerID</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, timers.o(i.pvTimerGetTimerID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pvTimerGetTimerID
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_callback
</UL>

<P><STRONG><a name="[570]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[555]"></a>recvfrom</STRONG> (Thumb, 244 bytes, Stack size 96 bytes, sockets.o(i.recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp_from
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_udp_recvfrom
</UL>

<P><STRONG><a name="[584]"></a>send</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, sockets.o(i.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + In Cycle
<LI>Call Chain = send &rArr;  sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[556]"></a>sendto</STRONG> (Thumb, 290 bytes, Stack size 72 bytes, sockets.o(i.sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = sendto &rArr; send &rArr;  sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_udp_sendto
</UL>

<P><STRONG><a name="[554]"></a>setsockopt</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, sockets.o(i.setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = setsockopt &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_udp_open
</UL>

<P><STRONG><a name="[553]"></a>socket</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, sockets.o(i.socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_udp_open
</UL>

<P><STRONG><a name="[285]"></a>stats_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stats.o(i.stats_init))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[2d2]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sys_arch.o(i.sys_arch_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sys_arch_mbox_fetch &rArr; osMessageQueueGet &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[2cd]"></a>sys_arch_mbox_tryfetch</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sys_arch.o(i.sys_arch_mbox_tryfetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sys_arch_mbox_tryfetch &rArr; osMessageQueueGet &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[18d]"></a>sys_arch_protect</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sys_arch.o(i.sys_arch_protect))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sys_arch_protect &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_err
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
</UL>

<P><STRONG><a name="[292]"></a>sys_arch_sem_wait</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sys_arch.o(i.sys_arch_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sys_arch_sem_wait &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
</UL>

<P><STRONG><a name="[18e]"></a>sys_arch_unprotect</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_arch.o(i.sys_arch_unprotect))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_err
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
</UL>

<P><STRONG><a name="[586]"></a>sys_check_timeouts</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, timeouts.o(i.sys_check_timeouts))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = sys_check_timeouts &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[286]"></a>sys_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_arch.o(i.sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sys_init &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[2c7]"></a>sys_mbox_free</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mbox_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sys_mbox_free &rArr; osMessageQueueDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGetCount
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[2c5]"></a>sys_mbox_new</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sys_mbox_new &rArr; osMessageQueueNew &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>

<P><STRONG><a name="[2c8]"></a>sys_mbox_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_mbox_set_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>

<P><STRONG><a name="[211]"></a>sys_mbox_trypost</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, sys_arch.o(i.sys_mbox_trypost))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sys_mbox_trypost &rArr; osMessageQueuePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
</UL>

<P><STRONG><a name="[210]"></a>sys_mbox_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys_arch.o(i.sys_mbox_valid))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data_tcp
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
</UL>

<P><STRONG><a name="[293]"></a>sys_mutex_lock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sys_mutex_lock &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeouts_mbox_fetch
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
</UL>

<P><STRONG><a name="[2bd]"></a>sys_mutex_new</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mutex_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sys_mutex_new &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>

<P><STRONG><a name="[291]"></a>sys_mutex_unlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeouts_mbox_fetch
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
</UL>

<P><STRONG><a name="[281]"></a>sys_now</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ethernetif.o(i.sys_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_now
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_sleeptime
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_cyclic_timer
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_get_system_uptime_10ms
</UL>

<P><STRONG><a name="[2ce]"></a>sys_sem_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sys_arch.o(i.sys_sem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sys_sem_free &rArr; osSemaphoreDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[2c6]"></a>sys_sem_new</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, sys_arch.o(i.sys_sem_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sys_sem_new &rArr; osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>

<P><STRONG><a name="[2cf]"></a>sys_sem_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_set_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>

<P><STRONG><a name="[213]"></a>sys_sem_signal</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.sys_sem_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sys_sem_signal &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_check_waiters
</UL>

<P><STRONG><a name="[212]"></a>sys_sem_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_valid))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[587]"></a>sys_thread_new</STRONG> (Thumb, 50 bytes, Stack size 64 bytes, sys_arch.o(i.sys_thread_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sys_thread_new &rArr; osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[588]"></a>sys_timeout</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, timeouts.o(i.sys_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = sys_timeout &rArr; sys_timeout_abs &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_abs
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>

<P><STRONG><a name="[28c]"></a>sys_timeouts_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timeouts.o(i.sys_timeouts_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; sys_timeout_abs &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[589]"></a>sys_timeouts_sleeptime</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, timeouts.o(i.sys_timeouts_sleeptime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sys_timeouts_sleeptime &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[58a]"></a>tcp_abandon</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[29c]"></a>tcp_abort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[295]"></a>tcp_accept</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[58f]"></a>tcp_alloc</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, tcp.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handle_closepend
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[294]"></a>tcp_arg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_arg))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[28e]"></a>tcp_bind</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, tcp.o(i.tcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; sys_timeout_abs &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
</UL>

<P><STRONG><a name="[2b4]"></a>tcp_bind_netif</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tcp.o(i.tcp_bind_netif))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[29a]"></a>tcp_close</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[59f]"></a>tcp_eff_send_mss_netif</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, tcp.o(i.tcp_eff_send_mss_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tcp_eff_send_mss_netif &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[5a0]"></a>tcp_enqueue_flags</STRONG> (Thumb, 442 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_enqueue_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = tcp_enqueue_flags &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[299]"></a>tcp_err</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tcp.o(i.tcp_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_err &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[5a1]"></a>tcp_fasttmr</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[58c]"></a>tcp_free</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tcp.o(i.tcp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tcp_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
</UL>

<P><STRONG><a name="[28b]"></a>tcp_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tcp.o(i.tcp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[271]"></a>tcp_input</STRONG> (Thumb, 2250 bytes, Stack size 56 bytes, tcp_in.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[5aa]"></a>tcp_keepalive</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = tcp_keepalive &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_fill_options
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[2da]"></a>tcp_netif_ip_addr_changed</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tcp.o(i.tcp_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_ip_addr_changed
</UL>

<P><STRONG><a name="[31c]"></a>tcp_new_ip_type</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tcp.o(i.tcp_new_ip_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[5af]"></a>tcp_next_iss</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tcp.o(i.tcp_next_iss))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_next_iss &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[2a5]"></a>tcp_output</STRONG> (Thumb, 684 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_route
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_commit
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[597]"></a>tcp_pcb_purge</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[58b]"></a>tcp_pcb_remove</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
</UL>

<P><STRONG><a name="[298]"></a>tcp_poll</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tcp.o(i.tcp_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_poll &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[5a2]"></a>tcp_process_refused_data</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, tcp.o(i.tcp_process_refused_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[296]"></a>tcp_recv</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tcp.o(i.tcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_recv &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[e1]"></a>tcp_recv_null</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[29f]"></a>tcp_recved</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
</UL>

<P><STRONG><a name="[5ba]"></a>tcp_rexmit</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_rexmit &rArr; tcp_output_segment_busy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment_busy
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[5bb]"></a>tcp_rexmit_fast</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit &rArr; tcp_output_segment_busy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[5b8]"></a>tcp_rexmit_rto</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_rexmit_rto_commit &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_commit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[5be]"></a>tcp_rexmit_rto_commit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_rto_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = tcp_rexmit_rto_commit &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
</UL>

<P><STRONG><a name="[5bd]"></a>tcp_rexmit_rto_prepare</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_rexmit_rto_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tcp_rexmit_rto_prepare &rArr; tcp_output_segment_busy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment_busy
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
</UL>

<P><STRONG><a name="[58e]"></a>tcp_rst</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, tcp_out.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = tcp_rst &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_fill_options
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[59e]"></a>tcp_seg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
</UL>

<P><STRONG><a name="[58d]"></a>tcp_segs_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[5a7]"></a>tcp_send_empty_ack</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_fill_options
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[59c]"></a>tcp_send_fin</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>

<P><STRONG><a name="[297]"></a>tcp_sent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tcp.o(i.tcp_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_sent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[29b]"></a>tcp_shutdown</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, tcp.o(i.tcp_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[5c0]"></a>tcp_slowtmr</STRONG> (Thumb, 1680 bytes, Stack size 56 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto_commit &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_commit
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[5c2]"></a>tcp_split_unsent_seg</STRONG> (Thumb, 526 bytes, Stack size 56 bytes, tcp_out.o(i.tcp_split_unsent_seg))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = tcp_split_unsent_seg &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[595]"></a>tcp_timer_needed</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timeouts.o(i.tcp_timer_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; sys_timeout_abs &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[ed]"></a>tcp_tmr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[598]"></a>tcp_trigger_input_pcb_close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tcp_in.o(i.tcp_trigger_input_pcb_close))
<BR><BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[5bc]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_update_rcv_ann_wnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[2a4]"></a>tcp_write</STRONG> (Thumb, 1942 bytes, Stack size 120 bytes, tcp_out.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
</UL>

<P><STRONG><a name="[5c1]"></a>tcp_zero_window_probe</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = tcp_zero_window_probe &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_fill_options
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[169]"></a>tcpip_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tcpip_init &rArr; sys_thread_new &rArr; osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LWIP_Init
</UL>

<P><STRONG><a name="[5c4]"></a>tcpip_inpkt</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tcpip.o(i.tcpip_inpkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = tcpip_inpkt &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
</UL>

<P><STRONG><a name="[9e]"></a>tcpip_input</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = tcpip_input &rArr; tcpip_inpkt &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Netif_Config)
</UL>
<P><STRONG><a name="[2ca]"></a>tcpip_send_msg_wait_sem</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_send_msg_wait_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>

<P><STRONG><a name="[28d]"></a>udp_bind</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = udp_bind &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_port
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[2b5]"></a>udp_bind_netif</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, udp.o(i.udp_bind_netif))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[28a]"></a>udp_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, udp.o(i.udp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[270]"></a>udp_input</STRONG> (Thumb, 584 bytes, Stack size 48 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input_local_match
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[2db]"></a>udp_netif_ip_addr_changed</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, udp.o(i.udp_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_ip_addr_changed
</UL>

<P><STRONG><a name="[5cb]"></a>udp_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = udp_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
</UL>

<P><STRONG><a name="[31a]"></a>udp_new_ip_type</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, udp.o(i.udp_new_ip_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = udp_new_ip_type &rArr; udp_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[31b]"></a>udp_recv</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, udp.o(i.udp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = udp_recv &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[29d]"></a>udp_remove</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, udp.o(i.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
</UL>

<P><STRONG><a name="[2a1]"></a>udp_send</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, udp.o(i.udp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[2a2]"></a>udp_sendto</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, udp.o(i.udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_by_index
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
</UL>

<P><STRONG><a name="[5cc]"></a>udp_sendto_if</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, udp.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[5cd]"></a>udp_sendto_if_src</STRONG> (Thumb, 412 bytes, Stack size 72 bytes, udp.o(i.udp_sendto_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[55f]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[2ee]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.uxQueueMessagesWaiting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uxQueueMessagesWaiting
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGetCount
</UL>

<P><STRONG><a name="[2ed]"></a>uxQueueMessagesWaitingFromISR</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, queue.o(i.uxQueueMessagesWaitingFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uxQueueMessagesWaitingFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGetCount
</UL>

<P><STRONG><a name="[5da]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.uxTaskResetEventItemValue))
<BR><BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[5d6]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[5e5]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[306]"></a>vEventGroupDelete</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, event_groups.o(i.vEventGroupDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vEventGroupDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_destroy
</UL>

<P><STRONG><a name="[565]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[56f]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>

<P><STRONG><a name="[561]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>

<P><STRONG><a name="[560]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[20d]"></a>vPortEnterCritical</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[20e]"></a>vPortExitCritical</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[253]"></a>vPortFree</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[5db]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[5cf]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
</UL>

<P><STRONG><a name="[2f2]"></a>vQueueAddToRegistry</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>

<P><STRONG><a name="[2e8]"></a>vQueueDelete</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueDelete
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_destroy
</UL>

<P><STRONG><a name="[2e7]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, queue.o(i.vQueueUnregisterQueue))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueDelete
</UL>

<P><STRONG><a name="[57b]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[2e1]"></a>vTaskDelay</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[303]"></a>vTaskDelete</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[5df]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[580]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[5d3]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[5d1]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[5d4]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[5d5]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[5ce]"></a>vTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, tasks.o(i.vTaskRemoveFromUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
</UL>

<P><STRONG><a name="[2e5]"></a>vTaskStartScheduler</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[579]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[102]"></a>vTaskSwitchContext</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[304]"></a>xEventGroupClearBits</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, event_groups.o(i.xEventGroupClearBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xEventGroupClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_clr
</UL>

<P><STRONG><a name="[305]"></a>xEventGroupCreate</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, event_groups.o(i.xEventGroupCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_create
</UL>

<P><STRONG><a name="[307]"></a>xEventGroupSetBits</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, event_groups.o(i.xEventGroupSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_set
</UL>

<P><STRONG><a name="[308]"></a>xEventGroupWaitBits</STRONG> (Thumb, 338 bytes, Stack size 64 bytes, event_groups.o(i.xEventGroupWaitBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xEventGroupWaitBits &rArr; vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestWaitCondition
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wait
</UL>

<P><STRONG><a name="[185]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_4.o(i.xPortGetFreeHeapSize))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main
</UL>

<P><STRONG><a name="[186]"></a>xPortGetMinimumEverFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_4.o(i.xPortGetMinimumEverFreeHeapSize))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main
</UL>

<P><STRONG><a name="[5d8]"></a>xPortStartScheduler</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[175]"></a>xPortSysTickHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2ff]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateCountingSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[2fe]"></a>xQueueCreateCountingSemaphoreStatic</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, queue.o(i.xQueueCreateCountingSemaphoreStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[2fb]"></a>xQueueCreateMutex</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
</UL>

<P><STRONG><a name="[2fa]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, queue.o(i.xQueueCreateMutexStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[2f1]"></a>xQueueGenericCreate</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>

<P><STRONG><a name="[2f0]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>

<P><STRONG><a name="[56d]"></a>xQueueGenericReset</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[2f5]"></a>xQueueGenericSend</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[2f4]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[300]"></a>xQueueGiveFromISR</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[2fd]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
</UL>

<P><STRONG><a name="[2eb]"></a>xQueueReceive</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[2ea]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xQueueReceiveFromISR &rArr; prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[2f8]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 434 bytes, Stack size 40 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetDisinheritPriorityAfterTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[2f7]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, queue.o(i.xQueueTakeMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
</UL>

<P><STRONG><a name="[5e0]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[302]"></a>xTaskCreate</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
</UL>

<P><STRONG><a name="[301]"></a>xTaskCreateStatic</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[5e1]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[174]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2e4]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_current_time_us
</UL>

<P><STRONG><a name="[2e3]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tasks.o(i.xTaskGetTickCountFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>

<P><STRONG><a name="[5de]"></a>xTaskIncrementTick</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[56a]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[5e3]"></a>xTaskPriorityInherit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[57f]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[57a]"></a>xTaskResumeAll</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[312]"></a>xTimerCreate</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
</UL>

<P><STRONG><a name="[5d7]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[313]"></a>xTimerGenericCommand</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2b6]"></a>CPU_CACHE_Enable</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, main.o(i.CPU_CACHE_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CPU_CACHE_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[129]"></a>Error_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Error_Handler &rArr; BSP_LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PNetThread
</UL>

<P><STRONG><a name="[164]"></a>MPU_Config</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, main.o(i.MPU_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MPU_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16a]"></a>Netif_Config</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, main.o(i.Netif_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = Netif_Config &rArr; netif_add &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_callback
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_status_updated
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LWIP_Init
</UL>

<P><STRONG><a name="[be]"></a>PNetThread</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, main.o(i.PNetThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 4464<LI>Call Chain = PNetThread &rArr; _main &rArr; app_loop_forever &rArr; pnet_handle_periodic &rArr; pf_cmrpc_periodic &rArr; pf_cmrpc_dce_packet &rArr; pf_cmrpc_rpc_request &rArr; pf_cmrpc_rm_read_ind &rArr; pf_cmrdr_rm_read_ind &rArr; pf_pdport_read_ind &rArr; pf_lldp_get_peer_station_name &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LWIP_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[176]"></a>SystemClock_Config</STRONG> (Thumb, 278 bytes, Stack size 120 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnableCompensationCell
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22e]"></a>low_level_init</STRONG> (Thumb, 386 bytes, Stack size 184 bytes, ethernetif.o(i.low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = low_level_init &rArr; netif_set_up &rArr; netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_down
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init_pool
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8742_RegisterBusIO
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8742_Init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8742_GetLinkState
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start_IT
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMACFilterConfig
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMACConfig
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetMACFilterConfig
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetMACConfig
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[230]"></a>low_level_input</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ethernetif.o(i.low_level_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = low_level_input &rArr; HAL_ETH_ReadData &rArr; ETH_UpdateDescriptor &rArr; HAL_ETH_RxAllocateCallback &rArr; memp_malloc_pool &rArr; do_memp_malloc_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[b7]"></a>low_level_output</STRONG> (Thumb, 302 bytes, Stack size 72 bytes, ethernetif.o(i.low_level_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = low_level_output &rArr; HAL_ETH_ReleaseTxPacket &rArr; HAL_ETH_TxFreeCallback &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Transmit_IT
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReleaseTxPacket
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[6]"></a>BUTTON_USER_EXTI_Callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_nucleo.o(i.BUTTON_USER_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BUTTON_USER_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_nucleo.o(.data)
</UL>
<P><STRONG><a name="[151]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[152]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[139]"></a>ETH_DMARxDescListInit</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32h7xx_hal_eth.o(i.ETH_DMARxDescListInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_DMARxDescListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[138]"></a>ETH_DMATxDescListInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32h7xx_hal_eth.o(i.ETH_DMATxDescListInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_DMATxDescListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[120]"></a>ETH_MACDMAConfig</STRONG> (Thumb, 262 bytes, Stack size 144 bytes, stm32h7xx_hal_eth.o(i.ETH_MACDMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ETH_MACDMAConfig &rArr; ETH_SetMACConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetMACConfig
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[146]"></a>ETH_Prepare_Tx_Descriptors</STRONG> (Thumb, 972 bytes, Stack size 36 bytes, stm32h7xx_hal_eth.o(i.ETH_Prepare_Tx_Descriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Transmit_IT
</UL>

<P><STRONG><a name="[122]"></a>ETH_SetDMAConfig</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, stm32h7xx_hal_eth.o(i.ETH_SetDMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_SetDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
</UL>

<P><STRONG><a name="[121]"></a>ETH_SetMACConfig</STRONG> (Thumb, 394 bytes, Stack size 8 bytes, stm32h7xx_hal_eth.o(i.ETH_SetMACConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_SetMACConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMACConfig
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
</UL>

<P><STRONG><a name="[127]"></a>ETH_UpdateDescriptor</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, stm32h7xx_hal_eth.o(i.ETH_UpdateDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ETH_UpdateDescriptor &rArr; HAL_ETH_RxAllocateCallback &rArr; memp_malloc_pool &rArr; do_memp_malloc_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxAllocateCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start_IT
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadData
</UL>

<P><STRONG><a name="[1eb]"></a>check_fs</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1f9]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[23f]"></a>chk_lock</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, ff.o(i.chk_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[238]"></a>clear_lock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ff.o(i.clear_lock))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[24a]"></a>clmt_clust</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, ff.o(i.clmt_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[202]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[1f2]"></a>cmp_lfn</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[1f4]"></a>create_chain</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[1f7]"></a>create_name</STRONG> (Thumb, 534 bytes, Stack size 56 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = create_name &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[235]"></a>dec_lock</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ff.o(i.dec_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[1fb]"></a>dir_alloc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1fe]"></a>dir_find</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1fd]"></a>dir_next</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[203]"></a>dir_read</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[205]"></a>dir_register</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[209]"></a>dir_remove</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(i.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dir_remove &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[1fc]"></a>dir_sdi</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[240]"></a>enq_lock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ff.o(i.enq_lock))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[23b]"></a>find_volume</STRONG> (Thumb, 762 bytes, Stack size 88 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = find_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[23e]"></a>follow_path</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[207]"></a>gen_numname</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1f5]"></a>get_fat</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[237]"></a>get_ldnumber</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[246]"></a>inc_lock</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, ff.o(i.inc_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[243]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[1ee]"></a>ld_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[1ed]"></a>ld_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[256]"></a>lock_fs</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ff.o(i.lock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lock_fs &rArr; ff_req_grant &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[200]"></a>mem_cmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[206]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1fa]"></a>mem_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[1ec]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[204]"></a>pick_lfn</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, ff.o(i.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pick_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[1f6]"></a>put_fat</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[208]"></a>put_lfn</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ff.o(i.put_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = put_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[245]"></a>remove_chain</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[244]"></a>st_clust</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[242]"></a>st_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[24c]"></a>st_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[1ff]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[24d]"></a>sync_fs</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[201]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[236]"></a>unlock_fs</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ff.o(i.unlock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = unlock_fs &rArr; ff_rel_grant &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>

<P><STRONG><a name="[234]"></a>validate</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[173]"></a>SD_CheckStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sd_diskio.o(i.SD_CheckStatus))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_status
</UL>

<P><STRONG><a name="[568]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[569]"></a>prvCopyDataToQueue</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[5e4]"></a>prvGetDisinheritPriorityAfterTimeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, queue.o(i.prvGetDisinheritPriorityAfterTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[56b]"></a>prvInitialiseMutex</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[56c]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[573]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[574]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[57e]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[564]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>

<P><STRONG><a name="[57d]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[571]"></a>prvInitialiseNewTimer</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, timers.o(i.prvInitialiseNewTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[572]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[575]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[576]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 350 bytes, Stack size 48 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[578]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[577]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[57c]"></a>prvSwitchTimerLists</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[e7]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[55e]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[562]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[566]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[567]"></a>prvDeleteTCB</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[e6]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[56e]"></a>prvInitialiseNewTask</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[563]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[5d2]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[5d9]"></a>prvTestWaitCondition</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, event_groups.o(i.prvTestWaitCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvTestWaitCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[2e0]"></a>__get_IPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os2.o(i.__get_IPSR))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGetCount
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueDelete
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>

<P><STRONG><a name="[581]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[582]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[de]"></a>prvTaskExitError</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[20a]"></a>do_memp_free_pool</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, memp.o(i.do_memp_free_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free_pool
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[20b]"></a>do_memp_malloc_pool</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, memp.o(i.do_memp_malloc_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = do_memp_malloc_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_pool
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>

<P><STRONG><a name="[596]"></a>tcp_close_shutdown</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, tcp.o(i.tcp_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_trigger_input_pcb_close
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_listen
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[59b]"></a>tcp_close_shutdown_fin</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, tcp.o(i.tcp_close_shutdown_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handle_closepend
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[59a]"></a>tcp_free_listen</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tcp.o(i.tcp_free_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tcp_free_listen &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[590]"></a>tcp_handle_closepend</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tcp.o(i.tcp_handle_closepend))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = tcp_handle_closepend &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[593]"></a>tcp_kill_prio</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tcp.o(i.tcp_kill_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[592]"></a>tcp_kill_state</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, tcp.o(i.tcp_kill_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[591]"></a>tcp_kill_timewait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcp.o(i.tcp_kill_timewait))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[599]"></a>tcp_listen_closed</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tcp.o(i.tcp_listen_closed))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_listen_closed &rArr; tcp_remove_listener &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_remove_listener
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[5b1]"></a>tcp_netif_ip_addr_changed_pcblist</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, tcp.o(i.tcp_netif_ip_addr_changed_pcblist))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
</UL>

<P><STRONG><a name="[594]"></a>tcp_new_port</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, tcp.o(i.tcp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[5ae]"></a>tcp_remove_listener</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tcp.o(i.tcp_remove_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_remove_listener &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
</UL>

<P><STRONG><a name="[2ba]"></a>mem_link_valid</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mem.o(i.mem_link_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mem_link_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptr_to_mem
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_to_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[2be]"></a>mem_to_ptr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mem.o(i.mem_to_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_link_valid
</UL>

<P><STRONG><a name="[2bb]"></a>plug_holes</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptr_to_mem
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_to_ptr
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[2bc]"></a>ptr_to_mem</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mem.o(i.ptr_to_mem))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_link_valid
</UL>

<P><STRONG><a name="[2d9]"></a>netif_do_ip_addr_changed</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, netif.o(i.netif_do_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_ipaddr
</UL>

<P><STRONG><a name="[2df]"></a>netif_do_set_gw</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, netif.o(i.netif_do_set_gw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netif_do_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[2dc]"></a>netif_do_set_ipaddr</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, netif.o(i.netif_do_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_ip_addr_changed
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[2de]"></a>netif_do_set_netmask</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, netif.o(i.netif_do_set_netmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netif_do_set_netmask
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[2dd]"></a>netif_issue_reports</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, netif.o(i.netif_issue_reports))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_ipaddr
</UL>

<P><STRONG><a name="[c7]"></a>netif_null_output_ip4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(i.netif_null_output_ip4))
<BR>[Address Reference Count : 1]<UL><LI> netif.o(i.netif_add)
</UL>
<P><STRONG><a name="[5ca]"></a>udp_input_local_match</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, udp.o(i.udp_input_local_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = udp_input_local_match &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[5c9]"></a>udp_new_port</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, udp.o(i.udp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>

<P><STRONG><a name="[314]"></a>pbuf_add_header_impl</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_add_header_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pbuf_add_header_impl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
</UL>

<P><STRONG><a name="[318]"></a>pbuf_header_impl</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_header_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pbuf_header_impl &rArr; pbuf_add_header_impl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header_impl
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
</UL>

<P><STRONG><a name="[316]"></a>pbuf_init_alloced_pbuf</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_init_alloced_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_init_alloced_pbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc_reference
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[5a3]"></a>tcp_free_acked_segments</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_free_acked_segments))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tcp_free_acked_segments &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[5b6]"></a>tcp_get_next_optbyte</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, tcp_in.o(i.tcp_get_next_optbyte))
<BR><BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
</UL>

<P><STRONG><a name="[5a9]"></a>tcp_input_delayed_close</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, tcp_in.o(i.tcp_input_delayed_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = tcp_input_delayed_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[5a6]"></a>tcp_listen_input</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, tcp_in.o(i.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_netif
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[5b0]"></a>tcp_parseopt</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tcp_parseopt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_next_optbyte
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[5a8]"></a>tcp_process</STRONG> (Thumb, 1818 bytes, Stack size 40 bytes, tcp_in.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_netif
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[5b9]"></a>tcp_receive</STRONG> (Thumb, 1846 bytes, Stack size 40 bytes, tcp_in.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[5a5]"></a>tcp_timewait_input</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[59d]"></a>tcp_create_segment</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_create_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[5ab]"></a>tcp_output_alloc_header</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_output_alloc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
</UL>

<P><STRONG><a name="[5b4]"></a>tcp_output_alloc_header_common</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_output_alloc_header_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>

<P><STRONG><a name="[5ad]"></a>tcp_output_control_segment</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_output_control_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_route
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
</UL>

<P><STRONG><a name="[5ac]"></a>tcp_output_fill_options</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output_fill_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_output_fill_options &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
</UL>

<P><STRONG><a name="[5b3]"></a>tcp_output_segment</STRONG> (Thumb, 400 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_netif
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment_busy
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[5b5]"></a>tcp_output_segment_busy</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_output_segment_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_output_segment_busy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>

<P><STRONG><a name="[5b7]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_pbuf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[5b2]"></a>tcp_route</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_route &rArr; ip4_route
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_by_index
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
</UL>

<P><STRONG><a name="[5c3]"></a>tcp_write_checks</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_write_checks))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_write_checks &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[ba]"></a>lwip_cyclic_timer</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, timeouts.o(i.lwip_cyclic_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lwip_cyclic_timer &rArr; sys_timeout_abs &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_abs
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timeouts.o(i.sys_timeouts_init)
<LI> timeouts.o(i.lwip_cyclic_timer)
</UL>
<P><STRONG><a name="[282]"></a>sys_timeout_abs</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, timeouts.o(i.sys_timeout_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sys_timeout_abs &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_cyclic_timer
</UL>

<P><STRONG><a name="[e2]"></a>tcpip_tcp_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timeouts.o(i.tcpip_tcp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timeouts.o(i.tcp_timer_needed)
<LI> timeouts.o(i.tcpip_tcp_timer)
</UL>
<P><STRONG><a name="[262]"></a>icmp_send_response</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, icmp.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[216]"></a>etharp_find_entry</STRONG> (Thumb, 514 bytes, Stack size 56 bytes, etharp.o(i.etharp_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[215]"></a>etharp_free_entry</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, etharp.o(i.etharp_free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
</UL>

<P><STRONG><a name="[21b]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, etharp.o(i.etharp_output_to_arp_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[219]"></a>etharp_raw</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
</UL>

<P><STRONG><a name="[21f]"></a>etharp_request_dst</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, etharp.o(i.etharp_request_dst))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[218]"></a>etharp_update_arp_entry</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, etharp.o(i.etharp_update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</UL>

<P><STRONG><a name="[26e]"></a>ip4_input_accept</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ip4.o(i.ip4_input_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ip4_input_accept &rArr; ip4_addr_isbroadcast_u32
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[26b]"></a>ip_frag_alloc_pbuf_custom_ref</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ip4_frag.o(i.ip_frag_alloc_pbuf_custom_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ip_frag_alloc_pbuf_custom_ref &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[26c]"></a>ip_frag_free_pbuf_custom_ref</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ip4_frag.o(i.ip_frag_free_pbuf_custom_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ip_frag_free_pbuf_custom_ref &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[277]"></a>ip_reass_chain_frag_into_datagram_and_validate</STRONG> (Thumb, 530 bytes, Stack size 64 bytes, ip4_frag.o(i.ip_reass_chain_frag_into_datagram_and_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ip_reass_chain_frag_into_datagram_and_validate &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[278]"></a>ip_reass_dequeue_datagram</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ip4_frag.o(i.ip_reass_dequeue_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ip_reass_dequeue_datagram &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[276]"></a>ip_reass_enqueue_new_datagram</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ip4_frag.o(i.ip_reass_enqueue_new_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[27b]"></a>ip_reass_free_complete_datagram</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, ip4_frag.o(i.ip_reass_free_complete_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
</UL>

<P><STRONG><a name="[275]"></a>ip_reass_remove_oldest_datagram</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, ip4_frag.o(i.ip_reass_remove_oldest_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[b8]"></a>ipfrag_free_pbuf_custom</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ip4_frag.o(i.ipfrag_free_pbuf_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ipfrag_free_pbuf_custom &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip4_frag.o(i.ip4_frag)
</UL>
<P><STRONG><a name="[2c9]"></a>netconn_apimsg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, api_lib.o(i.netconn_apimsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_vectors_partly
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_prepare_delete
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd_msg
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>

<P><STRONG><a name="[2cb]"></a>netconn_close_shutdown</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, api_lib.o(i.netconn_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data_tcp
</UL>

<P><STRONG><a name="[2d1]"></a>netconn_recv_data</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, api_lib.o(i.netconn_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = netconn_recv_data &rArr; netconn_err &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_is_err_msg
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_err
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_udp_raw_netbuf_flags
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data_tcp
</UL>

<P><STRONG><a name="[2d3]"></a>netconn_recv_data_tcp</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, api_lib.o(i.netconn_recv_data_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = netconn_recv_data_tcp &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_err
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd_msg
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf_flags
</UL>

<P><STRONG><a name="[2d4]"></a>netconn_tcp_recvd_msg</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, api_lib.o(i.netconn_tcp_recvd_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = netconn_tcp_recvd_msg &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data_tcp
</UL>

<P><STRONG><a name="[bd]"></a>err_tcp</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, api_msg.o(i.err_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = err_tcp &rArr; sys_mbox_trypost &rArr; osMessageQueuePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_err_to_msg
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.lwip_netconn_do_close_internal)
<LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[290]"></a>lwip_netconn_do_close_internal</STRONG> (Thumb, 576 bytes, Stack size 48 bytes, api_msg.o(i.lwip_netconn_do_close_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
</UL>

<P><STRONG><a name="[2a3]"></a>lwip_netconn_do_writemore</STRONG> (Thumb, 714 bytes, Stack size 56 bytes, api_msg.o(i.lwip_netconn_do_writemore))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = lwip_netconn_do_writemore &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
</UL>

<P><STRONG><a name="[20f]"></a>lwip_netconn_err_to_msg</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, api_msg.o(i.lwip_netconn_err_to_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lwip_netconn_err_to_msg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
</UL>

<P><STRONG><a name="[28f]"></a>netconn_drain</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, api_msg.o(i.netconn_drain))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + In Cycle
<LI>Call Chain = netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_is_err_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
</UL>

<P><STRONG><a name="[29e]"></a>pcb_new</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, api_msg.o(i.pcb_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = pcb_new &rArr; tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
</UL>

<P><STRONG><a name="[bc]"></a>poll_tcp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, api_msg.o(i.poll_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = poll_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.lwip_netconn_do_close_internal)
<LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[df]"></a>recv_tcp</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, api_msg.o(i.recv_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = recv_tcp &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[c9]"></a>recv_udp</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, api_msg.o(i.recv_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = recv_udp &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.pcb_new)
</UL>
<P><STRONG><a name="[bb]"></a>sent_tcp</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, api_msg.o(i.sent_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = sent_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_control_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.lwip_netconn_do_close_internal)
<LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[31d]"></a>setup_tcp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, api_msg.o(i.setup_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setup_tcp &rArr; tcp_sent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[18c]"></a>alloc_socket</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, sockets.o(i.alloc_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = alloc_socket &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[e0]"></a>event_callback</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, sockets.o(i.event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = event_callback &rArr; select_check_waiters &rArr; sys_sem_signal &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_check_waiters
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.socket)
</UL>
<P><STRONG><a name="[1f1]"></a>free_socket</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, sockets.o(i.free_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = free_socket &rArr; free_socket_free_elements &rArr; netconn_delete &rArr; netconn_prepare_delete &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket_locked
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket_free_elements
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>

<P><STRONG><a name="[25a]"></a>free_socket_free_elements</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sockets.o(i.free_socket_free_elements))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = free_socket_free_elements &rArr; netconn_delete &rArr; netconn_prepare_delete &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
</UL>

<P><STRONG><a name="[259]"></a>free_socket_locked</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sockets.o(i.free_socket_locked))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free_socket_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
</UL>

<P><STRONG><a name="[1e7]"></a>get_socket</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sockets.o(i.get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_socket &rArr; tryget_socket &rArr; tryget_socket_unconn
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[583]"></a>lwip_poll_should_wake</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, sockets.o(i.lwip_poll_should_wake))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lwip_poll_should_wake
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_check_waiters
</UL>

<P><STRONG><a name="[2a7]"></a>lwip_recv_tcp</STRONG> (Thumb, 420 bytes, Stack size 64 bytes, sockets.o(i.lwip_recv_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf_flags
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_header
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[2ac]"></a>lwip_recv_tcp_from</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, sockets.o(i.lwip_recv_tcp_from))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lwip_recv_tcp_from &rArr; netconn_getaddr &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sock_make_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[2af]"></a>lwip_recvfrom_udp_raw</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, sockets.o(i.lwip_recvfrom_udp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lwip_recvfrom_udp_raw &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_udp_raw_netbuf_flags
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sock_make_addr
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[2b1]"></a>lwip_setsockopt_impl</STRONG> (Thumb, 698 bytes, Stack size 40 bytes, sockets.o(i.lwip_setsockopt_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lwip_setsockopt_impl &rArr; netif_find &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind_netif
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sockopt_to_ipopt
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind_netif
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_find
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
</UL>

<P><STRONG><a name="[2ae]"></a>lwip_sock_make_addr</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, sockets.o(i.lwip_sock_make_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lwip_sock_make_addr &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp_from
</UL>

<P><STRONG><a name="[2b2]"></a>lwip_sockopt_to_ipopt</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sockets.o(i.lwip_sockopt_to_ipopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lwip_sockopt_to_ipopt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[231]"></a>select_check_waiters</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, sockets.o(i.select_check_waiters))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = select_check_waiters &rArr; sys_sem_signal &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_poll_should_wake
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[260]"></a>tryget_socket</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sockets.o(i.tryget_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tryget_socket &rArr; tryget_socket_unconn
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket_unconn
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[5c7]"></a>tryget_socket_unconn</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sockets.o(i.tryget_socket_unconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tryget_socket_unconn
</UL>
<BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket_unconn_nouse
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
</UL>

<P><STRONG><a name="[5c8]"></a>tryget_socket_unconn_nouse</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sockets.o(i.tryget_socket_unconn_nouse))
<BR><BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket_unconn
</UL>

<P><STRONG><a name="[e3]"></a>tcpip_thread</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tcpip.o(i.tcpip_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tcpip_thread &rArr; tcpip_timeouts_mbox_fetch &rArr; sys_check_timeouts &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeouts_mbox_fetch
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread_handle_msg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_init)
</UL>
<P><STRONG><a name="[5c6]"></a>tcpip_thread_handle_msg</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, tcpip.o(i.tcpip_thread_handle_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = tcpip_thread_handle_msg &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[5c5]"></a>tcpip_timeouts_mbox_fetch</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tcpip.o(i.tcpip_timeouts_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = tcpip_timeouts_mbox_fetch &rArr; sys_check_timeouts &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_sleeptime
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[c8]"></a>os_timer_callback</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, osal.o(i.os_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = os_timer_callback &rArr; pvTimerGetTimerID
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal.o(i.os_timer_create)
</UL>
<P><STRONG><a name="[19c]"></a>app_handle_data_led_state</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, app_data.o(i.app_handle_data_led_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_handle_data_led_state &rArr; app_set_led
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_led
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_set_output_data
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_set_default_outputs
</UL>

<P><STRONG><a name="[1de]"></a>app_utils_print_mac_address</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, app_utils.o(i.app_utils_print_mac_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_utils_print_mac_address &rArr; app_log
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_get_macaddress
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_print_network_config
</UL>

<P><STRONG><a name="[551]"></a>pnal_eth_allocate_handle</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, pnal_eth.o(i.pnal_eth_allocate_handle))
<BR><BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_eth_init
</UL>

<P><STRONG><a name="[552]"></a>pnal_eth_find_handle</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pnal_eth.o(i.pnal_eth_find_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pnal_eth_find_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_eth_sys_recv
</UL>

<P><STRONG><a name="[283]"></a>pnal_eth_sys_recv</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, pnal_eth.o(i.pnal_eth_sys_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pnal_eth_sys_recv &rArr; pnal_eth_find_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_eth_find_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_hook_unknown_eth_protocol
</UL>

<P><STRONG><a name="[b1]"></a>app_alarm_ack_cnf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, sampleapp_common.o(i.app_alarm_ack_cnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_alarm_ack_cnf &rArr; app_log
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sampleapp_common.o(i.app_pnet_cfg_init_default)
</UL>
<P><STRONG><a name="[b0]"></a>app_alarm_cnf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, sampleapp_common.o(i.app_alarm_cnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_alarm_cnf &rArr; app_log
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sampleapp_common.o(i.app_pnet_cfg_init_default)
</UL>
<P><STRONG><a name="[af]"></a>app_alarm_ind</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, sampleapp_common.o(i.app_alarm_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = app_alarm_ind &rArr; os_event_set &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sampleapp_common.o(i.app_pnet_cfg_init_default)
</UL>
<P><STRONG><a name="[a9]"></a>app_ccontrol_cnf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, sampleapp_common.o(i.app_ccontrol_cnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_ccontrol_cnf &rArr; app_log
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sampleapp_common.o(i.app_pnet_cfg_init_default)
</UL>
<P><STRONG><a name="[a6]"></a>app_connect_ind</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, sampleapp_common.o(i.app_connect_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_connect_ind &rArr; app_log
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sampleapp_common.o(i.app_pnet_cfg_init_default)
</UL>
<P><STRONG><a name="[a4]"></a>app_cyclic_data_callback</STRONG> (Thumb, 284 bytes, Stack size 80 bytes, sampleapp_common.o(i.app_cyclic_data_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = app_cyclic_data_callback &rArr; pnet_output_get_data_and_iops &rArr; pf_cpm_get_data_and_iops &rArr; pf_cpm_get_ar_iocr_desc &rArr; pf_cmdev_get_subslot_full &rArr; pf_cmdev_get_api &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_print_ioxs_change
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_set_output_data
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_get_input_data
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_output_get_data_and_iops
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_input_set_data_and_iops
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_input_get_iocs
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_outputs_default_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sampleapp_common.o(i.app_exp_submodule_ind)
</UL>
<P><STRONG><a name="[a8]"></a>app_dcontrol_ind</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, sampleapp_common.o(i.app_dcontrol_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_dcontrol_ind &rArr; app_log
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_dcontrol_cmd_to_string
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sampleapp_common.o(i.app_pnet_cfg_init_default)
</UL>
<P><STRONG><a name="[ac]"></a>app_exp_module_ind</STRONG> (Thumb, 202 bytes, Stack size 64 bytes, sampleapp_common.o(i.app_exp_module_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = app_exp_module_ind &rArr; pnet_pull_module &rArr; pf_cmdev_pull_module &rArr; pf_cmdev_pull_submodule &rArr; pf_alarm_send_pull &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_pull_module
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_plug_module
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gsdml_get_module_cfg
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_pull_module
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_plug_module
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_plug_dap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sampleapp_common.o(i.app_pnet_cfg_init_default)
</UL>
<P><STRONG><a name="[ad]"></a>app_exp_submodule_ind</STRONG> (Thumb, 408 bytes, Stack size 96 bytes, sampleapp_common.o(i.app_exp_submodule_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = app_exp_submodule_ind &rArr; pnet_plug_submodule &rArr; pf_cmdev_plug_submodule &rArr; pf_cmdev_pull_submodule &rArr; pf_alarm_send_pull &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_submod_dir_to_string
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_pull_submodule
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_plug_submodule
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gsdml_get_submodule_cfg
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_pull_submodule
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_plug_submodule
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_plug_dap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sampleapp_common.o(i.app_pnet_cfg_init_default)
</UL>
<P><STRONG><a name="[1ad]"></a>app_handle_cyclic_data</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sampleapp_common.o(i.app_handle_cyclic_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_handle_cyclic_data &rArr; app_utils_cyclic_data_poll
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_cyclic_data_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_loop_forever
</UL>

<P><STRONG><a name="[1b0]"></a>app_handle_demo_pnet_api</STRONG> (Thumb, 836 bytes, Stack size 56 bytes, sampleapp_common.o(i.app_handle_demo_pnet_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = app_handle_demo_pnet_api &rArr; pnet_ar_abort &rArr; pf_cmdev_cm_abort &rArr; pf_cmdev_set_state &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_subslot_is_input
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_set_redundancy_state
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_set_primary_state
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_diag_usi_update
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_diag_usi_remove
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_diag_usi_add
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_diag_std_update
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_diag_std_remove
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_diag_std_add
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_create_log_book_entry
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_ar_abort
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_alarm_send_process_alarm
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_is_connected_to_controller
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_loop_forever
</UL>

<P><STRONG><a name="[1be]"></a>app_handle_send_alarm_ack</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, sampleapp_common.o(i.app_handle_send_alarm_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = app_handle_send_alarm_ack &rArr; pnet_alarm_send_ack &rArr; pf_alarm_alpmr_alarm_ack &rArr; pf_alarm_apms_apms_a_data_req &rArr; pf_alarm_alpmr_apms_a_data_cnf &rArr; pf_alarm_error_ind &rArr; pf_cmsu_alarm_error_ind &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_alarm_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_loop_forever
</UL>

<P><STRONG><a name="[1c0]"></a>app_handle_send_application_ready</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sampleapp_common.o(i.app_handle_send_application_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = app_handle_send_application_ready &rArr; pnet_application_ready &rArr; pf_cmdev_cm_ccontrol_req &rArr; pf_cmrpc_rm_ccontrol_req &rArr; pf_cmrpc_send_with_timeout &rArr; pf_cmrpc_send_once &rArr; pf_cmrpc_send_once_from_buffer &rArr; pf_udp_sendto &rArr; pnal_udp_sendto &rArr; sendto &rArr; send &rArr;  sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_application_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_loop_forever
</UL>

<P><STRONG><a name="[1b2]"></a>app_is_connected_to_controller</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sampleapp_common.o(i.app_is_connected_to_controller))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_loop_forever
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_state_ind
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_demo_pnet_api
</UL>

<P><STRONG><a name="[ae]"></a>app_new_data_status_ind</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, sampleapp_common.o(i.app_new_data_status_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_new_data_status_ind &rArr; app_set_outputs_default_value &rArr; app_log
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_outputs_default_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sampleapp_common.o(i.app_pnet_cfg_init_default)
</UL>
<P><STRONG><a name="[1c4]"></a>app_plug_dap</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, sampleapp_common.o(i.app_plug_dap))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = app_plug_dap &rArr; app_exp_submodule_ind &rArr; pnet_plug_submodule &rArr; pf_cmdev_plug_submodule &rArr; pf_cmdev_pull_submodule &rArr; pf_alarm_send_pull &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_exp_submodule_ind
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_exp_module_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_loop_forever
</UL>

<P><STRONG><a name="[aa]"></a>app_read_ind</STRONG> (Thumb, 174 bytes, Stack size 80 bytes, sampleapp_common.o(i.app_read_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = app_read_ind &rArr; app_data_read_parameter &rArr; app_log_print_bytes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_subslot_get
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_read_parameter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sampleapp_common.o(i.app_pnet_cfg_init_default)
</UL>
<P><STRONG><a name="[a7]"></a>app_release_ind</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, sampleapp_common.o(i.app_release_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_release_ind &rArr; app_set_outputs_default_value &rArr; app_log
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_outputs_default_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sampleapp_common.o(i.app_pnet_cfg_init_default)
</UL>
<P><STRONG><a name="[b2]"></a>app_reset_ind</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, sampleapp_common.o(i.app_reset_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_reset_ind &rArr; app_log
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sampleapp_common.o(i.app_pnet_cfg_init_default)
</UL>
<P><STRONG><a name="[1cb]"></a>app_set_initial_data_and_ioxs</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, sampleapp_common.o(i.app_set_initial_data_and_ioxs))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = app_set_initial_data_and_ioxs &rArr; pnet_input_set_data_and_iops &rArr; pf_ppm_set_data_and_iops &rArr; pf_ppm_get_ar_iocr_desc &rArr; pf_cmdev_get_subslot_full &rArr; pf_cmdev_get_api &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_ioxs_to_string
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_get_input_data
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_output_set_iocs
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_input_set_data_and_iops
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_state_ind
</UL>

<P><STRONG><a name="[193]"></a>app_set_outputs_default_value</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sampleapp_common.o(i.app_set_outputs_default_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_set_outputs_default_value &rArr; app_log
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_set_default_outputs
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_state_ind
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_release_ind
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_new_data_status_ind
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_cyclic_data_callback
</UL>

<P><STRONG><a name="[b3]"></a>app_signal_led_ind</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sampleapp_common.o(i.app_signal_led_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_signal_led_ind &rArr; app_log
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_led
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sampleapp_common.o(i.app_pnet_cfg_init_default)
</UL>
<P><STRONG><a name="[a5]"></a>app_state_ind</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, sampleapp_common.o(i.app_state_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = app_state_ind &rArr; app_set_initial_data_and_ioxs &rArr; pnet_input_set_data_and_iops &rArr; pf_ppm_set_data_and_iops &rArr; pf_ppm_get_ar_iocr_desc &rArr; pf_cmdev_get_subslot_full &rArr; pf_cmdev_get_api &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_get_error_code_strings
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_event_to_string
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_set
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_set_provider_state
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_get_ar_error_codes
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_outputs_default_value
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_initial_data_and_ioxs
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_is_connected_to_controller
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sampleapp_common.o(i.app_pnet_cfg_init_default)
</UL>
<P><STRONG><a name="[ab]"></a>app_write_ind</STRONG> (Thumb, 172 bytes, Stack size 80 bytes, sampleapp_common.o(i.app_write_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = app_write_ind &rArr; app_data_write_parameter &rArr; app_log_print_bytes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_utils_subslot_get
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_log
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_data_write_parameter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sampleapp_common.o(i.app_pnet_cfg_init_default)
</UL>
<P><STRONG><a name="[b4]"></a>main_timer_tick</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sampleapp_common.o(i.main_timer_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = main_timer_tick &rArr; os_event_set &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sampleapp_common.o(i.app_start)
</UL>
<P><STRONG><a name="[1c7]"></a>update_button_states</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sampleapp_common.o(i.update_button_states))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_button_states &rArr; app_get_button
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_button
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_loop_forever
</UL>

<P><STRONG><a name="[25d]"></a>get_check_peer</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pf_block_reader.o(i.get_check_peer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = get_check_peer &rArr; pf_get_mem &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_mem
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_port_data_check_check_peers
</UL>

<P><STRONG><a name="[4aa]"></a>pf_get_dfp_iocr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pf_block_reader.o(i.pf_get_dfp_iocr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pf_get_dfp_iocr &rArr; pf_get_uint16 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_ir_info_request
</UL>

<P><STRONG><a name="[4ac]"></a>pf_get_exp_submodule</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, pf_block_reader.o(i.pf_get_exp_submodule))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pf_get_exp_submodule &rArr; pf_get_uint32 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_submod_dir_to_string
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint32
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_byte
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_exp_api_module
</UL>

<P><STRONG><a name="[4ae]"></a>pf_get_frame_descriptor</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pf_block_reader.o(i.pf_get_frame_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pf_get_frame_descriptor &rArr; pf_get_uint16 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_iocr_api_entry
</UL>

<P><STRONG><a name="[4ab]"></a>pf_get_handle</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, pf_block_reader.o(i.pf_get_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pf_get_handle &rArr; pf_get_uint32 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint32
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_mem
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_epm_lookup_request
</UL>

<P><STRONG><a name="[4b0]"></a>pf_get_iocr_api_entry</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, pf_block_reader.o(i.pf_get_iocr_api_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pf_get_iocr_api_entry &rArr; pf_get_frame_descriptor &rArr; pf_get_uint16 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint32
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_frame_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_iocr_param
</UL>

<P><STRONG><a name="[4a9]"></a>pf_get_uuid</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pf_block_reader.o(i.pf_get_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pf_get_uuid &rArr; pf_get_uint32 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint32
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_write_request
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_read_request
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_ir_info_request
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_epm_lookup_request
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_dce_rpc_header
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_control
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_ar_prm_server_request
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_ar_param
</UL>

<P><STRONG><a name="[51b]"></a>pf_put_api_diff</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, pf_block_writer.o(i.pf_put_api_diff))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pf_put_api_diff &rArr; pf_put_module_diff &rArr; pf_put_submodule_diff &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_module_diff
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_diff
</UL>

<P><STRONG><a name="[534]"></a>pf_put_ar_vendor_block_req</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, pf_block_writer.o(i.pf_put_ar_vendor_block_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pf_put_ar_vendor_block_req
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_one_ar
</UL>

<P><STRONG><a name="[535]"></a>pf_put_ar_vendor_block_res</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, pf_block_writer.o(i.pf_put_ar_vendor_block_res))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pf_put_ar_vendor_block_res
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_one_ar
</UL>

<P><STRONG><a name="[518]"></a>pf_put_bits</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, pf_block_writer.o(i.pf_put_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pf_put_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_peer_to_peer_boundary
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pd_interface_adj
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_dce_rpc_header
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_alarm_fixed
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_alarm_block
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_submodule_diff
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_one_ar
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_iocr
</UL>

<P><STRONG><a name="[517]"></a>pf_put_block_header</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, pf_block_writer.o(i.pf_put_block_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_write_result
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_substitute_data
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_record_data_read
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_read_result
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_peer_to_peer_boundary
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_statistics
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_data_real
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_data_check
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdport_data_adj
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pdinterface_data_real
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pd_multiblock_port_and_statistics
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pd_multiblock_interface_and_statistics
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pd_interface_adj
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_output_data
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_maint_status
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_log_book_data
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_iocr_result
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_input_data
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_im_3
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_im_2
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_im_1
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_im_0_filter_data
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_im_0
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ident_data
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_control
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_vendor_result
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_server_result
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_rpc_result
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_result
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_diff
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_data
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_alarm_cr_result
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_alarm_block
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_diag_list
</UL>

<P><STRONG><a name="[520]"></a>pf_put_diag_api</STRONG> (Thumb, 152 bytes, Stack size 80 bytes, pf_block_writer.o(i.pf_put_diag_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = pf_put_diag_api &rArr; pf_put_diag_slot &rArr; pf_put_diag_subslot &rArr; pf_put_diag_list &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_diag_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_diag_device
</UL>

<P><STRONG><a name="[522]"></a>pf_put_diag_device</STRONG> (Thumb, 132 bytes, Stack size 80 bytes, pf_block_writer.o(i.pf_put_diag_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = pf_put_diag_device &rArr; pf_put_diag_api &rArr; pf_put_diag_slot &rArr; pf_put_diag_subslot &rArr; pf_put_diag_list &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_diag_api
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_diag_data
</UL>

<P><STRONG><a name="[51a]"></a>pf_put_diag_item</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, pf_block_writer.o(i.pf_put_diag_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pf_put_diag_item &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_alarm_block
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_diag_list
</UL>

<P><STRONG><a name="[523]"></a>pf_put_diag_list</STRONG> (Thumb, 414 bytes, Stack size 88 bytes, pf_block_writer.o(i.pf_put_diag_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pf_put_diag_list &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_diag_item
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_diag_item
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_block_header
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_diag_subslot
</UL>

<P><STRONG><a name="[521]"></a>pf_put_diag_slot</STRONG> (Thumb, 146 bytes, Stack size 72 bytes, pf_block_writer.o(i.pf_put_diag_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = pf_put_diag_slot &rArr; pf_put_diag_subslot &rArr; pf_put_diag_list &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_diag_subslot
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_diag_api
</UL>

<P><STRONG><a name="[524]"></a>pf_put_diag_subslot</STRONG> (Thumb, 98 bytes, Stack size 88 bytes, pf_block_writer.o(i.pf_put_diag_subslot))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = pf_put_diag_subslot &rArr; pf_put_diag_list &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_next_diagnosis_usi
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_diag_list
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_diag_slot
</UL>

<P><STRONG><a name="[536]"></a>pf_put_fsu_data</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, pf_block_writer.o(i.pf_put_fsu_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pf_put_fsu_data
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_one_ar
</UL>

<P><STRONG><a name="[525]"></a>pf_put_ident_api</STRONG> (Thumb, 260 bytes, Stack size 80 bytes, pf_block_writer.o(i.pf_put_ident_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pf_put_ident_api &rArr; pf_put_ident_slot &rArr; pf_put_ident_subslot &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ident_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ident_device
</UL>

<P><STRONG><a name="[527]"></a>pf_put_ident_device</STRONG> (Thumb, 226 bytes, Stack size 80 bytes, pf_block_writer.o(i.pf_put_ident_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = pf_put_ident_device &rArr; pf_put_ident_api &rArr; pf_put_ident_slot &rArr; pf_put_ident_subslot &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ident_api
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_im_0_filter_data
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ident_data
</UL>

<P><STRONG><a name="[526]"></a>pf_put_ident_slot</STRONG> (Thumb, 262 bytes, Stack size 64 bytes, pf_block_writer.o(i.pf_put_ident_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pf_put_ident_slot &rArr; pf_put_ident_subslot &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ident_subslot
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ident_api
</UL>

<P><STRONG><a name="[528]"></a>pf_put_ident_subslot</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, pf_block_writer.o(i.pf_put_ident_subslot))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pf_put_ident_subslot &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ident_slot
</UL>

<P><STRONG><a name="[52a]"></a>pf_put_iocr</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, pf_block_writer.o(i.pf_put_iocr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pf_put_iocr &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_get_data_status
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_get_data_status
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_one_ar
</UL>

<P><STRONG><a name="[532]"></a>pf_put_ir_info</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, pf_block_writer.o(i.pf_put_ir_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pf_put_ir_info
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_one_ar
</UL>

<P><STRONG><a name="[51c]"></a>pf_put_module_diff</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, pf_block_writer.o(i.pf_put_module_diff))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pf_put_module_diff &rArr; pf_put_submodule_diff &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_submodule_diff
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_api_diff
</UL>

<P><STRONG><a name="[51d]"></a>pf_put_one_ar</STRONG> (Thumb, 894 bytes, Stack size 72 bytes, pf_block_writer.o(i.pf_put_one_ar))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pf_put_one_ar &rArr; pf_put_iocr &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uuid
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_sr_info
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rs_info
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ir_info
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_iocr
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_fsu_data
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_bits
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_vendor_block_res
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_vendor_block_req
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_data
</UL>

<P><STRONG><a name="[53b]"></a>pf_put_rpc_epm_annotation</STRONG> (Thumb, 80 bytes, Stack size 112 bytes, pf_block_writer.o(i.pf_put_rpc_epm_annotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pf_put_rpc_epm_annotation &rArr; pf_put_mem &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_tower_entry
</UL>

<P><STRONG><a name="[52f]"></a>pf_put_rpc_epm_entry</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, pf_block_writer.o(i.pf_put_rpc_epm_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pf_put_rpc_epm_entry &rArr; pf_put_tower_entry &rArr; pf_put_rpc_floor_2_uuid &rArr; pf_put_rpc_floor_1_uuid &rArr; pf_put_rpc_uuid &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_tower_entry
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_lookup_response_data
</UL>

<P><STRONG><a name="[53e]"></a>pf_put_rpc_floor_1_uuid</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, pf_block_writer.o(i.pf_put_rpc_floor_1_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pf_put_rpc_floor_1_uuid &rArr; pf_put_rpc_uuid &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_tower_entry
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_floor_2_uuid
</UL>

<P><STRONG><a name="[53f]"></a>pf_put_rpc_floor_2_uuid</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, pf_block_writer.o(i.pf_put_rpc_floor_2_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pf_put_rpc_floor_2_uuid &rArr; pf_put_rpc_floor_1_uuid &rArr; pf_put_rpc_uuid &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_floor_1_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_tower_entry
</UL>

<P><STRONG><a name="[540]"></a>pf_put_rpc_floor_3_rpc</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, pf_block_writer.o(i.pf_put_rpc_floor_3_rpc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pf_put_rpc_floor_3_rpc &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_tower_entry
</UL>

<P><STRONG><a name="[541]"></a>pf_put_rpc_floor_4_udp</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, pf_block_writer.o(i.pf_put_rpc_floor_4_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pf_put_rpc_floor_4_udp &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_tower_entry
</UL>

<P><STRONG><a name="[542]"></a>pf_put_rpc_floor_5_ip</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, pf_block_writer.o(i.pf_put_rpc_floor_5_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pf_put_rpc_floor_5_ip &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_tower_entry
</UL>

<P><STRONG><a name="[543]"></a>pf_put_rpc_floor_count</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, pf_block_writer.o(i.pf_put_rpc_floor_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pf_put_rpc_floor_count &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_tower_entry
</UL>

<P><STRONG><a name="[52e]"></a>pf_put_rpc_handle</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, pf_block_writer.o(i.pf_put_rpc_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pf_put_rpc_handle &rArr; pf_put_rpc_uuid &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_lookup_response_data
</UL>

<P><STRONG><a name="[53c]"></a>pf_put_rpc_uuid</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, pf_block_writer.o(i.pf_put_rpc_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pf_put_rpc_uuid &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_handle
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_floor_1_uuid
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_epm_entry
</UL>

<P><STRONG><a name="[537]"></a>pf_put_rs_info</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, pf_block_writer.o(i.pf_put_rs_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pf_put_rs_info
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_one_ar
</UL>

<P><STRONG><a name="[533]"></a>pf_put_sr_info</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, pf_block_writer.o(i.pf_put_sr_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pf_put_sr_info
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_one_ar
</UL>

<P><STRONG><a name="[529]"></a>pf_put_str</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, pf_block_writer.o(i.pf_put_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pf_put_str &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_im_3
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_im_2
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_im_1
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_im_0
</UL>

<P><STRONG><a name="[531]"></a>pf_put_submodule_diff</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, pf_block_writer.o(i.pf_put_submodule_diff))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pf_put_submodule_diff &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_module_diff
</UL>

<P><STRONG><a name="[53d]"></a>pf_put_tower_entry</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, pf_block_writer.o(i.pf_put_tower_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = pf_put_tower_entry &rArr; pf_put_rpc_floor_2_uuid &rArr; pf_put_rpc_floor_1_uuid &rArr; pf_put_rpc_uuid &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_floor_count
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_floor_5_ip
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_floor_4_udp
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_floor_3_rpc
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_floor_2_uuid
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_floor_1_uuid
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_epm_annotation
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_rpc_epm_entry
</UL>

<P><STRONG><a name="[51e]"></a>pf_put_uuid</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, pf_block_writer.o(i.pf_put_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pf_put_uuid &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_write_result
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_read_result
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_log_book_data
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_dce_rpc_header
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_control
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_result
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_one_ar
</UL>

<P><STRONG><a name="[378]"></a>pf_cmdev_check_alarm_cr</STRONG> (Thumb, 386 bytes, Stack size 24 bytes, pf_cmdev.o(i.pf_cmdev_check_alarm_cr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pf_cmdev_check_alarm_cr &rArr; pf_set_error &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_apdu
</UL>

<P><STRONG><a name="[379]"></a>pf_cmdev_check_apdu</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, pf_cmdev.o(i.pf_cmdev_check_apdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pf_cmdev_check_apdu &rArr; pf_cmdev_exp_apis_configure &rArr; pf_cmdev_exp_modules_configure &rArr; pf_cmdev_exp_submodule_configure &rArr; pf_set_error &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_iocr_setup_desc
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_exp_apis_configure
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_iocr_param
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_iocr_apis
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_ar_rpc
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_ar_param
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_alarm_cr
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_connect_ind
</UL>

<P><STRONG><a name="[37a]"></a>pf_cmdev_check_ar_param</STRONG> (Thumb, 390 bytes, Stack size 24 bytes, pf_cmdev.o(i.pf_cmdev_check_ar_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pf_cmdev_check_ar_param &rArr; pf_set_error &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_zero
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_visible_string
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_ar_type
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_cm_initiator_object_uuid
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_apdu
</UL>

<P><STRONG><a name="[37f]"></a>pf_cmdev_check_ar_rpc</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, pf_cmdev.o(i.pf_cmdev_check_ar_rpc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pf_cmdev_check_ar_rpc &rArr; pf_set_error &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_apdu
</UL>

<P><STRONG><a name="[382]"></a>pf_cmdev_check_cm_initiator_object_uuid</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, pf_cmdev.o(i.pf_cmdev_check_cm_initiator_object_uuid))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_ar_param
</UL>

<P><STRONG><a name="[37e]"></a>pf_cmdev_check_iocr_apis</STRONG> (Thumb, 1432 bytes, Stack size 80 bytes, pf_cmdev.o(i.pf_cmdev_check_iocr_apis))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pf_cmdev_check_iocr_apis &rArr; pf_cmdev_check_iocr_overlap &rArr; pf_set_error &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_exp_api
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_iocr_overlap
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_apdu
</UL>

<P><STRONG><a name="[385]"></a>pf_cmdev_check_iocr_overlap</STRONG> (Thumb, 488 bytes, Stack size 40 bytes, pf_cmdev.o(i.pf_cmdev_check_iocr_overlap))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pf_cmdev_check_iocr_overlap &rArr; pf_set_error &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_no_straddle
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_iocr_apis
</UL>

<P><STRONG><a name="[37b]"></a>pf_cmdev_check_iocr_param</STRONG> (Thumb, 1242 bytes, Stack size 32 bytes, pf_cmdev.o(i.pf_cmdev_check_iocr_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pf_cmdev_check_iocr_param &rArr; pf_set_error &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_zero
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_get_min_device_interval
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_apdu
</UL>

<P><STRONG><a name="[388]"></a>pf_cmdev_check_pdev</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pf_cmdev.o(i.pf_cmdev_check_pdev))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = pf_cmdev_check_pdev &rArr; pf_pdport_is_a_fast_port_in_use &rArr; pf_pdport_get_eth_status &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_is_a_fast_port_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_dcontrol_ind
</UL>

<P><STRONG><a name="[390]"></a>pf_cmdev_cm_connect_rsp_neg</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pf_cmdev.o(i.pf_cmdev_cm_connect_rsp_neg))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = pf_cmdev_cm_connect_rsp_neg &rArr; pf_cmdev_set_state &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_create_log_book_entry
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_connect_ind
</UL>

<P><STRONG><a name="[391]"></a>pf_cmdev_cm_connect_rsp_pos</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, pf_cmdev.o(i.pf_cmdev_cm_connect_rsp_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = pf_cmdev_cm_connect_rsp_pos &rArr; pf_cmsu_start_req &rArr; pf_cpm_activate_req &rArr; pf_cmsu_cpm_error_ind &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnet_create_log_book_entry
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_set_state
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_start_req
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_connect_ind
</UL>

<P><STRONG><a name="[37c]"></a>pf_cmdev_exp_apis_configure</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, pf_cmdev.o(i.pf_cmdev_exp_apis_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pf_cmdev_exp_apis_configure &rArr; pf_cmdev_exp_modules_configure &rArr; pf_cmdev_exp_submodule_configure &rArr; pf_set_error &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_api
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_new_api
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_exp_modules_configure
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_apdu
</UL>

<P><STRONG><a name="[398]"></a>pf_cmdev_exp_modules_configure</STRONG> (Thumb, 354 bytes, Stack size 72 bytes, pf_cmdev.o(i.pf_cmdev_exp_modules_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pf_cmdev_exp_modules_configure &rArr; pf_cmdev_exp_submodule_configure &rArr; pf_set_error &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_slot
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_exp_submodule_configure
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_exp_module_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_exp_apis_configure
</UL>

<P><STRONG><a name="[39b]"></a>pf_cmdev_exp_submodule_configure</STRONG> (Thumb, 1346 bytes, Stack size 96 bytes, pf_cmdev.o(i.pf_cmdev_exp_submodule_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pf_cmdev_exp_submodule_configure &rArr; pf_set_error &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_subslot
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_exp_submodule_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_exp_modules_configure
</UL>

<P><STRONG><a name="[39e]"></a>pf_cmdev_fix_frame_id</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, pf_cmdev.o(i.pf_cmdev_fix_frame_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pf_cmdev_fix_frame_id &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_verify_free_frame_id
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_connect_ind
</UL>

<P><STRONG><a name="[384]"></a>pf_cmdev_get_exp_api</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, pf_cmdev.o(i.pf_cmdev_get_exp_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pf_cmdev_get_exp_api
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_exp_sub
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_iocr_apis
</UL>

<P><STRONG><a name="[3a1]"></a>pf_cmdev_get_exp_sub</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, pf_cmdev.o(i.pf_cmdev_get_exp_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pf_cmdev_get_exp_sub &rArr; pf_cmdev_get_exp_api
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_exp_api
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_iocr_setup_iocs
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_iocr_setup_data_iops
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_plug_submodule
</UL>

<P><STRONG><a name="[3a2]"></a>pf_cmdev_get_exp_sub_data_descriptor</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, pf_cmdev.o(i.pf_cmdev_get_exp_sub_data_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = pf_cmdev_get_exp_sub_data_descriptor &rArr; pf_cmdev_calculate_exp_sub_data_descriptor_direction
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_calculate_exp_sub_data_descriptor_direction
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_iocr_setup_iocs
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_iocr_setup_data_iops
</UL>

<P><STRONG><a name="[399]"></a>pf_cmdev_get_slot</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, pf_cmdev.o(i.pf_cmdev_get_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pf_cmdev_get_slot &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_subslot_full
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_slot_full
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_generate_submodule_diff
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_new_slot
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_exp_modules_configure
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_pull_submodule
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_pull_module
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_plug_submodule
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_plug_module
</UL>

<P><STRONG><a name="[39c]"></a>pf_cmdev_get_subslot</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, pf_cmdev.o(i.pf_cmdev_get_subslot))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pf_cmdev_get_subslot &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_subslot_full
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_generate_submodule_diff
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_new_subslot
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_exp_submodule_configure
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_pull_submodule
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_plug_submodule
</UL>

<P><STRONG><a name="[3a8]"></a>pf_cmdev_iocr_setup_data_iops</STRONG> (Thumb, 638 bytes, Stack size 128 bytes, pf_cmdev.o(i.pf_cmdev_iocr_setup_data_iops))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pf_cmdev_iocr_setup_data_iops &rArr; pf_cmdev_get_exp_sub &rArr; pf_cmdev_get_exp_api
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_exp_sub_data_descriptor
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_exp_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_iocr_setup_desc
</UL>

<P><STRONG><a name="[37d]"></a>pf_cmdev_iocr_setup_desc</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, pf_cmdev.o(i.pf_cmdev_iocr_setup_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = pf_cmdev_iocr_setup_desc &rArr; pf_cmdev_iocr_setup_data_iops &rArr; pf_cmdev_get_exp_sub &rArr; pf_cmdev_get_exp_api
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_iocr_setup_iocs
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_iocr_setup_data_iops
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_check_apdu
</UL>

<P><STRONG><a name="[3a9]"></a>pf_cmdev_iocr_setup_iocs</STRONG> (Thumb, 542 bytes, Stack size 120 bytes, pf_cmdev.o(i.pf_cmdev_iocr_setup_iocs))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pf_cmdev_iocr_setup_iocs &rArr; pf_cmdev_get_exp_sub &rArr; pf_cmdev_get_exp_api
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_exp_sub_data_descriptor
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_exp_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_iocr_setup_desc
</UL>

<P><STRONG><a name="[397]"></a>pf_cmdev_new_api</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, pf_cmdev.o(i.pf_cmdev_new_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pf_cmdev_new_api &rArr; pf_cmdev_get_api &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_api
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_exp_apis_configure
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_init
</UL>

<P><STRONG><a name="[3ab]"></a>pf_cmdev_new_slot</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, pf_cmdev.o(i.pf_cmdev_new_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pf_cmdev_new_slot &rArr; pf_cmdev_get_slot &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_slot
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_plug_module
</UL>

<P><STRONG><a name="[3ac]"></a>pf_cmdev_new_subslot</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, pf_cmdev.o(i.pf_cmdev_new_subslot))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pf_cmdev_new_subslot &rArr; pf_cmdev_get_subslot &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_subslot
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_plug_submodule
</UL>

<P><STRONG><a name="[3b1]"></a>pf_cmdev_reset_observers</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pf_cmdev.o(i.pf_cmdev_reset_observers))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = pf_cmdev_reset_observers &rArr; pf_pdport_reset_all &rArr; pf_pdport_remove_all_diag &rArr; pf_diag_std_remove &rArr; pf_diag_remove &rArr; pf_alarm_send_diagnosis &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_reset_all
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_connect_ind
</UL>

<P><STRONG><a name="[38b]"></a>pf_cmdev_set_state</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, pf_cmdev.o(i.pf_cmdev_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = pf_cmdev_set_state &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_device_clear
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_to_string
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_cmio_info_ind
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_cm_ccontrol_req
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_cm_abort
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_cm_connect_rsp_pos
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_cm_connect_rsp_neg
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_release_ind
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_dcontrol_ind
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_connect_ind
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_ccontrol_cnf
</UL>

<P><STRONG><a name="[39f]"></a>pf_cmdev_verify_free_frame_id</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, pf_cmdev.o(i.pf_cmdev_verify_free_frame_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pf_cmdev_verify_free_frame_id
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_find_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_fix_frame_id
</UL>

<P><STRONG><a name="[3c0]"></a>pf_device_clear</STRONG> (Thumb, 226 bytes, Stack size 20 bytes, pf_cmdev.o(i.pf_device_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pf_device_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_set_state
</UL>

<P><STRONG><a name="[3c9]"></a>pf_cmina_abort_active_ars</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, pf_cmina.o(i.pf_cmina_abort_active_ars))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = pf_cmina_abort_active_ars &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_find_by_index
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_set_ind
</UL>

<P><STRONG><a name="[cd]"></a>pf_cmina_send_hello</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, pf_cmina.o(i.pf_cmina_send_hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = pf_cmina_send_hello &rArr; pf_dcp_hello_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_reset_handle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_hello_req
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pf_cmina.o(i.pf_cmina_init)
<LI> pf_cmina.o(i.pf_cmina_send_hello)
</UL>
<P><STRONG><a name="[3e2]"></a>pf_cmio_set_state</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, pf_cmio.o(i.pf_cmio_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pf_cmio_set_state &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmio_state_to_string
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmio_cmdev_state_ind
</UL>

<P><STRONG><a name="[3e1]"></a>pf_cmio_state_to_string</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, pf_cmio.o(i.pf_cmio_state_to_string))
<BR><BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmio_set_state
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmio_cmdev_state_ind
</UL>

<P><STRONG><a name="[ce]"></a>pf_cmio_timer_expired</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, pf_cmio.o(i.pf_cmio_timer_expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = pf_cmio_timer_expired &rArr; pf_cmdev_cmio_info_ind &rArr; pf_cmdev_set_state &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_cmio_info_ind
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_reset_handle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pf_cmio.o(i.pf_cmio_timer_expired)
<LI> pf_cmio.o(i.pf_cmio_cmdev_state_ind)
</UL>
<P><STRONG><a name="[3e6]"></a>pf_cmpbe_set_state</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, pf_cmpbe.o(i.pf_cmpbe_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pf_cmpbe_set_state &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmpbe_state_to_string
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmpbe_rm_dcontrol_ind
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmpbe_rm_ccontrol_cnf
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmpbe_cmdev_state_ind
</UL>

<P><STRONG><a name="[3e5]"></a>pf_cmpbe_state_to_string</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, pf_cmpbe.o(i.pf_cmpbe_state_to_string))
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmpbe_rm_dcontrol_ind
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmpbe_set_state
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmpbe_cmdev_state_ind
</UL>

<P><STRONG><a name="[36e]"></a>pf_ar_allocate</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, pf_cmrpc.o(i.pf_ar_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pf_ar_allocate &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmwrr_init
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_init
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_init_handle
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_ind
</UL>

<P><STRONG><a name="[371]"></a>pf_ar_find_by_uuid</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, pf_cmrpc.o(i.pf_ar_find_by_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = pf_ar_find_by_uuid &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_state
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_release_ind
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_read_ind
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_dcontrol_ind
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_ind
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_perform_one_write
</UL>

<P><STRONG><a name="[373]"></a>pf_ar_release</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, pf_cmrpc.o(i.pf_ar_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pf_ar_release &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_ind
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_cmdev_state_ind
</UL>

<P><STRONG><a name="[430]"></a>pf_ar_type_to_string</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pf_cmrpc.o(i.pf_ar_type_to_string))
<BR><BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_interpret_ind
</UL>

<P><STRONG><a name="[376]"></a>pf_check_block_header</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, pf_cmrpc.o(i.pf_check_block_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pf_check_block_header &rArr; pf_set_error &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_interpret_ind
</UL>

<P><STRONG><a name="[40f]"></a>pf_cmrpc_dce_packet</STRONG> (Thumb, 3450 bytes, Stack size 304 bytes, pf_cmrpc.o(i.pf_cmrpc_dce_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4272<LI>Call Chain = pf_cmrpc_dce_packet &rArr; pf_cmrpc_rpc_request &rArr; pf_cmrpc_rm_read_ind &rArr; pf_cmrdr_rm_read_ind &rArr; pf_pdport_read_ind &rArr; pf_lldp_get_peer_station_name &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_current_time_us
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint32
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_ndr_data
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_dce_rpc_header
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_cm_abort
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem_overlapping
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_dce_rpc_header
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_session_release
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_session_locate_by_uuid
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_session_allocate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_send_with_timeout
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_send_once_from_buffer
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_send_once
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rpc_response
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rpc_request
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_lookup_ind
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_remove_if_running
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_ind
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_periodic
</UL>

<P><STRONG><a name="[417]"></a>pf_cmrpc_lookup_ind</STRONG> (Thumb, 132 bytes, Stack size 136 bytes, pf_cmrpc.o(i.pf_cmrpc_lookup_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = pf_cmrpc_lookup_ind &rArr; pf_cmrpc_lookup_request &rArr; pf_put_lookup_response_data &rArr; pf_put_rpc_epm_entry &rArr; pf_put_tower_entry &rArr; pf_put_rpc_floor_2_uuid &rArr; pf_put_rpc_floor_1_uuid &rArr; pf_put_rpc_uuid &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_epm_lookup_request
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_lookup_request
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_dce_packet
</UL>

<P><STRONG><a name="[421]"></a>pf_cmrpc_perform_one_write</STRONG> (Thumb, 290 bytes, Stack size 64 bytes, pf_cmrpc.o(i.pf_cmrpc_perform_one_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008<LI>Call Chain = pf_cmrpc_perform_one_write &rArr; pf_cmwrr_rm_write_ind &rArr; pf_cmwrr_write &rArr; pf_fspm_cm_write_ind &rArr; pf_fspm_save_im &rArr; pf_file_save_if_modified &rArr; pf_file_load &rArr; pnal_load_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_block_header
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_api
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmwrr_rm_write_ind
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error_if_not_already_set
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_find_by_uuid
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_write_ind
</UL>

<P><STRONG><a name="[427]"></a>pf_cmrpc_rm_ccontrol_cnf</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, pf_cmrpc.o(i.pf_cmrpc_rm_ccontrol_cnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = pf_cmrpc_rm_ccontrol_cnf &rArr; pf_cmdev_rm_ccontrol_cnf &rArr; pf_cmdev_set_state &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_ccontrol_interpret_cnf
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmpbe_rm_ccontrol_cnf
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_ccontrol_cnf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rpc_response
</UL>

<P><STRONG><a name="[428]"></a>pf_cmrpc_rm_ccontrol_interpret_cnf</STRONG> (Thumb, 414 bytes, Stack size 48 bytes, pf_cmrpc.o(i.pf_cmrpc_rm_ccontrol_interpret_cnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pf_cmrpc_rm_ccontrol_interpret_cnf &rArr; pf_get_control &rArr; pf_get_uuid &rArr; pf_get_uint32 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_control
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_block_header
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_ccontrol_cnf
</UL>

<P><STRONG><a name="[42b]"></a>pf_cmrpc_rm_connect_ind</STRONG> (Thumb, 458 bytes, Stack size 72 bytes, pf_cmrpc.o(i.pf_cmrpc_rm_connect_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = pf_cmrpc_rm_connect_ind &rArr; pf_cmdev_rm_connect_ind &rArr; pf_pdport_ar_connect_ind &rArr; pf_lldp_send_enable &rArr; pf_lldp_tx_restart &rArr; pf_lldp_send &rArr; pf_lldp_construct_frame &rArr; pf_lldp_get_port_id &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_cm_abort
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_lldp_restart_transmission
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_rsp
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_interpret_ind
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_release
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_find_by_uuid
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_allocate
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_connect_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rpc_request
</UL>

<P><STRONG><a name="[42c]"></a>pf_cmrpc_rm_connect_interpret_ind</STRONG> (Thumb, 2346 bytes, Stack size 72 bytes, pf_cmrpc.o(i.pf_cmrpc_rm_connect_interpret_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pf_cmrpc_rm_connect_interpret_ind &rArr; pf_get_exp_api_module &rArr; pf_get_exp_submodule &rArr; pf_get_uint32 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_mcr_request
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_ir_info_request
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_iocr_param
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_exp_api_module
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_block_header
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_ar_vendor_request
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_ar_rpc_request
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_ar_prm_server_request
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_ar_param
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_alarm_cr_request
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_iocr_type_to_string
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_check_block_header
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_type_to_string
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_ind
</UL>

<P><STRONG><a name="[42d]"></a>pf_cmrpc_rm_connect_rsp</STRONG> (Thumb, 530 bytes, Stack size 48 bytes, pf_cmrpc.o(i.pf_cmrpc_rm_connect_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pf_cmrpc_rm_connect_rsp &rArr; pf_put_ar_diff &rArr; pf_put_api_diff &rArr; pf_put_module_diff &rArr; pf_put_submodule_diff &rArr; pf_put_uint32 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pnet_status
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_iocr_result
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_vendor_result
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_server_result
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_rpc_result
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_result
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_ar_diff
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_alarm_cr_result
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_ind
</UL>

<P><STRONG><a name="[440]"></a>pf_cmrpc_rm_dcontrol_ind</STRONG> (Thumb, 268 bytes, Stack size 80 bytes, pf_cmrpc.o(i.pf_cmrpc_rm_dcontrol_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = pf_cmrpc_rm_dcontrol_ind &rArr; pf_cmdev_rm_dcontrol_ind &rArr; pf_cmdev_set_state &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_dcontrol_rsp
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_dcontrol_interpret_req
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_find_by_uuid
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmpbe_rm_dcontrol_ind
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_dcontrol_ind
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rpc_request
</UL>

<P><STRONG><a name="[441]"></a>pf_cmrpc_rm_dcontrol_interpret_req</STRONG> (Thumb, 404 bytes, Stack size 48 bytes, pf_cmrpc.o(i.pf_cmrpc_rm_dcontrol_interpret_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pf_cmrpc_rm_dcontrol_interpret_req &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_control
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_block_header
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_dcontrol_ind
</UL>

<P><STRONG><a name="[442]"></a>pf_cmrpc_rm_dcontrol_rsp</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, pf_cmrpc.o(i.pf_cmrpc_rm_dcontrol_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = pf_cmrpc_rm_dcontrol_rsp &rArr; pf_put_control &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pnet_status
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_control
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_dcontrol_ind
</UL>

<P><STRONG><a name="[443]"></a>pf_cmrpc_rm_read_ind</STRONG> (Thumb, 602 bytes, Stack size 128 bytes, pf_cmrpc.o(i.pf_cmrpc_rm_read_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 3912<LI>Call Chain = pf_cmrpc_rm_read_ind &rArr; pf_cmrdr_rm_read_ind &rArr; pf_pdport_read_ind &rArr; pf_lldp_get_peer_station_name &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_api
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pnet_status
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_rm_read_ind
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_read_interpret_ind
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_find_by_uuid
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_rm_read_ind
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rpc_request
</UL>

<P><STRONG><a name="[444]"></a>pf_cmrpc_rm_read_interpret_ind</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, pf_cmrpc.o(i.pf_cmrpc_rm_read_interpret_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pf_cmrpc_rm_read_interpret_ind &rArr; pf_get_read_request &rArr; pf_get_uuid &rArr; pf_get_uint32 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_read_request
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_block_header
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_read_ind
</UL>

<P><STRONG><a name="[447]"></a>pf_cmrpc_rm_release_ind</STRONG> (Thumb, 270 bytes, Stack size 88 bytes, pf_cmrpc.o(i.pf_cmrpc_rm_release_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = pf_cmrpc_rm_release_ind &rArr; pf_cmdev_rm_release_ind &rArr; pf_cmdev_set_state &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pnet_status
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_release_rsp
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_release_interpret_req
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ar_find_by_uuid
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_rm_release_ind
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rpc_request
</UL>

<P><STRONG><a name="[449]"></a>pf_cmrpc_rm_release_interpret_req</STRONG> (Thumb, 374 bytes, Stack size 48 bytes, pf_cmrpc.o(i.pf_cmrpc_rm_release_interpret_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pf_cmrpc_rm_release_interpret_req &rArr; pf_get_control &rArr; pf_get_uuid &rArr; pf_get_uint32 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_control
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_block_header
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_release_ind
</UL>

<P><STRONG><a name="[448]"></a>pf_cmrpc_rm_release_rsp</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, pf_cmrpc.o(i.pf_cmrpc_rm_release_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = pf_cmrpc_rm_release_rsp &rArr; pf_put_control &rArr; pf_put_block_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pnet_status
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_control
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_release_ind
</UL>

<P><STRONG><a name="[44a]"></a>pf_cmrpc_rm_write_ind</STRONG> (Thumb, 842 bytes, Stack size 320 bytes, pf_cmrpc.o(i.pf_cmrpc_rm_write_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 2328<LI>Call Chain = pf_cmrpc_rm_write_ind &rArr; pf_cmrpc_perform_one_write &rArr; pf_cmwrr_rm_write_ind &rArr; pf_cmwrr_write &rArr; pf_fspm_cm_write_ind &rArr; pf_fspm_save_im &rArr; pf_file_save_if_modified &rArr; pf_file_load &rArr; pnal_load_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_write_result
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pnet_status
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_write_interpret_ind
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_perform_one_write
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rpc_request
</UL>

<P><STRONG><a name="[44b]"></a>pf_cmrpc_rm_write_interpret_ind</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, pf_cmrpc.o(i.pf_cmrpc_rm_write_interpret_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pf_cmrpc_rm_write_interpret_ind &rArr; pf_get_write_request &rArr; pf_get_uuid &rArr; pf_get_uint32 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_write_request
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_block_header
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_write_ind
</UL>

<P><STRONG><a name="[416]"></a>pf_cmrpc_rpc_request</STRONG> (Thumb, 320 bytes, Stack size 56 bytes, pf_cmrpc.o(i.pf_cmrpc_rpc_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 3968<LI>Call Chain = pf_cmrpc_rpc_request &rArr; pf_cmrpc_rm_read_ind &rArr; pf_cmrdr_rm_read_ind &rArr; pf_pdport_read_ind &rArr; pf_lldp_get_peer_station_name &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_write_ind
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_release_ind
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_read_ind
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_dcontrol_ind
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_dce_packet
</UL>

<P><STRONG><a name="[41a]"></a>pf_cmrpc_rpc_response</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, pf_cmrpc.o(i.pf_cmrpc_rpc_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = pf_cmrpc_rpc_response &rArr; pf_cmrpc_rm_ccontrol_cnf &rArr; pf_cmdev_rm_ccontrol_cnf &rArr; pf_cmdev_set_state &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_ccontrol_cnf
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_dce_packet
</UL>

<P><STRONG><a name="[418]"></a>pf_cmrpc_send_once</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, pf_cmrpc.o(i.pf_cmrpc_send_once))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = pf_cmrpc_send_once &rArr; pf_cmrpc_send_once_from_buffer &rArr; pf_udp_sendto &rArr; pnal_udp_sendto &rArr; sendto &rArr; send &rArr;  sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_send_once_from_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_send_with_timeout
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_dce_packet
</UL>

<P><STRONG><a name="[414]"></a>pf_cmrpc_send_once_from_buffer</STRONG> (Thumb, 138 bytes, Stack size 72 bytes, pf_cmrpc.o(i.pf_cmrpc_send_once_from_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = pf_cmrpc_send_once_from_buffer &rArr; pf_udp_sendto &rArr; pnal_udp_sendto &rArr; sendto &rArr; send &rArr;  sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_udp_sendto
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_ip_to_string
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_send_once
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_dce_packet
</UL>

<P><STRONG><a name="[cf]"></a>pf_cmrpc_send_with_timeout</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, pf_cmrpc.o(i.pf_cmrpc_send_with_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = pf_cmrpc_send_with_timeout &rArr; pf_cmrpc_send_once &rArr; pf_cmrpc_send_once_from_buffer &rArr; pf_udp_sendto &rArr; pnal_udp_sendto &rArr; sendto &rArr; send &rArr;  sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_cm_abort
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_udp_close
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_send_once
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_reset_handle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_dce_packet
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_ccontrol_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pf_cmrpc.o(i.pf_cmrpc_send_with_timeout)
</UL>
<P><STRONG><a name="[432]"></a>pf_iocr_type_to_string</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, pf_cmrpc.o(i.pf_iocr_type_to_string))
<BR><BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_connect_interpret_ind
</UL>

<P><STRONG><a name="[412]"></a>pf_session_allocate</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, pf_cmrpc.o(i.pf_session_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pf_session_allocate &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_current_time_us
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_generate_uuid
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_init_handle
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_device_macaddr
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_dce_packet
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_rm_ccontrol_req
</UL>

<P><STRONG><a name="[40e]"></a>pf_session_locate_by_ar</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, pf_cmrpc.o(i.pf_session_locate_by_ar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pf_session_locate_by_ar
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_cmdev_state_ind
</UL>

<P><STRONG><a name="[411]"></a>pf_session_locate_by_uuid</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, pf_cmrpc.o(i.pf_session_locate_by_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pf_session_locate_by_uuid &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_dce_packet
</UL>

<P><STRONG><a name="[40d]"></a>pf_session_release</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, pf_cmrpc.o(i.pf_session_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = pf_session_release &rArr; pf_udp_close &rArr; pnal_udp_close &rArr; close &rArr; free_socket &rArr; free_socket_free_elements &rArr; netconn_delete &rArr; netconn_prepare_delete &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_udp_close
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_remove_if_running
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_dce_packet
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_cmdev_state_ind
</UL>

<P><STRONG><a name="[3ea]"></a>pf_cmrdr_add_epmv4_entry</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, pf_cmrpc_epm.o(i.pf_cmrdr_add_epmv4_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pf_cmrdr_add_epmv4_entry &rArr; pf_init_rpc_tower_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_current_time_us
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_init_rpc_tower_entry
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_generate_epm_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_inquiry_read_all_reg_ind
</UL>

<P><STRONG><a name="[3ed]"></a>pf_cmrdr_add_pnio_entry</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, pf_cmrpc_epm.o(i.pf_cmrdr_add_pnio_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pf_cmrdr_add_pnio_entry &rArr; pf_init_rpc_tower_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_current_time_us
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_init_rpc_tower_entry
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_generate_epm_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_inquiry_read_all_reg_ind
</UL>

<P><STRONG><a name="[3ee]"></a>pf_cmrdr_inquiry_read_all_reg_ind</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, pf_cmrpc_epm.o(i.pf_cmrdr_inquiry_read_all_reg_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pf_cmrdr_inquiry_read_all_reg_ind &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_add_pnio_entry
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_add_epmv4_entry
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrpc_lookup_request
</UL>

<P><STRONG><a name="[3eb]"></a>pf_generate_epm_handle</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, pf_cmrpc_epm.o(i.pf_generate_epm_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pf_generate_epm_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_add_pnio_entry
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_add_epmv4_entry
</UL>

<P><STRONG><a name="[3ec]"></a>pf_init_rpc_tower_entry</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, pf_cmrpc_epm.o(i.pf_init_rpc_tower_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pf_init_rpc_tower_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_add_pnio_entry
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmrdr_add_epmv4_entry
</UL>

<P><STRONG><a name="[453]"></a>pf_cmsm_set_state</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, pf_cmsm.o(i.pf_cmsm_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pf_cmsm_set_state &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_state_to_string
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_timeout
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_cmdev_state_ind
</UL>

<P><STRONG><a name="[452]"></a>pf_cmsm_state_to_string</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pf_cmsm.o(i.pf_cmsm_state_to_string))
<BR><BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_set_state
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_cmdev_state_ind
</UL>

<P><STRONG><a name="[d0]"></a>pf_cmsm_timeout</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, pf_cmsm.o(i.pf_cmsm_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = pf_cmsm_timeout &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsm_set_state
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_reset_handle
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_to_string
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_state_ind
</UL>
<BR>[Address Reference Count : 4]<UL><LI> pf_cmsm.o(i.pf_cmsm_cm_read_ind)
<LI> pf_cmsm.o(i.pf_cmsm_cm_write_ind)
<LI> pf_cmsm.o(i.pf_cmsm_cmdev_state_ind)
<LI> pf_cmsm.o(i.pf_cmsm_rm_read_ind)
</UL>
<P><STRONG><a name="[45a]"></a>pf_cmsu_set_state</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, pf_cmsu.o(i.pf_cmsu_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pf_cmsu_set_state &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_state_to_string
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_start_req
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_cmdev_state_ind
</UL>

<P><STRONG><a name="[455]"></a>pf_cmsu_state_to_string</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, pf_cmsu.o(i.pf_cmsu_state_to_string))
<BR><BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_set_state
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_cmdev_state_ind
</UL>

<P><STRONG><a name="[461]"></a>pf_cmwrr_state_to_string</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, pf_cmwrr.o(i.pf_cmwrr_state_to_string))
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmwrr_cmdev_state_ind
</UL>

<P><STRONG><a name="[462]"></a>pf_cmwrr_write</STRONG> (Thumb, 324 bytes, Stack size 88 bytes, pf_cmwrr.o(i.pf_cmwrr_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888<LI>Call Chain = pf_cmwrr_write &rArr; pf_fspm_cm_write_ind &rArr; pf_fspm_save_im &rArr; pf_file_save_if_modified &rArr; pf_file_load &rArr; pnal_load_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_subslot_is_dap_port_id
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_dap_subslot_to_local_port
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_index_to_logstring
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_write_req
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_cm_write_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmwrr_rm_write_ind
</UL>

<P><STRONG><a name="[482]"></a>pf_diag_find_entry</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, pf_diag.o(i.pf_diag_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pf_diag_find_entry &rArr; pf_cmdev_get_subslot_full &rArr; pf_cmdev_get_api &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_subslot_full
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_diag_item
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_update
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_remove
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_add
</UL>

<P><STRONG><a name="[484]"></a>pf_diag_find_first_ar</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, pf_diag.o(i.pf_diag_find_first_ar))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pf_diag_find_first_ar
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_update
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_remove
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_add
</UL>

<P><STRONG><a name="[486]"></a>pf_diag_get_preferred_usi</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pf_diag.o(i.pf_diag_get_preferred_usi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pf_diag_get_preferred_usi
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_get_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_std_update
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_std_remove
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_std_add
</UL>

<P><STRONG><a name="[485]"></a>pf_diag_update_station_problem_indicator</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, pf_diag.o(i.pf_diag_update_station_problem_indicator))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pf_diag_update_station_problem_indicator &rArr; pf_ppm_set_problem_indicator
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_diag_item
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_device
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_set_problem_indicator
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_update
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_remove
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_add
</UL>

<P><STRONG><a name="[483]"></a>pf_diag_update_submodule_state</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, pf_diag.o(i.pf_diag_update_submodule_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pf_diag_update_submodule_state &rArr; pf_alarm_add_diag_item_to_summary
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_diag_item
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_device
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_add_diag_item_to_summary
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_update
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_remove
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_add
</UL>

<P><STRONG><a name="[4a7]"></a>pf_fspm_load_im</STRONG> (Thumb, 142 bytes, Stack size 200 bytes, pf_fspm.o(i.pf_fspm_load_im))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = pf_fspm_load_im &rArr; pf_file_load &rArr; pnal_load_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_load
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_file_directory
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_init
</UL>

<P><STRONG><a name="[db]"></a>pf_lldp_trigger_linkmonitor</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, pf_pdport.o(i.pf_lldp_trigger_linkmonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pf_lldp_trigger_linkmonitor &rArr; pf_pdport_monitor_link &rArr; pf_pdport_handle_link_down &rArr; pf_lldp_stop_peer_timeout &rArr; pf_scheduler_remove_if_running &rArr; pf_scheduler_remove &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_bg_worker_start_job
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_next_repeat_cyclic
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_monitor_link
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pf_pdport.o(i.pf_pdport_start_linkmonitor)
<LI> pf_pdport.o(i.pf_lldp_trigger_linkmonitor)
</UL>
<P><STRONG><a name="[4ea]"></a>pf_pdport_check_no_peer_detected</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, pf_pdport.o(i.pf_pdport_check_no_peer_detected))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = pf_pdport_check_no_peer_detected &rArr; pf_diag_std_add &rArr; pf_diag_add &rArr; pf_alarm_send_diagnosis &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_timestamp
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_init_diag_source
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_std_remove
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_std_add
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_run_peer_check
</UL>

<P><STRONG><a name="[4ec]"></a>pf_pdport_check_peer_port_name</STRONG> (Thumb, 174 bytes, Stack size 320 bytes, pf_pdport.o(i.pf_pdport_check_peer_port_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = pf_pdport_check_peer_port_name &rArr; pf_diag_std_add &rArr; pf_diag_add &rArr; pf_alarm_send_diagnosis &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_port_id
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_init_diag_source
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_std_remove
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_std_add
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_run_peer_check
</UL>

<P><STRONG><a name="[4ed]"></a>pf_pdport_check_peer_station_name</STRONG> (Thumb, 182 bytes, Stack size 304 bytes, pf_pdport.o(i.pf_pdport_check_peer_station_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = pf_pdport_check_peer_station_name &rArr; pf_lldp_get_peer_station_name &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_get_peer_station_name
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_init_diag_source
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_std_remove
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_std_add
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_run_peer_check
</UL>

<P><STRONG><a name="[4ef]"></a>pf_pdport_filter_mau_type</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pf_pdport.o(i.pf_pdport_filter_mau_type))
<BR><BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_get_eth_status_filtered_mau
</UL>

<P><STRONG><a name="[4f0]"></a>pf_pdport_get_filename</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pf_pdport.o(i.pf_pdport_get_filename))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pf_pdport_get_filename &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_save
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_load
</UL>

<P><STRONG><a name="[4f1]"></a>pf_pdport_handle_link_down</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pf_pdport.o(i.pf_pdport_handle_link_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pf_pdport_handle_link_down &rArr; pf_lldp_stop_peer_timeout &rArr; pf_scheduler_remove_if_running &rArr; pf_scheduler_remove &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_stop_peer_timeout
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_invalidate_peer_info
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_peer_indication
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_monitor_link
</UL>

<P><STRONG><a name="[4f2]"></a>pf_pdport_handle_link_up</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pf_pdport.o(i.pf_pdport_handle_link_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pf_pdport_handle_link_up &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_monitor_link
</UL>

<P><STRONG><a name="[4eb]"></a>pf_pdport_init_diag_source</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pf_pdport.o(i.pf_pdport_init_diag_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pf_pdport_init_diag_source &rArr; pf_port_loc_port_num_to_dap_subslot &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_loc_port_num_to_dap_subslot
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_remove_all_diag
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_check_peer_station_name
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_check_peer_port_name
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_check_no_peer_detected
</UL>

<P><STRONG><a name="[4f4]"></a>pf_pdport_load</STRONG> (Thumb, 242 bytes, Stack size 560 bytes, pf_pdport.o(i.pf_pdport_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = pf_pdport_load &rArr; pf_file_load &rArr; pnal_load_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_load
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_file_directory
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_send_enable
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_send_disable
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_restart_peer_timeout
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_get_filename
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_init
</UL>

<P><STRONG><a name="[4e9]"></a>pf_pdport_monitor_link</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, pf_pdport.o(i.pf_pdport_monitor_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = pf_pdport_monitor_link &rArr; pf_pdport_handle_link_down &rArr; pf_lldp_stop_peer_timeout &rArr; pf_scheduler_remove_if_running &rArr; pf_scheduler_remove &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_get_eth_status
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_handle_link_up
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_handle_link_down
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_trigger_linkmonitor
</UL>

<P><STRONG><a name="[502]"></a>pf_pdport_remove_all_diag</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, pf_pdport.o(i.pf_pdport_remove_all_diag))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = pf_pdport_remove_all_diag &rArr; pf_diag_std_remove &rArr; pf_diag_remove &rArr; pf_alarm_send_diagnosis &rArr; pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_init_diag_source
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_diag_std_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_reset_all
</UL>

<P><STRONG><a name="[4f8]"></a>pf_pdport_run_peer_check</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, pf_pdport.o(i.pf_pdport_run_peer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = pf_pdport_run_peer_check &rArr; pf_pdport_check_peer_station_name &rArr; pf_lldp_get_peer_station_name &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_check_peer_station_name
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_check_peer_port_name
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_check_no_peer_detected
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_periodic
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_write_data_check
</UL>

<P><STRONG><a name="[4f5]"></a>pf_pdport_save</STRONG> (Thumb, 202 bytes, Stack size 1072 bytes, pf_pdport.o(i.pf_pdport_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 2400<LI>Call Chain = pf_pdport_save &rArr; pf_file_save_if_modified &rArr; pf_file_load &rArr; pnal_load_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_file_save_if_modified
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_file_directory
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_get_filename
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_save_all
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_init
</UL>

<P><STRONG><a name="[505]"></a>pf_pdport_write_data_adj</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, pf_pdport.o(i.pf_pdport_write_data_adj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = pf_pdport_write_data_adj &rArr; pf_lldp_send_enable &rArr; pf_lldp_tx_restart &rArr; pf_lldp_send &rArr; pf_lldp_construct_frame &rArr; pf_lldp_get_port_id &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_port_data_adjust_peer_to_peer_boundary
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_port_data_adjust
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_send_enable
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_send_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_write_req
</UL>

<P><STRONG><a name="[506]"></a>pf_pdport_write_data_check</STRONG> (Thumb, 286 bytes, Stack size 584 bytes, pf_pdport.o(i.pf_pdport_write_data_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = pf_pdport_write_data_check &rArr; pf_pdport_run_peer_check &rArr; pf_pdport_check_peer_station_name &rArr; pf_lldp_get_peer_station_name &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_port_data_check_check_peers
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_port_data_check
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_run_peer_check
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_write_req
</UL>

<P><STRONG><a name="[507]"></a>pf_pdport_write_interface_adj</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, pf_pdport.o(i.pf_pdport_write_interface_adj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = pf_pdport_write_interface_adj &rArr; pf_pdport_lldp_restart_transmission &rArr; pf_lldp_send_enable &rArr; pf_lldp_tx_restart &rArr; pf_lldp_send &rArr; pf_lldp_construct_frame &rArr; pf_lldp_get_port_id &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_interface_adjust
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_lldp_restart_transmission
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_write_req
</UL>

<P><STRONG><a name="[323]"></a>pf_alarm_almpi_periodic</STRONG> (Thumb, 104 bytes, Stack size 88 bytes, pf_alarm.o(i.pf_alarm_almpi_periodic))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = pf_alarm_almpi_periodic &rArr; pf_alarm_send_internal &rArr; pf_alarm_apms_apms_a_data_req &rArr; pf_alarm_alpmr_apms_a_data_cnf &rArr; pf_alarm_error_ind &rArr; pf_cmsu_alarm_error_ind &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_queue_fetch
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_periodic
</UL>

<P><STRONG><a name="[326]"></a>pf_alarm_alpmi_apmr_a_data_ind</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, pf_alarm.o(i.pf_alarm_alpmi_apmr_a_data_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pf_alarm_alpmi_apmr_a_data_ind &rArr; pf_fspm_alpmi_alarm_cnf &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_alpmi_alarm_cnf
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_a_data_ind
</UL>

<P><STRONG><a name="[328]"></a>pf_alarm_alpmi_apms_a_data_cnf</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, pf_alarm.o(i.pf_alarm_alpmi_apms_a_data_cnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = pf_alarm_alpmi_apms_a_data_cnf &rArr; pf_alarm_error_ind &rArr; pf_cmsu_alarm_error_ind &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_error_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_apms_a_data_req
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_a_data_ind
</UL>

<P><STRONG><a name="[32d]"></a>pf_alarm_alpmr_apmr_a_data_ind</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, pf_alarm.o(i.pf_alarm_alpmr_apmr_a_data_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = pf_alarm_alpmr_apmr_a_data_ind &rArr; pf_alarm_error_ind &rArr; pf_cmsu_alarm_error_ind &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_alpmr_alarm_ind
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_error_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_a_data_ind
</UL>

<P><STRONG><a name="[32f]"></a>pf_alarm_alpmr_apms_a_data_cnf</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, pf_alarm.o(i.pf_alarm_alpmr_apms_a_data_cnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = pf_alarm_alpmr_apms_a_data_cnf &rArr; pf_alarm_error_ind &rArr; pf_cmsu_alarm_error_ind &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_alpmr_alarm_ack_cnf
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_error_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_apms_a_data_req
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_a_data_ind
</UL>

<P><STRONG><a name="[32c]"></a>pf_alarm_alpmr_state_to_string</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, pf_alarm.o(i.pf_alarm_alpmr_state_to_string))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_alpmr_alarm_ack
</UL>

<P><STRONG><a name="[321]"></a>pf_alarm_alpmx_activate</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, pf_alarm.o(i.pf_alarm_alpmx_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pf_alarm_alpmx_activate
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_activate
</UL>

<P><STRONG><a name="[355]"></a>pf_alarm_alpmx_close</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, pf_alarm.o(i.pf_alarm_alpmx_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pf_alarm_alpmx_close
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_close
</UL>

<P><STRONG><a name="[331]"></a>pf_alarm_apmr_a_data_ind</STRONG> (Thumb, 580 bytes, Stack size 136 bytes, pf_alarm.o(i.pf_alarm_apmr_a_data_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = pf_alarm_apmr_a_data_ind &rArr; pf_alarm_alpmr_apmr_a_data_ind &rArr; pf_alarm_error_ind &rArr; pf_cmsu_alarm_error_ind &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_pnio_status
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_block_header
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_alarm_data
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_create_log_book_entry
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_error_ind
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_a_data_ind
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_send_nack
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_send_ack
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_alpmr_apmr_a_data_ind
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_alpmi_apmr_a_data_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_periodic
</UL>

<P><STRONG><a name="[cb]"></a>pf_alarm_apmr_frame_handler</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, pf_alarm.o(i.pf_alarm_apmr_frame_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pf_alarm_apmr_frame_handler &rArr; pf_alarm_receive_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_receive_queue_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pf_alarm.o(i.pf_alarm_apmx_activate)
</UL>
<P><STRONG><a name="[33b]"></a>pf_alarm_apmr_periodic</STRONG> (Thumb, 580 bytes, Stack size 88 bytes, pf_alarm.o(i.pf_alarm_apmr_periodic))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = pf_alarm_apmr_periodic &rArr; pf_alarm_apmr_a_data_ind &rArr; pf_alarm_alpmr_apmr_a_data_ind &rArr; pf_alarm_error_ind &rArr; pf_cmsu_alarm_error_ind &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_buf_free
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_pnio_status
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_alarm_fixed
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_receive_queue_fetch
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_error_ind
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_a_data_ind
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_state_to_string
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_a_data_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_periodic
</UL>

<P><STRONG><a name="[334]"></a>pf_alarm_apmr_send_ack</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, pf_alarm.o(i.pf_alarm_apmr_send_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = pf_alarm_apmr_send_ack &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_a_data_req
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_a_data_ind
</UL>

<P><STRONG><a name="[339]"></a>pf_alarm_apmr_send_nack</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, pf_alarm.o(i.pf_alarm_apmr_send_nack))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = pf_alarm_apmr_send_nack &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_a_data_req
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_a_data_ind
</UL>

<P><STRONG><a name="[33d]"></a>pf_alarm_apmr_state_to_string</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pf_alarm.o(i.pf_alarm_apmr_state_to_string))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_periodic
</UL>

<P><STRONG><a name="[333]"></a>pf_alarm_apms_a_data_ind</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, pf_alarm.o(i.pf_alarm_apms_a_data_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = pf_alarm_apms_a_data_ind &rArr; pf_alarm_alpmr_apms_a_data_cnf &rArr; pf_alarm_error_ind &rArr; pf_cmsu_alarm_error_ind &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_buf_free
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_alpmr_apms_a_data_cnf
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_alpmi_apms_a_data_cnf
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_periodic
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_a_data_ind
</UL>

<P><STRONG><a name="[340]"></a>pf_alarm_apms_a_data_req</STRONG> (Thumb, 678 bytes, Stack size 112 bytes, pf_alarm.o(i.pf_alarm_apms_a_data_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_buf_free
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_buf_alloc
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_pnet_status
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_alarm_fixed
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_alarm_block
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_device_macaddr
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_send_on_management_port
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_pdu_type_to_string
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmx_close
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_apms_a_data_req
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_send_nack
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_send_ack
</UL>

<P><STRONG><a name="[32b]"></a>pf_alarm_apms_apms_a_data_req</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, pf_alarm.o(i.pf_alarm_apms_apms_a_data_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = pf_alarm_apms_apms_a_data_req &rArr; pf_alarm_alpmr_apms_a_data_cnf &rArr; pf_alarm_error_ind &rArr; pf_cmsu_alarm_error_ind &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_a_data_req
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_alpmr_apms_a_data_cnf
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_alpmi_apms_a_data_cnf
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_alpmr_alarm_ack
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_internal
</UL>

<P><STRONG><a name="[34c]"></a>pf_alarm_apms_state_to_string</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pf_alarm.o(i.pf_alarm_apms_state_to_string))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_timeout
</UL>

<P><STRONG><a name="[ca]"></a>pf_alarm_apms_timeout</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, pf_alarm.o(i.pf_alarm_apms_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = pf_alarm_apms_timeout &rArr; pf_alarm_error_ind &rArr; pf_cmsu_alarm_error_ind &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_buf_free
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_reset_handle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_send_on_management_port
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_error_ind
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_state_to_string
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pf_alarm.o(i.pf_alarm_apms_apms_a_data_req)
<LI> pf_alarm.o(i.pf_alarm_apms_timeout)
</UL>
<P><STRONG><a name="[322]"></a>pf_alarm_apmx_activate</STRONG> (Thumb, 636 bytes, Stack size 24 bytes, pf_alarm.o(i.pf_alarm_apmx_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = pf_alarm_apmx_activate &rArr; pf_alarm_receive_queue_reset &rArr; pnal_buf_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_init_handle
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_frame_id_map_add
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_receive_queue_reset
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_activate
</UL>

<P><STRONG><a name="[350]"></a>pf_alarm_apmx_close</STRONG> (Thumb, 450 bytes, Stack size 64 bytes, pf_alarm.o(i.pf_alarm_apmx_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_buf_free
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_remove_if_running
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_frame_id_map_remove
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_receive_queue_reset
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_queue_mutex_destroy
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_a_data_req
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_close
</UL>

<P><STRONG><a name="[329]"></a>pf_alarm_error_ind</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, pf_alarm.o(i.pf_alarm_error_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = pf_alarm_error_ind &rArr; pf_cmsu_alarm_error_ind &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_alarm_error_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_timeout
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_periodic
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apmr_a_data_ind
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_alpmr_apms_a_data_cnf
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_alpmr_apmr_a_data_ind
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_alpmi_apms_a_data_cnf
</UL>

<P><STRONG><a name="[357]"></a>pf_alarm_get_diag_summary</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, pf_alarm.o(i.pf_alarm_get_diag_summary))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pf_alarm_get_diag_summary &rArr; pf_cmdev_get_subslot_full &rArr; pf_cmdev_get_api &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_subslot_full
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_diag_item
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_device
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_add_diag_item_to_summary
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_internal
</UL>

<P><STRONG><a name="[343]"></a>pf_alarm_pdu_type_to_string</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, pf_alarm.o(i.pf_alarm_pdu_type_to_string))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_a_data_req
</UL>

<P><STRONG><a name="[363]"></a>pf_alarm_queue_accountant_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pf_alarm.o(i.pf_alarm_queue_accountant_reset))
<BR><BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_queue_reset
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_receive_queue_reset
</UL>

<P><STRONG><a name="[361]"></a>pf_alarm_queue_get_readindex</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pf_alarm.o(i.pf_alarm_queue_get_readindex))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_queue_fetch
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_receive_queue_fetch
</UL>

<P><STRONG><a name="[362]"></a>pf_alarm_queue_get_writeindex</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, pf_alarm.o(i.pf_alarm_queue_get_writeindex))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_queue_post
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_receive_queue_post
</UL>

<P><STRONG><a name="[35e]"></a>pf_alarm_queue_lock</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pf_alarm.o(i.pf_alarm_queue_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pf_alarm_queue_lock &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_queue_reset
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_queue_post
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_queue_fetch
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_receive_queue_reset
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_receive_queue_post
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_receive_queue_fetch
</UL>

<P><STRONG><a name="[35f]"></a>pf_alarm_queue_unlock</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pf_alarm.o(i.pf_alarm_queue_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_queue_reset
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_queue_post
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_queue_fetch
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_receive_queue_reset
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_receive_queue_post
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_receive_queue_fetch
</UL>

<P><STRONG><a name="[364]"></a>pf_alarm_send_alarm</STRONG> (Thumb, 292 bytes, Stack size 104 bytes, pf_alarm.o(i.pf_alarm_send_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pf_alarm_send_alarm &rArr; pf_alarm_send_queue_post &rArr; pf_alarm_queue_unlock &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_queue_post
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_pull
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_plug_wrong
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_plug
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_process
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_usi_diagnosis_disappears
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_send_diagnosis
</UL>

<P><STRONG><a name="[325]"></a>pf_alarm_send_internal</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, pf_alarm.o(i.pf_alarm_send_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = pf_alarm_send_internal &rArr; pf_alarm_apms_apms_a_data_req &rArr; pf_alarm_alpmr_apms_a_data_cnf &rArr; pf_alarm_error_ind &rArr; pf_cmsu_alarm_error_ind &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_get_diag_summary
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_apms_apms_a_data_req
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_alarm_almpi_periodic
</UL>

<P><STRONG><a name="[cc]"></a>bg_worker_task</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, pf_bg_worker.o(i.bg_worker_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 2576<LI>Call Chain = bg_worker_task &rArr; pf_cmina_save_ase &rArr; pf_file_save_if_modified &rArr; pf_file_load &rArr; pnal_load_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wait
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_clr
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_save_ase
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_update_eth_status
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_save_all
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_save_im
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pf_bg_worker.o(i.pf_bg_worker_init)
</UL>
<P><STRONG><a name="[46e]"></a>pf_cpm_get_ar_iocr_desc</STRONG> (Thumb, 264 bytes, Stack size 64 bytes, pf_cpm.o(i.pf_cpm_get_ar_iocr_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pf_cpm_get_ar_iocr_desc &rArr; pf_cmdev_get_subslot_full &rArr; pf_cmdev_get_api &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmdev_get_subslot_full
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_get_iocs
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_get_data_and_iops
</UL>

<P><STRONG><a name="[470]"></a>pf_cpm_state_to_string</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pf_cpm.o(i.pf_cpm_state_to_string))
<BR><BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_set_state
</UL>

<P><STRONG><a name="[d2]"></a>pf_cpm_c_data_ind</STRONG> (Thumb, 468 bytes, Stack size 96 bytes, pf_cpm_driver_sw.o(i.pf_cpm_c_data_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = pf_cpm_c_data_ind &rArr; pf_cpm_state_ind &rArr; pf_cmio_cpm_state_ind &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_buf_free
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmio_cpm_new_data_ind
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_data_status_changed
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_put_buf
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_state_ind
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_set_state
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_check_src_addr
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_check_cycle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pf_cpm_driver_sw.o(i.pf_cpm_driver_sw_activate_req)
</UL>
<P><STRONG><a name="[d1]"></a>pf_cpm_control_interval_expired</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, pf_cpm_driver_sw.o(i.pf_cpm_control_interval_expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = pf_cpm_control_interval_expired &rArr; pf_cpm_state_ind &rArr; pf_cmio_cpm_state_ind &rArr; pf_cmdev_state_ind &rArr; pf_cmsu_cmdev_state_ind &rArr; pf_alarm_close &rArr; pf_alarm_apmx_close &rArr; pf_alarm_apms_a_data_req &rArr; pnal_buf_alloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_current_time_us
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmsu_cpm_error_ind
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_reset_handle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_state_ind
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_set_state
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pf_cpm_driver_sw.o(i.pf_cpm_control_interval_expired)
<LI> pf_cpm_driver_sw.o(i.pf_cpm_driver_sw_activate_req)
</UL>
<P><STRONG><a name="[f1]"></a>pf_cpm_driver_sw_activate_req</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, pf_cpm_driver_sw.o(i.pf_cpm_driver_sw_activate_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pf_cpm_driver_sw_activate_req &rArr; pf_scheduler_add &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_init_handle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_frame_id_map_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pf_cpm_driver_sw.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>pf_cpm_driver_sw_close_req</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, pf_cpm_driver_sw.o(i.pf_cpm_driver_sw_close_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = pf_cpm_driver_sw_close_req &rArr; pnal_buf_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_buf_free
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_remove_if_running
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_frame_id_map_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pf_cpm_driver_sw.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>pf_cpm_driver_sw_create</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pf_cpm_driver_sw.o(i.pf_cpm_driver_sw_create))
<BR>[Address Reference Count : 1]<UL><LI> pf_cpm_driver_sw.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>pf_cpm_driver_sw_get_data_and_iops</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, pf_cpm_driver_sw.o(i.pf_cpm_driver_sw_get_data_and_iops))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pf_cpm_driver_sw_get_data_and_iops &rArr; pf_cpm_get_buf &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_get_buf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pf_cpm_driver_sw.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>pf_cpm_driver_sw_get_data_status</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pf_cpm_driver_sw.o(i.pf_cpm_driver_sw_get_data_status))
<BR>[Address Reference Count : 1]<UL><LI> pf_cpm_driver_sw.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>pf_cpm_driver_sw_get_iocs</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, pf_cpm_driver_sw.o(i.pf_cpm_driver_sw_get_iocs))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pf_cpm_driver_sw_get_iocs &rArr; pf_cpm_get_buf &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_get_buf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pf_cpm_driver_sw.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>pf_cpm_driver_sw_show</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, pf_cpm_driver_sw.o(i.pf_cpm_driver_sw_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pf_cpm_driver_sw_show &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pf_cpm_driver_sw.o(.constdata)
</UL>
<P><STRONG><a name="[46c]"></a>pf_cpm_get_buf</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, pf_cpm_driver_sw.o(i.pf_cpm_get_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pf_cpm_get_buf &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_driver_sw_get_iocs
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_driver_sw_get_data_and_iops
</UL>

<P><STRONG><a name="[46a]"></a>pf_cpm_put_buf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, pf_cpm_driver_sw.o(i.pf_cpm_put_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pf_cpm_put_buf &rArr; os_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cpm_c_data_ind
</UL>

<P><STRONG><a name="[473]"></a>pf_dcp_check_sam</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pf_dcp.o(i.pf_dcp_check_sam))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = pf_dcp_check_sam &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_get_set
</UL>

<P><STRONG><a name="[d8]"></a>pf_dcp_clear_sam</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pf_dcp.o(i.pf_dcp_clear_sam))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pf_dcp_clear_sam &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_reset_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pf_dcp.o(i.pf_dcp_restart_sam_timeout)
</UL>
<P><STRONG><a name="[d3]"></a>pf_dcp_control_signal_led</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, pf_dcp.o(i.pf_dcp_control_signal_led))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pf_dcp_control_signal_led &rArr; pf_scheduler_add &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_reset_handle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_fspm_signal_led_ind
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pf_dcp.o(i.pf_dcp_control_signal_led)
<LI> pf_dcp.o(i.pf_dcp_trigger_signal_led)
</UL>
<P><STRONG><a name="[476]"></a>pf_dcp_get_req</STRONG> (Thumb, 574 bytes, Stack size 128 bytes, pf_dcp.o(i.pf_dcp_get_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = pf_dcp_get_req &rArr; pf_dcp_put_block &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_get_req
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_put_block
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_identify_req
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_get_set
</UL>

<P><STRONG><a name="[d6]"></a>pf_dcp_get_set</STRONG> (Thumb, 676 bytes, Stack size 104 bytes, pf_dcp.o(i.pf_dcp_get_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 2336<LI>Call Chain = pf_dcp_get_set &rArr; pf_dcp_set_req &rArr; pf_cmina_dcp_set_ind &rArr; pf_cmina_set_default_cfg &rArr; pf_file_load &rArr; pnal_load_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_buf_free
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_buf_alloc
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_lldp_restart_transmission
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_set_commit
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_device_macaddr
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_check_destination_address
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_set_req
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_restart_sam_timeout
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_get_req
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_check_sam
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_send_on_management_port
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pf_dcp.o(i.pf_dcp_init)
</UL>
<P><STRONG><a name="[d5]"></a>pf_dcp_hello_ind</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, pf_dcp.o(i.pf_dcp_hello_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pf_dcp_hello_ind &rArr; pnal_buf_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_buf_free
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pf_dcp.o(i.pf_dcp_init)
</UL>
<P><STRONG><a name="[d7]"></a>pf_dcp_identify_req</STRONG> (Thumb, 1480 bytes, Stack size 424 bytes, pf_dcp.o(i.pf_dcp_identify_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = pf_dcp_identify_req &rArr; pf_lldp_is_alias_matching &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_buf_free
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_buf_alloc
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_get_req
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_get_device_macaddr
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_is_alias_matching
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_calculate_response_delay
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_get_req
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pf_dcp.o(i.pf_dcp_init)
</UL>
<P><STRONG><a name="[479]"></a>pf_dcp_put_block</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, pf_dcp.o(i.pf_dcp_put_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pf_dcp_put_block &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_hello_req
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_set_req
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_get_req
</UL>

<P><STRONG><a name="[d4]"></a>pf_dcp_responder</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, pf_dcp.o(i.pf_dcp_responder))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = pf_dcp_responder &rArr; pnal_buf_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_buf_free
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_reset_handle
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_send_on_management_port
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pf_dcp.o(i.pf_dcp_identify_req)
</UL>
<P><STRONG><a name="[47b]"></a>pf_dcp_restart_sam_timeout</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pf_dcp.o(i.pf_dcp_restart_sam_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pf_dcp_restart_sam_timeout &rArr; pf_scheduler_restart &rArr; pf_scheduler_remove_if_running &rArr; pf_scheduler_remove &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_get_set
</UL>

<P><STRONG><a name="[47a]"></a>pf_dcp_set_req</STRONG> (Thumb, 562 bytes, Stack size 112 bytes, pf_dcp.o(i.pf_dcp_set_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232<LI>Call Chain = pf_dcp_set_req &rArr; pf_cmina_dcp_set_ind &rArr; pf_cmina_set_default_cfg &rArr; pf_file_load &rArr; pnal_load_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_cmina_dcp_set_ind
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_trigger_signal_led
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_put_block
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_dcp_get_set
</UL>

<P><STRONG><a name="[493]"></a>pf_eth_init_netif</STRONG> (Thumb, 174 bytes, Stack size 64 bytes, pf_eth.o(i.pf_eth_init_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pf_eth_init_netif &rArr; pnal_eth_init &rArr; netif_find &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_eth_init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_get_macaddress
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_init
</UL>

<P><STRONG><a name="[4b5]"></a>pf_lldp_add_chassis_id_tlv</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, pf_lldp.o(i.pf_lldp_add_chassis_id_tlv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pf_lldp_add_chassis_id_tlv &rArr; pf_lldp_add_tlv_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_tlv_header
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_construct_frame
</UL>

<P><STRONG><a name="[4b7]"></a>pf_lldp_add_chassis_mac</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, pf_lldp.o(i.pf_lldp_add_chassis_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pf_lldp_add_chassis_mac &rArr; pf_lldp_add_pnio_header &rArr; pf_lldp_add_tlv_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_pnio_header
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_construct_frame
</UL>

<P><STRONG><a name="[4b9]"></a>pf_lldp_add_ethernet_header</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, pf_lldp.o(i.pf_lldp_add_ethernet_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pf_lldp_add_ethernet_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_construct_frame
</UL>

<P><STRONG><a name="[4ba]"></a>pf_lldp_add_ieee_mac_phy</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, pf_lldp.o(i.pf_lldp_add_ieee_mac_phy))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pf_lldp_add_ieee_mac_phy &rArr; pf_lldp_add_tlv_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_tlv_header
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_construct_frame
</UL>

<P><STRONG><a name="[4bb]"></a>pf_lldp_add_management</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, pf_lldp.o(i.pf_lldp_add_management))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pf_lldp_add_management &rArr; pf_lldp_add_tlv_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint32
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_tlv_header
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_construct_frame
</UL>

<P><STRONG><a name="[4b8]"></a>pf_lldp_add_pnio_header</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, pf_lldp.o(i.pf_lldp_add_pnio_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pf_lldp_add_pnio_header &rArr; pf_lldp_add_tlv_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_tlv_header
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_port_status
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_chassis_mac
</UL>

<P><STRONG><a name="[4bc]"></a>pf_lldp_add_port_id_tlv</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, pf_lldp.o(i.pf_lldp_add_port_id_tlv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pf_lldp_add_port_id_tlv &rArr; pf_lldp_add_tlv_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_mem
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_tlv_header
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_construct_frame
</UL>

<P><STRONG><a name="[4bd]"></a>pf_lldp_add_port_status</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, pf_lldp.o(i.pf_lldp_add_port_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pf_lldp_add_port_status &rArr; pf_lldp_add_pnio_header &rArr; pf_lldp_add_tlv_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_byte
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_pnio_header
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_construct_frame
</UL>

<P><STRONG><a name="[4b6]"></a>pf_lldp_add_tlv_header</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, pf_lldp.o(i.pf_lldp_add_tlv_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pf_lldp_add_tlv_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_construct_frame
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_ttl_tlv
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_port_id_tlv
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_pnio_header
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_management
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_ieee_mac_phy
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_chassis_id_tlv
</UL>

<P><STRONG><a name="[4be]"></a>pf_lldp_add_ttl_tlv</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pf_lldp.o(i.pf_lldp_add_ttl_tlv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pf_lldp_add_ttl_tlv &rArr; pf_lldp_add_tlv_header &rArr; pf_put_uint16 &rArr; pf_put_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_put_uint16
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_add_tlv_header
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_construct_frame
</UL>

<P><STRONG><a name="[4c7]"></a>pf_lldp_get_chassis_id_from_packet</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, pf_lldp.o(i.pf_lldp_get_chassis_id_from_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pf_lldp_get_chassis_id_from_packet &rArr; pf_get_mem &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_mem
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_parse_packet
</UL>

<P><STRONG><a name="[4c8]"></a>pf_lldp_get_chassis_mac_from_packet</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, pf_lldp.o(i.pf_lldp_get_chassis_mac_from_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pf_lldp_get_chassis_mac_from_packet &rArr; pf_get_mem &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_parse_packet
</UL>

<P><STRONG><a name="[4ca]"></a>pf_lldp_get_link_status_from_packet</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, pf_lldp.o(i.pf_lldp_get_link_status_from_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pf_lldp_get_link_status_from_packet &rArr; pf_get_uint16 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_parse_packet
</UL>

<P><STRONG><a name="[4cc]"></a>pf_lldp_get_management_address_from_packet</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, pf_lldp.o(i.pf_lldp_get_management_address_from_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pf_lldp_get_management_address_from_packet &rArr; pf_get_uint32 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint32
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_mem
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_byte
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_parse_packet
</UL>

<P><STRONG><a name="[4d3]"></a>pf_lldp_get_port_description_from_packet</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, pf_lldp.o(i.pf_lldp_get_port_description_from_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pf_lldp_get_port_description_from_packet &rArr; pf_get_mem &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_parse_packet
</UL>

<P><STRONG><a name="[4d4]"></a>pf_lldp_get_port_id_from_packet</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, pf_lldp.o(i.pf_lldp_get_port_id_from_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pf_lldp_get_port_id_from_packet &rArr; pf_get_mem &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_mem
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_parse_packet
</UL>

<P><STRONG><a name="[4d5]"></a>pf_lldp_get_port_status_from_packet</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, pf_lldp.o(i.pf_lldp_get_port_status_from_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pf_lldp_get_port_status_from_packet &rArr; pf_get_mem &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_parse_packet
</UL>

<P><STRONG><a name="[4d6]"></a>pf_lldp_get_signal_delay_from_packet</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, pf_lldp.o(i.pf_lldp_get_signal_delay_from_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pf_lldp_get_signal_delay_from_packet &rArr; pf_get_uint32 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint32
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_parse_packet
</UL>

<P><STRONG><a name="[4d8]"></a>pf_lldp_get_ttl_from_packet</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, pf_lldp.o(i.pf_lldp_get_ttl_from_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pf_lldp_get_ttl_from_packet &rArr; pf_get_uint16 &rArr; pf_get_byte &rArr; os_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_get_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_parse_packet
</UL>

<P><STRONG><a name="[4dc]"></a>pf_lldp_management_address_is_ipv4</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pf_lldp.o(i.pf_lldp_management_address_is_ipv4))
<BR><BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_parse_packet
</UL>

<P><STRONG><a name="[da]"></a>pf_lldp_receive_timeout</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, pf_lldp.o(i.pf_lldp_receive_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pf_lldp_receive_timeout &rArr; pf_lldp_invalidate_peer_info &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_reset_handle
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_invalidate_peer_info
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pdport_peer_indication
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pf_lldp.o(i.pf_lldp_restart_peer_timeout)
</UL>
<P><STRONG><a name="[4e1]"></a>pf_lldp_send</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pf_lldp.o(i.pf_lldp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = pf_lldp_send &rArr; pf_lldp_construct_frame &rArr; pf_lldp_get_port_id &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_buf_free
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnal_buf_alloc
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_send_on_physical_port
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_construct_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_tx_restart
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_trigger_sending
</UL>

<P><STRONG><a name="[dc]"></a>pf_lldp_trigger_sending</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, pf_lldp.o(i.pf_lldp_trigger_sending))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = pf_lldp_trigger_sending &rArr; pf_lldp_send &rArr; pf_lldp_construct_frame &rArr; pf_lldp_get_port_id &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_send
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pf_lldp.o(i.pf_lldp_trigger_sending)
<LI> pf_lldp.o(i.pf_lldp_tx_restart)
</UL>
<P><STRONG><a name="[4e4]"></a>pf_lldp_tx_restart</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, pf_lldp.o(i.pf_lldp_tx_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = pf_lldp_tx_restart &rArr; pf_lldp_send &rArr; pf_lldp_construct_frame &rArr; pf_lldp_get_port_id &rArr; pf_port_get_state &rArr; pf_port_is_valid &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_restart
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_port_get_state
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_lldp_send_enable
</UL>

<P><STRONG><a name="[50e]"></a>pf_ppm_init_buf</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, pf_ppm.o(i.pf_ppm_init_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pf_ppm_init_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_create
</UL>

<P><STRONG><a name="[50d]"></a>pf_ppm_init_cr_config</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, pf_ppm.o(i.pf_ppm_init_cr_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pf_ppm_init_cr_config
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_create
</UL>

<P><STRONG><a name="[510]"></a>pf_ppm_drv_sw_read_frame_buffer</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_read_frame_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pf_ppm_drv_sw_read_frame_buffer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_read_iocs
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_read_data_and_iops
</UL>

<P><STRONG><a name="[dd]"></a>pf_ppm_drv_sw_send</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pf_ppm_drv_sw_send &rArr; pf_scheduler_add &rArr; pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_reset_handle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_eth_send_on_management_port
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_state_ind
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_finish_buffer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_activate_req)
<LI> pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_send)
</UL>
<P><STRONG><a name="[511]"></a>pf_ppm_drv_sw_write_frame_buffer</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, pf_ppm_driver_sw.o(i.pf_ppm_drv_sw_write_frame_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pf_ppm_drv_sw_write_frame_buffer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_write_iocs
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_ppm_drv_sw_write_data_and_iops
</UL>

<P><STRONG><a name="[549]"></a>pf_scheduler_is_linked</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, pf_scheduler.o(i.pf_scheduler_is_linked))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_report
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_unlink
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_link_before
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_link_after
</UL>

<P><STRONG><a name="[547]"></a>pf_scheduler_link_after</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, pf_scheduler.o(i.pf_scheduler_link_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pf_scheduler_link_after &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_is_linked
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
</UL>

<P><STRONG><a name="[546]"></a>pf_scheduler_link_before</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, pf_scheduler.o(i.pf_scheduler_link_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pf_scheduler_link_before &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_is_linked
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_tick
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_init
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_remove
</UL>

<P><STRONG><a name="[545]"></a>pf_scheduler_unlink</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, pf_scheduler.o(i.pf_scheduler_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pf_scheduler_unlink &rArr; pf_scheduler_is_linked &rArr; assert_report &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_log
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_is_linked
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_add
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_tick
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_scheduler_remove
</UL>

<P><STRONG><a name="[17c]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[179]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[18a]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[189]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a3]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
